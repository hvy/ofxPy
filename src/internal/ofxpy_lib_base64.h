static const char *of_py_base64 = "# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_of', [dirname(__file__)])
        except ImportError:
            import _of
            return _of
        if fp is not None:
            try:
                _mod = imp.load_module('_of', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _of = swig_import_helper()
    del swig_import_helper
else:
    import _of
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _of.SwigPyIterator_value(self)
    def incr(self, n=1): return _of.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _of.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _of.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _of.SwigPyIterator_equal(self, *args)
    def copy(self): return _of.SwigPyIterator_copy(self)
    def next(self): return _of.SwigPyIterator_next(self)
    def __next__(self): return _of.SwigPyIterator___next__(self)
    def previous(self): return _of.SwigPyIterator_previous(self)
    def advance(self, *args): return _of.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _of.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _of.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _of.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _of.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _of.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _of.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _of.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ofBaseDraws(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseDraws, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseDraws, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseDraws
    __del__ = lambda self : None;
    def draw(self, *args): return _of.ofBaseDraws_draw(self, *args)
    def getHeight(self): return _of.ofBaseDraws_getHeight(self)
    def getWidth(self): return _of.ofBaseDraws_getWidth(self)
    def setAnchorPercent(self, *args): return _of.ofBaseDraws_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _of.ofBaseDraws_setAnchorPoint(self, *args)
    def resetAnchor(self): return _of.ofBaseDraws_resetAnchor(self)
ofBaseDraws_swigregister = _of.ofBaseDraws_swigregister
ofBaseDraws_swigregister(ofBaseDraws)

class ofBaseUpdates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseUpdates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseUpdates, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseUpdates
    __del__ = lambda self : None;
    def update(self): return _of.ofBaseUpdates_update(self)
ofBaseUpdates_swigregister = _of.ofBaseUpdates_swigregister
ofBaseUpdates_swigregister(ofBaseUpdates)

class ofBaseHasTexture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseHasTexture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseHasTexture, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseHasTexture
    __del__ = lambda self : None;
    def getTextureReference(self): return _of.ofBaseHasTexture_getTextureReference(self)
    def setUseTexture(self, *args): return _of.ofBaseHasTexture_setUseTexture(self, *args)
ofBaseHasTexture_swigregister = _of.ofBaseHasTexture_swigregister
ofBaseHasTexture_swigregister(ofBaseHasTexture)

class ofAbstractHasPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofAbstractHasPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofAbstractHasPixels, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofAbstractHasPixels
    __del__ = lambda self : None;
    def __init__(self): 
        this = _of.new_ofAbstractHasPixels()
        try: self.this.append(this)
        except: self.this = this
ofAbstractHasPixels_swigregister = _of.ofAbstractHasPixels_swigregister
ofAbstractHasPixels_swigregister(ofAbstractHasPixels)

class ofAbstractImage(ofBaseDraws,ofBaseHasTexture):
    __swig_setmethods__ = {}
    for _s in [ofBaseDraws,ofBaseHasTexture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofAbstractImage, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseDraws,ofBaseHasTexture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofAbstractImage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofAbstractImage
    __del__ = lambda self : None;
ofAbstractImage_swigregister = _of.ofAbstractImage_swigregister
ofAbstractImage_swigregister(ofAbstractImage)

class ofBaseSoundInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseSoundInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseSoundInput, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseSoundInput
    __del__ = lambda self : None;
    def audioIn(self, *args): return _of.ofBaseSoundInput_audioIn(self, *args)
    def audioReceived(self, *args): return _of.ofBaseSoundInput_audioReceived(self, *args)
    def __init__(self): 
        this = _of.new_ofBaseSoundInput()
        try: self.this.append(this)
        except: self.this = this
ofBaseSoundInput_swigregister = _of.ofBaseSoundInput_swigregister
ofBaseSoundInput_swigregister(ofBaseSoundInput)

class ofBaseSoundOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseSoundOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseSoundOutput, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseSoundOutput
    __del__ = lambda self : None;
    def audioOut(self, *args): return _of.ofBaseSoundOutput_audioOut(self, *args)
    def audioRequested(self, *args): return _of.ofBaseSoundOutput_audioRequested(self, *args)
    def __init__(self): 
        this = _of.new_ofBaseSoundOutput()
        try: self.this.append(this)
        except: self.this = this
ofBaseSoundOutput_swigregister = _of.ofBaseSoundOutput_swigregister
ofBaseSoundOutput_swigregister(ofBaseSoundOutput)

class ofBaseVideo(ofBaseUpdates):
    __swig_setmethods__ = {}
    for _s in [ofBaseUpdates]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseVideo, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseUpdates]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseVideo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseVideo
    __del__ = lambda self : None;
    def isFrameNew(self): return _of.ofBaseVideo_isFrameNew(self)
    def close(self): return _of.ofBaseVideo_close(self)
ofBaseVideo_swigregister = _of.ofBaseVideo_swigregister
ofBaseVideo_swigregister(ofBaseVideo)

class ofBaseVideoDraws(ofBaseVideo):
    __swig_setmethods__ = {}
    for _s in [ofBaseVideo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseVideoDraws, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseVideo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseVideoDraws, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseVideoDraws
    __del__ = lambda self : None;
ofBaseVideoDraws_swigregister = _of.ofBaseVideoDraws_swigregister
ofBaseVideoDraws_swigregister(ofBaseVideoDraws)

class ofBaseVideoGrabber(ofBaseVideo):
    __swig_setmethods__ = {}
    for _s in [ofBaseVideo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseVideoGrabber, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseVideo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseVideoGrabber, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseVideoGrabber
    __del__ = lambda self : None;
    def listDevices(self): return _of.ofBaseVideoGrabber_listDevices(self)
    def initGrabber(self, *args): return _of.ofBaseVideoGrabber_initGrabber(self, *args)
    def update(self): return _of.ofBaseVideoGrabber_update(self)
    def isFrameNew(self): return _of.ofBaseVideoGrabber_isFrameNew(self)
    def getPixels(self): return _of.ofBaseVideoGrabber_getPixels(self)
    def close(self): return _of.ofBaseVideoGrabber_close(self)
    def getHeight(self): return _of.ofBaseVideoGrabber_getHeight(self)
    def getWidth(self): return _of.ofBaseVideoGrabber_getWidth(self)
    def setPixelFormat(self, *args): return _of.ofBaseVideoGrabber_setPixelFormat(self, *args)
    def getPixelFormat(self): return _of.ofBaseVideoGrabber_getPixelFormat(self)
    def setVerbose(self, *args): return _of.ofBaseVideoGrabber_setVerbose(self, *args)
    def setDeviceID(self, *args): return _of.ofBaseVideoGrabber_setDeviceID(self, *args)
    def setDesiredFrameRate(self, *args): return _of.ofBaseVideoGrabber_setDesiredFrameRate(self, *args)
    def videoSettings(self): return _of.ofBaseVideoGrabber_videoSettings(self)
ofBaseVideoGrabber_swigregister = _of.ofBaseVideoGrabber_swigregister
ofBaseVideoGrabber_swigregister(ofBaseVideoGrabber)

class ofBaseVideoPlayer(ofBaseVideo):
    __swig_setmethods__ = {}
    for _s in [ofBaseVideo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseVideoPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseVideo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseVideoPlayer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseVideoPlayer
    __del__ = lambda self : None;
    def loadMovie(self, *args): return _of.ofBaseVideoPlayer_loadMovie(self, *args)
    def close(self): return _of.ofBaseVideoPlayer_close(self)
    def update(self): return _of.ofBaseVideoPlayer_update(self)
    def play(self): return _of.ofBaseVideoPlayer_play(self)
    def stop(self): return _of.ofBaseVideoPlayer_stop(self)
    def isFrameNew(self): return _of.ofBaseVideoPlayer_isFrameNew(self)
    def getPixels(self): return _of.ofBaseVideoPlayer_getPixels(self)
    def getTexture(self): return _of.ofBaseVideoPlayer_getTexture(self)
    def getWidth(self): return _of.ofBaseVideoPlayer_getWidth(self)
    def getHeight(self): return _of.ofBaseVideoPlayer_getHeight(self)
    def isPaused(self): return _of.ofBaseVideoPlayer_isPaused(self)
    def isLoaded(self): return _of.ofBaseVideoPlayer_isLoaded(self)
    def isPlaying(self): return _of.ofBaseVideoPlayer_isPlaying(self)
    def setPixelFormat(self, *args): return _of.ofBaseVideoPlayer_setPixelFormat(self, *args)
    def getPixelFormat(self): return _of.ofBaseVideoPlayer_getPixelFormat(self)
    def getPosition(self): return _of.ofBaseVideoPlayer_getPosition(self)
    def getSpeed(self): return _of.ofBaseVideoPlayer_getSpeed(self)
    def getDuration(self): return _of.ofBaseVideoPlayer_getDuration(self)
    def getIsMovieDone(self): return _of.ofBaseVideoPlayer_getIsMovieDone(self)
    def setPaused(self, *args): return _of.ofBaseVideoPlayer_setPaused(self, *args)
    def setPosition(self, *args): return _of.ofBaseVideoPlayer_setPosition(self, *args)
    def setVolume(self, *args): return _of.ofBaseVideoPlayer_setVolume(self, *args)
    def setLoopState(self, *args): return _of.ofBaseVideoPlayer_setLoopState(self, *args)
    def setSpeed(self, *args): return _of.ofBaseVideoPlayer_setSpeed(self, *args)
    def setFrame(self, *args): return _of.ofBaseVideoPlayer_setFrame(self, *args)
    def getCurrentFrame(self): return _of.ofBaseVideoPlayer_getCurrentFrame(self)
    def getTotalNumFrames(self): return _of.ofBaseVideoPlayer_getTotalNumFrames(self)
    def getLoopState(self): return _of.ofBaseVideoPlayer_getLoopState(self)
    def firstFrame(self): return _of.ofBaseVideoPlayer_firstFrame(self)
    def nextFrame(self): return _of.ofBaseVideoPlayer_nextFrame(self)
    def previousFrame(self): return _of.ofBaseVideoPlayer_previousFrame(self)
ofBaseVideoPlayer_swigregister = _of.ofBaseVideoPlayer_swigregister
ofBaseVideoPlayer_swigregister(ofBaseVideoPlayer)

class ofBaseRenderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseRenderer
    __del__ = lambda self : None;
    def getType(self): return _of.ofBaseRenderer_getType(self)
    def update(self): return _of.ofBaseRenderer_update(self)
    def draw(self, *args): return _of.ofBaseRenderer_draw(self, *args)
    def pushView(self): return _of.ofBaseRenderer_pushView(self)
    def popView(self): return _of.ofBaseRenderer_popView(self)
    def viewport(self, *args): return _of.ofBaseRenderer_viewport(self, *args)
    def setupScreenPerspective(self, *args): return _of.ofBaseRenderer_setupScreenPerspective(self, *args)
    def setupScreenOrtho(self, *args): return _of.ofBaseRenderer_setupScreenOrtho(self, *args)
    def getCurrentViewport(self): return _of.ofBaseRenderer_getCurrentViewport(self)
    def getViewportWidth(self): return _of.ofBaseRenderer_getViewportWidth(self)
    def getViewportHeight(self): return _of.ofBaseRenderer_getViewportHeight(self)
    def setCoordHandedness(self, *args): return _of.ofBaseRenderer_setCoordHandedness(self, *args)
    def getCoordHandedness(self): return _of.ofBaseRenderer_getCoordHandedness(self)
    def pushMatrix(self): return _of.ofBaseRenderer_pushMatrix(self)
    def popMatrix(self): return _of.ofBaseRenderer_popMatrix(self)
    def translate(self, *args): return _of.ofBaseRenderer_translate(self, *args)
    def scale(self, *args): return _of.ofBaseRenderer_scale(self, *args)
    def rotateX(self, *args): return _of.ofBaseRenderer_rotateX(self, *args)
    def rotateY(self, *args): return _of.ofBaseRenderer_rotateY(self, *args)
    def rotateZ(self, *args): return _of.ofBaseRenderer_rotateZ(self, *args)
    def rotate(self, *args): return _of.ofBaseRenderer_rotate(self, *args)
    def matrixMode(self, *args): return _of.ofBaseRenderer_matrixMode(self, *args)
    def loadIdentityMatrix(self): return _of.ofBaseRenderer_loadIdentityMatrix(self)
    def loadMatrix(self, *args): return _of.ofBaseRenderer_loadMatrix(self, *args)
    def multMatrix(self, *args): return _of.ofBaseRenderer_multMatrix(self, *args)
    def setupGraphicDefaults(self): return _of.ofBaseRenderer_setupGraphicDefaults(self)
    def setupScreen(self): return _of.ofBaseRenderer_setupScreen(self)
    def setRectMode(self, *args): return _of.ofBaseRenderer_setRectMode(self, *args)
    def getRectMode(self): return _of.ofBaseRenderer_getRectMode(self)
    def setFillMode(self, *args): return _of.ofBaseRenderer_setFillMode(self, *args)
    def getFillMode(self): return _of.ofBaseRenderer_getFillMode(self)
    def setLineWidth(self, *args): return _of.ofBaseRenderer_setLineWidth(self, *args)
    def setBlendMode(self, *args): return _of.ofBaseRenderer_setBlendMode(self, *args)
    def setLineSmoothing(self, *args): return _of.ofBaseRenderer_setLineSmoothing(self, *args)
    def setCircleResolution(self, *args): return _of.ofBaseRenderer_setCircleResolution(self, *args)
    def setSphereResolution(self, *args): return _of.ofBaseRenderer_setSphereResolution(self, *args)
    def enablePointSprites(self): return _of.ofBaseRenderer_enablePointSprites(self)
    def disablePointSprites(self): return _of.ofBaseRenderer_disablePointSprites(self)
    def setColor(self, *args): return _of.ofBaseRenderer_setColor(self, *args)
    def setHexColor(self, *args): return _of.ofBaseRenderer_setHexColor(self, *args)
    def getBgColor(self): return _of.ofBaseRenderer_getBgColor(self)
    def bClearBg(self): return _of.ofBaseRenderer_bClearBg(self)
    def background(self, *args): return _of.ofBaseRenderer_background(self, *args)
    def setBackgroundAuto(self, *args): return _of.ofBaseRenderer_setBackgroundAuto(self, *args)
    def clear(self, *args): return _of.ofBaseRenderer_clear(self, *args)
    def clearAlpha(self): return _of.ofBaseRenderer_clearAlpha(self)
    def drawLine(self, *args): return _of.ofBaseRenderer_drawLine(self, *args)
    def drawRectangle(self, *args): return _of.ofBaseRenderer_drawRectangle(self, *args)
    def drawTriangle(self, *args): return _of.ofBaseRenderer_drawTriangle(self, *args)
    def drawCircle(self, *args): return _of.ofBaseRenderer_drawCircle(self, *args)
    def drawSphere(self, *args): return _of.ofBaseRenderer_drawSphere(self, *args)
    def drawEllipse(self, *args): return _of.ofBaseRenderer_drawEllipse(self, *args)
    def drawString(self, *args): return _of.ofBaseRenderer_drawString(self, *args)
    def rendersPathPrimitives(self): return _of.ofBaseRenderer_rendersPathPrimitives(self)
ofBaseRenderer_swigregister = _of.ofBaseRenderer_swigregister
ofBaseRenderer_swigregister(ofBaseRenderer)

class ofBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofBuffer
    __del__ = lambda self : None;
    def set(self, *args): return _of.ofBuffer_set(self, *args)
    def append(self, *args): return _of.ofBuffer_append(self, *args)
    def writeTo(self, *args): return _of.ofBuffer_writeTo(self, *args)
    def clear(self): return _of.ofBuffer_clear(self)
    def allocate(self, *args): return _of.ofBuffer_allocate(self, *args)
    def getBinaryBuffer(self, *args): return _of.ofBuffer_getBinaryBuffer(self, *args)
    def getText(self): return _of.ofBuffer_getText(self)
    def size(self): return _of.ofBuffer_size(self)
    def getNextLine(self): return _of.ofBuffer_getNextLine(self)
    def getFirstLine(self): return _of.ofBuffer_getFirstLine(self)
    def isLastLine(self): return _of.ofBuffer_isLastLine(self)
    def resetLineReader(self): return _of.ofBuffer_resetLineReader(self)
ofBuffer_swigregister = _of.ofBuffer_swigregister
ofBuffer_swigregister(ofBuffer)


def ofBufferFromFile(*args):
  return _of.ofBufferFromFile(*args)
ofBufferFromFile = _of.ofBufferFromFile

def ofBufferToFile(*args):
  return _of.ofBufferToFile(*args)
ofBufferToFile = _of.ofBufferToFile
class ofFilePath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFilePath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFilePath, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getFileExt"] = lambda x: _of.ofFilePath_getFileExt
    if _newclass:getFileExt = staticmethod(_of.ofFilePath_getFileExt)
    __swig_getmethods__["removeExt"] = lambda x: _of.ofFilePath_removeExt
    if _newclass:removeExt = staticmethod(_of.ofFilePath_removeExt)
    __swig_getmethods__["addLeadingSlash"] = lambda x: _of.ofFilePath_addLeadingSlash
    if _newclass:addLeadingSlash = staticmethod(_of.ofFilePath_addLeadingSlash)
    __swig_getmethods__["addTrailingSlash"] = lambda x: _of.ofFilePath_addTrailingSlash
    if _newclass:addTrailingSlash = staticmethod(_of.ofFilePath_addTrailingSlash)
    __swig_getmethods__["removeTrailingSlash"] = lambda x: _of.ofFilePath_removeTrailingSlash
    if _newclass:removeTrailingSlash = staticmethod(_of.ofFilePath_removeTrailingSlash)
    __swig_getmethods__["getPathForDirectory"] = lambda x: _of.ofFilePath_getPathForDirectory
    if _newclass:getPathForDirectory = staticmethod(_of.ofFilePath_getPathForDirectory)
    __swig_getmethods__["getAbsolutePath"] = lambda x: _of.ofFilePath_getAbsolutePath
    if _newclass:getAbsolutePath = staticmethod(_of.ofFilePath_getAbsolutePath)
    __swig_getmethods__["isAbsolute"] = lambda x: _of.ofFilePath_isAbsolute
    if _newclass:isAbsolute = staticmethod(_of.ofFilePath_isAbsolute)
    __swig_getmethods__["getFileName"] = lambda x: _of.ofFilePath_getFileName
    if _newclass:getFileName = staticmethod(_of.ofFilePath_getFileName)
    __swig_getmethods__["getBaseName"] = lambda x: _of.ofFilePath_getBaseName
    if _newclass:getBaseName = staticmethod(_of.ofFilePath_getBaseName)
    __swig_getmethods__["getEnclosingDirectory"] = lambda x: _of.ofFilePath_getEnclosingDirectory
    if _newclass:getEnclosingDirectory = staticmethod(_of.ofFilePath_getEnclosingDirectory)
    __swig_getmethods__["getCurrentWorkingDirectory"] = lambda x: _of.ofFilePath_getCurrentWorkingDirectory
    if _newclass:getCurrentWorkingDirectory = staticmethod(_of.ofFilePath_getCurrentWorkingDirectory)
    __swig_getmethods__["join"] = lambda x: _of.ofFilePath_join
    if _newclass:join = staticmethod(_of.ofFilePath_join)
    __swig_getmethods__["getCurrentExePath"] = lambda x: _of.ofFilePath_getCurrentExePath
    if _newclass:getCurrentExePath = staticmethod(_of.ofFilePath_getCurrentExePath)
    __swig_getmethods__["getCurrentExeDir"] = lambda x: _of.ofFilePath_getCurrentExeDir
    if _newclass:getCurrentExeDir = staticmethod(_of.ofFilePath_getCurrentExeDir)
    __swig_getmethods__["getUserHomeDir"] = lambda x: _of.ofFilePath_getUserHomeDir
    if _newclass:getUserHomeDir = staticmethod(_of.ofFilePath_getUserHomeDir)
    def __init__(self): 
        this = _of.new_ofFilePath()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofFilePath
    __del__ = lambda self : None;
ofFilePath_swigregister = _of.ofFilePath_swigregister
ofFilePath_swigregister(ofFilePath)

def ofFilePath_getFileExt(*args):
  return _of.ofFilePath_getFileExt(*args)
ofFilePath_getFileExt = _of.ofFilePath_getFileExt

def ofFilePath_removeExt(*args):
  return _of.ofFilePath_removeExt(*args)
ofFilePath_removeExt = _of.ofFilePath_removeExt

def ofFilePath_addLeadingSlash(*args):
  return _of.ofFilePath_addLeadingSlash(*args)
ofFilePath_addLeadingSlash = _of.ofFilePath_addLeadingSlash

def ofFilePath_addTrailingSlash(*args):
  return _of.ofFilePath_addTrailingSlash(*args)
ofFilePath_addTrailingSlash = _of.ofFilePath_addTrailingSlash

def ofFilePath_removeTrailingSlash(*args):
  return _of.ofFilePath_removeTrailingSlash(*args)
ofFilePath_removeTrailingSlash = _of.ofFilePath_removeTrailingSlash

def ofFilePath_getPathForDirectory(*args):
  return _of.ofFilePath_getPathForDirectory(*args)
ofFilePath_getPathForDirectory = _of.ofFilePath_getPathForDirectory

def ofFilePath_getAbsolutePath(*args):
  return _of.ofFilePath_getAbsolutePath(*args)
ofFilePath_getAbsolutePath = _of.ofFilePath_getAbsolutePath

def ofFilePath_isAbsolute(*args):
  return _of.ofFilePath_isAbsolute(*args)
ofFilePath_isAbsolute = _of.ofFilePath_isAbsolute

def ofFilePath_getFileName(*args):
  return _of.ofFilePath_getFileName(*args)
ofFilePath_getFileName = _of.ofFilePath_getFileName

def ofFilePath_getBaseName(*args):
  return _of.ofFilePath_getBaseName(*args)
ofFilePath_getBaseName = _of.ofFilePath_getBaseName

def ofFilePath_getEnclosingDirectory(*args):
  return _of.ofFilePath_getEnclosingDirectory(*args)
ofFilePath_getEnclosingDirectory = _of.ofFilePath_getEnclosingDirectory

def ofFilePath_getCurrentWorkingDirectory():
  return _of.ofFilePath_getCurrentWorkingDirectory()
ofFilePath_getCurrentWorkingDirectory = _of.ofFilePath_getCurrentWorkingDirectory

def ofFilePath_join(*args):
  return _of.ofFilePath_join(*args)
ofFilePath_join = _of.ofFilePath_join

def ofFilePath_getCurrentExePath():
  return _of.ofFilePath_getCurrentExePath()
ofFilePath_getCurrentExePath = _of.ofFilePath_getCurrentExePath

def ofFilePath_getCurrentExeDir():
  return _of.ofFilePath_getCurrentExeDir()
ofFilePath_getCurrentExeDir = _of.ofFilePath_getCurrentExeDir

def ofFilePath_getUserHomeDir():
  return _of.ofFilePath_getUserHomeDir()
ofFilePath_getUserHomeDir = _of.ofFilePath_getUserHomeDir

class ofFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFile, name)
    __repr__ = _swig_repr
    Reference = _of.ofFile_Reference
    ReadOnly = _of.ofFile_ReadOnly
    WriteOnly = _of.ofFile_WriteOnly
    ReadWrite = _of.ofFile_ReadWrite
    Append = _of.ofFile_Append
    def __init__(self, *args): 
        this = _of.new_ofFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofFile
    __del__ = lambda self : None;
    def open(self, *args): return _of.ofFile_open(self, *args)
    def changeMode(self, *args): return _of.ofFile_changeMode(self, *args)
    def close(self): return _of.ofFile_close(self)
    def create(self): return _of.ofFile_create(self)
    def exists(self): return _of.ofFile_exists(self)
    def path(self): return _of.ofFile_path(self)
    def getExtension(self): return _of.ofFile_getExtension(self)
    def getFileName(self): return _of.ofFile_getFileName(self)
    def getBaseName(self): return _of.ofFile_getBaseName(self)
    def getEnclosingDirectory(self): return _of.ofFile_getEnclosingDirectory(self)
    def getAbsolutePath(self): return _of.ofFile_getAbsolutePath(self)
    def canRead(self): return _of.ofFile_canRead(self)
    def canWrite(self): return _of.ofFile_canWrite(self)
    def canExecute(self): return _of.ofFile_canExecute(self)
    def isFile(self): return _of.ofFile_isFile(self)
    def isLink(self): return _of.ofFile_isLink(self)
    def isDirectory(self): return _of.ofFile_isDirectory(self)
    def isDevice(self): return _of.ofFile_isDevice(self)
    def isHidden(self): return _of.ofFile_isHidden(self)
    def setWriteable(self, *args): return _of.ofFile_setWriteable(self, *args)
    def setReadOnly(self, *args): return _of.ofFile_setReadOnly(self, *args)
    def setExecutable(self, *args): return _of.ofFile_setExecutable(self, *args)
    def copyTo(self, *args): return _of.ofFile_copyTo(self, *args)
    def moveTo(self, *args): return _of.ofFile_moveTo(self, *args)
    def renameTo(self, *args): return _of.ofFile_renameTo(self, *args)
    def remove(self, recursive=False): return _of.ofFile_remove(self, recursive)
    def getSize(self): return _of.ofFile_getSize(self)
    def getPocoFile(self): return _of.ofFile_getPocoFile(self)
    def __eq__(self, *args): return _of.ofFile___eq__(self, *args)
    def __ne__(self, *args): return _of.ofFile___ne__(self, *args)
    def __lt__(self, *args): return _of.ofFile___lt__(self, *args)
    def __le__(self, *args): return _of.ofFile___le__(self, *args)
    def __gt__(self, *args): return _of.ofFile___gt__(self, *args)
    def __ge__(self, *args): return _of.ofFile___ge__(self, *args)
    def readToBuffer(self): return _of.ofFile_readToBuffer(self)
    def writeFromBuffer(self, *args): return _of.ofFile_writeFromBuffer(self, *args)
    def getFileBuffer(self): return _of.ofFile_getFileBuffer(self)
    __swig_getmethods__["copyFromTo"] = lambda x: _of.ofFile_copyFromTo
    if _newclass:copyFromTo = staticmethod(_of.ofFile_copyFromTo)
    __swig_getmethods__["moveFromTo"] = lambda x: _of.ofFile_moveFromTo
    if _newclass:moveFromTo = staticmethod(_of.ofFile_moveFromTo)
    __swig_getmethods__["doesFileExist"] = lambda x: _of.ofFile_doesFileExist
    if _newclass:doesFileExist = staticmethod(_of.ofFile_doesFileExist)
    __swig_getmethods__["removeFile"] = lambda x: _of.ofFile_removeFile
    if _newclass:removeFile = staticmethod(_of.ofFile_removeFile)
ofFile_swigregister = _of.ofFile_swigregister
ofFile_swigregister(ofFile)

def ofFile_copyFromTo(*args):
  return _of.ofFile_copyFromTo(*args)
ofFile_copyFromTo = _of.ofFile_copyFromTo

def ofFile_moveFromTo(*args):
  return _of.ofFile_moveFromTo(*args)
ofFile_moveFromTo = _of.ofFile_moveFromTo

def ofFile_doesFileExist(*args):
  return _of.ofFile_doesFileExist(*args)
ofFile_doesFileExist = _of.ofFile_doesFileExist

def ofFile_removeFile(*args):
  return _of.ofFile_removeFile(*args)
ofFile_removeFile = _of.ofFile_removeFile

class ofDirectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofDirectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofDirectory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofDirectory(*args)
        try: self.this.append(this)
        except: self.this = this
    def open(self, *args): return _of.ofDirectory_open(self, *args)
    def close(self): return _of.ofDirectory_close(self)
    def create(self, recursive=False): return _of.ofDirectory_create(self, recursive)
    def exists(self): return _of.ofDirectory_exists(self)
    def path(self): return _of.ofDirectory_path(self)
    def getAbsolutePath(self): return _of.ofDirectory_getAbsolutePath(self)
    def isDirectory(self): return _of.ofDirectory_isDirectory(self)
    def isHidden(self): return _of.ofDirectory_isHidden(self)
    def setWriteable(self, *args): return _of.ofDirectory_setWriteable(self, *args)
    def setReadOnly(self, *args): return _of.ofDirectory_setReadOnly(self, *args)
    def setExecutable(self, *args): return _of.ofDirectory_setExecutable(self, *args)
    def setShowHidden(self, *args): return _of.ofDirectory_setShowHidden(self, *args)
    def copyTo(self, *args): return _of.ofDirectory_copyTo(self, *args)
    def moveTo(self, *args): return _of.ofDirectory_moveTo(self, *args)
    def renameTo(self, *args): return _of.ofDirectory_renameTo(self, *args)
    def remove(self, *args): return _of.ofDirectory_remove(self, *args)
    def allowExt(self, *args): return _of.ofDirectory_allowExt(self, *args)
    def listDir(self, *args): return _of.ofDirectory_listDir(self, *args)
    def getOriginalDirectory(self): return _of.ofDirectory_getOriginalDirectory(self)
    def getName(self, *args): return _of.ofDirectory_getName(self, *args)
    def getPath(self, *args): return _of.ofDirectory_getPath(self, *args)
    def getFile(self, *args): return _of.ofDirectory_getFile(self, *args)
    def getFiles(self): return _of.ofDirectory_getFiles(self)
    def getShowHidden(self): return _of.ofDirectory_getShowHidden(self)
    def reset(self): return _of.ofDirectory_reset(self)
    def sort(self): return _of.ofDirectory_sort(self)
    def size(self): return _of.ofDirectory_size(self)
    def numFiles(self): return _of.ofDirectory_numFiles(self)
    def getPocoFile(self): return _of.ofDirectory_getPocoFile(self)
    def __eq__(self, *args): return _of.ofDirectory___eq__(self, *args)
    def __ne__(self, *args): return _of.ofDirectory___ne__(self, *args)
    def __lt__(self, *args): return _of.ofDirectory___lt__(self, *args)
    def __le__(self, *args): return _of.ofDirectory___le__(self, *args)
    def __gt__(self, *args): return _of.ofDirectory___gt__(self, *args)
    def __ge__(self, *args): return _of.ofDirectory___ge__(self, *args)
    __swig_getmethods__["createDirectory"] = lambda x: _of.ofDirectory_createDirectory
    if _newclass:createDirectory = staticmethod(_of.ofDirectory_createDirectory)
    __swig_getmethods__["isDirectoryEmpty"] = lambda x: _of.ofDirectory_isDirectoryEmpty
    if _newclass:isDirectoryEmpty = staticmethod(_of.ofDirectory_isDirectoryEmpty)
    __swig_getmethods__["doesDirectoryExist"] = lambda x: _of.ofDirectory_doesDirectoryExist
    if _newclass:doesDirectoryExist = staticmethod(_of.ofDirectory_doesDirectoryExist)
    __swig_getmethods__["removeDirectory"] = lambda x: _of.ofDirectory_removeDirectory
    if _newclass:removeDirectory = staticmethod(_of.ofDirectory_removeDirectory)
    __swig_destroy__ = _of.delete_ofDirectory
    __del__ = lambda self : None;
ofDirectory_swigregister = _of.ofDirectory_swigregister
ofDirectory_swigregister(ofDirectory)

def ofDirectory_createDirectory(*args):
  return _of.ofDirectory_createDirectory(*args)
ofDirectory_createDirectory = _of.ofDirectory_createDirectory

def ofDirectory_isDirectoryEmpty(*args):
  return _of.ofDirectory_isDirectoryEmpty(*args)
ofDirectory_isDirectoryEmpty = _of.ofDirectory_isDirectoryEmpty

def ofDirectory_doesDirectoryExist(*args):
  return _of.ofDirectory_doesDirectoryExist(*args)
ofDirectory_doesDirectoryExist = _of.ofDirectory_doesDirectoryExist

def ofDirectory_removeDirectory(*args):
  return _of.ofDirectory_removeDirectory(*args)
ofDirectory_removeDirectory = _of.ofDirectory_removeDirectory

class ofRectangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofRectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofRectangle, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofRectangle
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _of.new_ofRectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _of.ofRectangle_set(self, *args)
    def setX(self, *args): return _of.ofRectangle_setX(self, *args)
    def setY(self, *args): return _of.ofRectangle_setY(self, *args)
    def setWidth(self, *args): return _of.ofRectangle_setWidth(self, *args)
    def setHeight(self, *args): return _of.ofRectangle_setHeight(self, *args)
    def setPosition(self, *args): return _of.ofRectangle_setPosition(self, *args)
    def setFromCenter(self, *args): return _of.ofRectangle_setFromCenter(self, *args)
    def translate(self, *args): return _of.ofRectangle_translate(self, *args)
    def translateX(self, *args): return _of.ofRectangle_translateX(self, *args)
    def translateY(self, *args): return _of.ofRectangle_translateY(self, *args)
    def scale(self, *args): return _of.ofRectangle_scale(self, *args)
    def scaleWidth(self, *args): return _of.ofRectangle_scaleWidth(self, *args)
    def scaleHeight(self, *args): return _of.ofRectangle_scaleHeight(self, *args)
    def scaleFromCenter(self, *args): return _of.ofRectangle_scaleFromCenter(self, *args)
    def scaleTo(self, *args): return _of.ofRectangle_scaleTo(self, *args)
    def alignToHorz(self, *args): return _of.ofRectangle_alignToHorz(self, *args)
    def alignToVert(self, *args): return _of.ofRectangle_alignToVert(self, *args)
    def alignTo(self, *args): return _of.ofRectangle_alignTo(self, *args)
    def inside(self, *args): return _of.ofRectangle_inside(self, *args)
    def intersects(self, *args): return _of.ofRectangle_intersects(self, *args)
    def growToInclude(self, *args): return _of.ofRectangle_growToInclude(self, *args)
    def getIntersection(self, *args): return _of.ofRectangle_getIntersection(self, *args)
    def getUnion(self, *args): return _of.ofRectangle_getUnion(self, *args)
    def standardize(self): return _of.ofRectangle_standardize(self)
    def getStandardized(self): return _of.ofRectangle_getStandardized(self)
    def isStandardized(self): return _of.ofRectangle_isStandardized(self)
    def getArea(self): return _of.ofRectangle_getArea(self)
    def getPerimeter(self): return _of.ofRectangle_getPerimeter(self)
    def getAspectRatio(self): return _of.ofRectangle_getAspectRatio(self)
    def isEmpty(self): return _of.ofRectangle_isEmpty(self)
    def getMin(self): return _of.ofRectangle_getMin(self)
    def getMax(self): return _of.ofRectangle_getMax(self)
    def getMinX(self): return _of.ofRectangle_getMinX(self)
    def getMaxX(self): return _of.ofRectangle_getMaxX(self)
    def getMinY(self): return _of.ofRectangle_getMinY(self)
    def getMaxY(self): return _of.ofRectangle_getMaxY(self)
    def getLeft(self): return _of.ofRectangle_getLeft(self)
    def getRight(self): return _of.ofRectangle_getRight(self)
    def getTop(self): return _of.ofRectangle_getTop(self)
    def getBottom(self): return _of.ofRectangle_getBottom(self)
    def getTopLeft(self): return _of.ofRectangle_getTopLeft(self)
    def getTopRight(self): return _of.ofRectangle_getTopRight(self)
    def getBottomLeft(self): return _of.ofRectangle_getBottomLeft(self)
    def getBottomRight(self): return _of.ofRectangle_getBottomRight(self)
    def getHorzAnchor(self, *args): return _of.ofRectangle_getHorzAnchor(self, *args)
    def getVertAnchor(self, *args): return _of.ofRectangle_getVertAnchor(self, *args)
    def getPosition(self): return _of.ofRectangle_getPosition(self)
    def getPositionRef(self): return _of.ofRectangle_getPositionRef(self)
    def getCenter(self): return _of.ofRectangle_getCenter(self)
    def getX(self): return _of.ofRectangle_getX(self)
    def getY(self): return _of.ofRectangle_getY(self)
    def getWidth(self): return _of.ofRectangle_getWidth(self)
    def getHeight(self): return _of.ofRectangle_getHeight(self)
    def __add__(self, *args): return _of.ofRectangle___add__(self, *args)
    def __eq__(self, *args): return _of.ofRectangle___eq__(self, *args)
    def __ne__(self, *args): return _of.ofRectangle___ne__(self, *args)
    __swig_setmethods__["position"] = _of.ofRectangle_position_set
    __swig_getmethods__["position"] = _of.ofRectangle_position_get
    if _newclass:position = _swig_property(_of.ofRectangle_position_get, _of.ofRectangle_position_set)
    __swig_setmethods__["x"] = _of.ofRectangle_x_set
    __swig_getmethods__["x"] = _of.ofRectangle_x_get
    if _newclass:x = _swig_property(_of.ofRectangle_x_get, _of.ofRectangle_x_set)
    __swig_setmethods__["y"] = _of.ofRectangle_y_set
    __swig_getmethods__["y"] = _of.ofRectangle_y_get
    if _newclass:y = _swig_property(_of.ofRectangle_y_get, _of.ofRectangle_y_set)
    __swig_setmethods__["width"] = _of.ofRectangle_width_set
    __swig_getmethods__["width"] = _of.ofRectangle_width_get
    if _newclass:width = _swig_property(_of.ofRectangle_width_get, _of.ofRectangle_width_set)
    __swig_setmethods__["height"] = _of.ofRectangle_height_set
    __swig_getmethods__["height"] = _of.ofRectangle_height_get
    if _newclass:height = _swig_property(_of.ofRectangle_height_get, _of.ofRectangle_height_set)
ofRectangle_swigregister = _of.ofRectangle_swigregister
ofRectangle_swigregister(ofRectangle)

class ofSerialDeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSerialDeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSerialDeviceInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofSerialDeviceInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDevicePath(self): return _of.ofSerialDeviceInfo_getDevicePath(self)
    def getDeviceName(self): return _of.ofSerialDeviceInfo_getDeviceName(self)
    def getDeviceID(self): return _of.ofSerialDeviceInfo_getDeviceID(self)
    __swig_destroy__ = _of.delete_ofSerialDeviceInfo
    __del__ = lambda self : None;
ofSerialDeviceInfo_swigregister = _of.ofSerialDeviceInfo_swigregister
ofSerialDeviceInfo_swigregister(ofSerialDeviceInfo)

class ofStyle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofStyle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofStyle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofStyle
    __del__ = lambda self : None;
    __swig_setmethods__["color"] = _of.ofStyle_color_set
    __swig_getmethods__["color"] = _of.ofStyle_color_get
    if _newclass:color = _swig_property(_of.ofStyle_color_get, _of.ofStyle_color_set)
    __swig_setmethods__["bgColor"] = _of.ofStyle_bgColor_set
    __swig_getmethods__["bgColor"] = _of.ofStyle_bgColor_get
    if _newclass:bgColor = _swig_property(_of.ofStyle_bgColor_get, _of.ofStyle_bgColor_set)
    __swig_setmethods__["polyMode"] = _of.ofStyle_polyMode_set
    __swig_getmethods__["polyMode"] = _of.ofStyle_polyMode_get
    if _newclass:polyMode = _swig_property(_of.ofStyle_polyMode_get, _of.ofStyle_polyMode_set)
    __swig_setmethods__["rectMode"] = _of.ofStyle_rectMode_set
    __swig_getmethods__["rectMode"] = _of.ofStyle_rectMode_get
    if _newclass:rectMode = _swig_property(_of.ofStyle_rectMode_get, _of.ofStyle_rectMode_set)
    __swig_setmethods__["bFill"] = _of.ofStyle_bFill_set
    __swig_getmethods__["bFill"] = _of.ofStyle_bFill_get
    if _newclass:bFill = _swig_property(_of.ofStyle_bFill_get, _of.ofStyle_bFill_set)
    __swig_setmethods__["drawBitmapMode"] = _of.ofStyle_drawBitmapMode_set
    __swig_getmethods__["drawBitmapMode"] = _of.ofStyle_drawBitmapMode_get
    if _newclass:drawBitmapMode = _swig_property(_of.ofStyle_drawBitmapMode_get, _of.ofStyle_drawBitmapMode_set)
    __swig_setmethods__["blendingMode"] = _of.ofStyle_blendingMode_set
    __swig_getmethods__["blendingMode"] = _of.ofStyle_blendingMode_get
    if _newclass:blendingMode = _swig_property(_of.ofStyle_blendingMode_get, _of.ofStyle_blendingMode_set)
    __swig_setmethods__["smoothing"] = _of.ofStyle_smoothing_set
    __swig_getmethods__["smoothing"] = _of.ofStyle_smoothing_get
    if _newclass:smoothing = _swig_property(_of.ofStyle_smoothing_get, _of.ofStyle_smoothing_set)
    __swig_setmethods__["circleResolution"] = _of.ofStyle_circleResolution_set
    __swig_getmethods__["circleResolution"] = _of.ofStyle_circleResolution_get
    if _newclass:circleResolution = _swig_property(_of.ofStyle_circleResolution_get, _of.ofStyle_circleResolution_set)
    __swig_setmethods__["sphereResolution"] = _of.ofStyle_sphereResolution_set
    __swig_getmethods__["sphereResolution"] = _of.ofStyle_sphereResolution_get
    if _newclass:sphereResolution = _swig_property(_of.ofStyle_sphereResolution_get, _of.ofStyle_sphereResolution_set)
    __swig_setmethods__["curveResolution"] = _of.ofStyle_curveResolution_set
    __swig_getmethods__["curveResolution"] = _of.ofStyle_curveResolution_get
    if _newclass:curveResolution = _swig_property(_of.ofStyle_curveResolution_get, _of.ofStyle_curveResolution_set)
    __swig_setmethods__["lineWidth"] = _of.ofStyle_lineWidth_set
    __swig_getmethods__["lineWidth"] = _of.ofStyle_lineWidth_get
    if _newclass:lineWidth = _swig_property(_of.ofStyle_lineWidth_get, _of.ofStyle_lineWidth_set)
ofStyle_swigregister = _of.ofStyle_swigregister
ofStyle_swigregister(ofStyle)

class ofColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofColor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofColor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _of.new_ofColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["fromHsb"] = lambda x: _of.ofColor_fromHsb
    if _newclass:fromHsb = staticmethod(_of.ofColor_fromHsb)
    __swig_getmethods__["fromHex"] = lambda x: _of.ofColor_fromHex
    if _newclass:fromHex = staticmethod(_of.ofColor_fromHex)
    def set(self, *args): return _of.ofColor_set(self, *args)
    def setHex(self, *args): return _of.ofColor_setHex(self, *args)
    def getHex(self): return _of.ofColor_getHex(self)
    def clamp(self): return _of.ofColor_clamp(self)
    def invert(self): return _of.ofColor_invert(self)
    def normalize(self): return _of.ofColor_normalize(self)
    def lerp(self, *args): return _of.ofColor_lerp(self, *args)
    def getClamped(self): return _of.ofColor_getClamped(self)
    def getInverted(self): return _of.ofColor_getInverted(self)
    def getNormalized(self): return _of.ofColor_getNormalized(self)
    def getLerped(self, *args): return _of.ofColor_getLerped(self, *args)
    def getHue(self): return _of.ofColor_getHue(self)
    def getSaturation(self): return _of.ofColor_getSaturation(self)
    def getBrightness(self): return _of.ofColor_getBrightness(self)
    def getLightness(self): return _of.ofColor_getLightness(self)
    def getHsb(self, *args): return _of.ofColor_getHsb(self, *args)
    def setHue(self, *args): return _of.ofColor_setHue(self, *args)
    def setSaturation(self, *args): return _of.ofColor_setSaturation(self, *args)
    def setBrightness(self, *args): return _of.ofColor_setBrightness(self, *args)
    def setHsb(self, *args): return _of.ofColor_setHsb(self, *args)
    def __eq__(self, *args): return _of.ofColor___eq__(self, *args)
    def __ne__(self, *args): return _of.ofColor___ne__(self, *args)
    def __add__(self, *args): return _of.ofColor___add__(self, *args)
    def __iadd__(self, *args): return _of.ofColor___iadd__(self, *args)
    def __sub__(self, *args): return _of.ofColor___sub__(self, *args)
    def __isub__(self, *args): return _of.ofColor___isub__(self, *args)
    def __mul__(self, *args): return _of.ofColor___mul__(self, *args)
    def __imul__(self, *args): return _of.ofColor___imul__(self, *args)
    def __div__(self, *args): return _of.ofColor___div__(self, *args)
    def __idiv__(self, *args): return _of.ofColor___idiv__(self, *args)
    __swig_getmethods__["limit"] = lambda x: _of.ofColor_limit
    if _newclass:limit = staticmethod(_of.ofColor_limit)
ofColor_swigregister = _of.ofColor_swigregister
ofColor_swigregister(ofColor)

def ofColor_fromHsb(*args):
  return _of.ofColor_fromHsb(*args)
ofColor_fromHsb = _of.ofColor_fromHsb

def ofColor_fromHex(*args):
  return _of.ofColor_fromHex(*args)
ofColor_fromHex = _of.ofColor_fromHex
cvar = _of.cvar
ofColor.white = _of.cvar.ofColor_white
ofColor.gray = _of.cvar.ofColor_gray
ofColor.black = _of.cvar.ofColor_black
ofColor.red = _of.cvar.ofColor_red
ofColor.green = _of.cvar.ofColor_green
ofColor.blue = _of.cvar.ofColor_blue
ofColor.cyan = _of.cvar.ofColor_cyan
ofColor.magenta = _of.cvar.ofColor_magenta
ofColor.yellow = _of.cvar.ofColor_yellow
ofColor.aliceBlue = _of.cvar.ofColor_aliceBlue
ofColor.antiqueWhite = _of.cvar.ofColor_antiqueWhite
ofColor.aqua = _of.cvar.ofColor_aqua
ofColor.aquamarine = _of.cvar.ofColor_aquamarine
ofColor.azure = _of.cvar.ofColor_azure
ofColor.beige = _of.cvar.ofColor_beige
ofColor.bisque = _of.cvar.ofColor_bisque
ofColor.blanchedAlmond = _of.cvar.ofColor_blanchedAlmond
ofColor.blueViolet = _of.cvar.ofColor_blueViolet
ofColor.brown = _of.cvar.ofColor_brown
ofColor.burlyWood = _of.cvar.ofColor_burlyWood
ofColor.cadetBlue = _of.cvar.ofColor_cadetBlue
ofColor.chartreuse = _of.cvar.ofColor_chartreuse
ofColor.chocolate = _of.cvar.ofColor_chocolate
ofColor.coral = _of.cvar.ofColor_coral
ofColor.cornflowerBlue = _of.cvar.ofColor_cornflowerBlue
ofColor.cornsilk = _of.cvar.ofColor_cornsilk
ofColor.crimson = _of.cvar.ofColor_crimson
ofColor.darkBlue = _of.cvar.ofColor_darkBlue
ofColor.darkCyan = _of.cvar.ofColor_darkCyan
ofColor.darkGoldenRod = _of.cvar.ofColor_darkGoldenRod
ofColor.darkGray = _of.cvar.ofColor_darkGray
ofColor.darkGrey = _of.cvar.ofColor_darkGrey
ofColor.darkGreen = _of.cvar.ofColor_darkGreen
ofColor.darkKhaki = _of.cvar.ofColor_darkKhaki
ofColor.darkMagenta = _of.cvar.ofColor_darkMagenta
ofColor.darkOliveGreen = _of.cvar.ofColor_darkOliveGreen
ofColor.darkorange = _of.cvar.ofColor_darkorange
ofColor.darkOrchid = _of.cvar.ofColor_darkOrchid
ofColor.darkRed = _of.cvar.ofColor_darkRed
ofColor.darkSalmon = _of.cvar.ofColor_darkSalmon
ofColor.darkSeaGreen = _of.cvar.ofColor_darkSeaGreen
ofColor.darkSlateBlue = _of.cvar.ofColor_darkSlateBlue
ofColor.darkSlateGray = _of.cvar.ofColor_darkSlateGray
ofColor.darkSlateGrey = _of.cvar.ofColor_darkSlateGrey
ofColor.darkTurquoise = _of.cvar.ofColor_darkTurquoise
ofColor.darkViolet = _of.cvar.ofColor_darkViolet
ofColor.deepPink = _of.cvar.ofColor_deepPink
ofColor.deepSkyBlue = _of.cvar.ofColor_deepSkyBlue
ofColor.dimGray = _of.cvar.ofColor_dimGray
ofColor.dimGrey = _of.cvar.ofColor_dimGrey
ofColor.dodgerBlue = _of.cvar.ofColor_dodgerBlue
ofColor.fireBrick = _of.cvar.ofColor_fireBrick
ofColor.floralWhite = _of.cvar.ofColor_floralWhite
ofColor.forestGreen = _of.cvar.ofColor_forestGreen
ofColor.fuchsia = _of.cvar.ofColor_fuchsia
ofColor.gainsboro = _of.cvar.ofColor_gainsboro
ofColor.ghostWhite = _of.cvar.ofColor_ghostWhite
ofColor.gold = _of.cvar.ofColor_gold
ofColor.goldenRod = _of.cvar.ofColor_goldenRod
ofColor.grey = _of.cvar.ofColor_grey
ofColor.greenYellow = _of.cvar.ofColor_greenYellow
ofColor.honeyDew = _of.cvar.ofColor_honeyDew
ofColor.hotPink = _of.cvar.ofColor_hotPink
ofColor.indianRed = _of.cvar.ofColor_indianRed
ofColor.indigo = _of.cvar.ofColor_indigo
ofColor.ivory = _of.cvar.ofColor_ivory
ofColor.khaki = _of.cvar.ofColor_khaki
ofColor.lavender = _of.cvar.ofColor_lavender
ofColor.lavenderBlush = _of.cvar.ofColor_lavenderBlush
ofColor.lawnGreen = _of.cvar.ofColor_lawnGreen
ofColor.lemonChiffon = _of.cvar.ofColor_lemonChiffon
ofColor.lightBlue = _of.cvar.ofColor_lightBlue
ofColor.lightCoral = _of.cvar.ofColor_lightCoral
ofColor.lightCyan = _of.cvar.ofColor_lightCyan
ofColor.lightGoldenRodYellow = _of.cvar.ofColor_lightGoldenRodYellow
ofColor.lightGray = _of.cvar.ofColor_lightGray
ofColor.lightGrey = _of.cvar.ofColor_lightGrey
ofColor.lightGreen = _of.cvar.ofColor_lightGreen
ofColor.lightPink = _of.cvar.ofColor_lightPink
ofColor.lightSalmon = _of.cvar.ofColor_lightSalmon
ofColor.lightSeaGreen = _of.cvar.ofColor_lightSeaGreen
ofColor.lightSkyBlue = _of.cvar.ofColor_lightSkyBlue
ofColor.lightSlateGray = _of.cvar.ofColor_lightSlateGray
ofColor.lightSlateGrey = _of.cvar.ofColor_lightSlateGrey
ofColor.lightSteelBlue = _of.cvar.ofColor_lightSteelBlue
ofColor.lightYellow = _of.cvar.ofColor_lightYellow
ofColor.lime = _of.cvar.ofColor_lime
ofColor.limeGreen = _of.cvar.ofColor_limeGreen
ofColor.linen = _of.cvar.ofColor_linen
ofColor.maroon = _of.cvar.ofColor_maroon
ofColor.mediumAquaMarine = _of.cvar.ofColor_mediumAquaMarine
ofColor.mediumBlue = _of.cvar.ofColor_mediumBlue
ofColor.mediumOrchid = _of.cvar.ofColor_mediumOrchid
ofColor.mediumPurple = _of.cvar.ofColor_mediumPurple
ofColor.mediumSeaGreen = _of.cvar.ofColor_mediumSeaGreen
ofColor.mediumSlateBlue = _of.cvar.ofColor_mediumSlateBlue
ofColor.mediumSpringGreen = _of.cvar.ofColor_mediumSpringGreen
ofColor.mediumTurquoise = _of.cvar.ofColor_mediumTurquoise
ofColor.mediumVioletRed = _of.cvar.ofColor_mediumVioletRed
ofColor.midnightBlue = _of.cvar.ofColor_midnightBlue
ofColor.mintCream = _of.cvar.ofColor_mintCream
ofColor.mistyRose = _of.cvar.ofColor_mistyRose
ofColor.moccasin = _of.cvar.ofColor_moccasin
ofColor.navajoWhite = _of.cvar.ofColor_navajoWhite
ofColor.navy = _of.cvar.ofColor_navy
ofColor.oldLace = _of.cvar.ofColor_oldLace
ofColor.olive = _of.cvar.ofColor_olive
ofColor.oliveDrab = _of.cvar.ofColor_oliveDrab
ofColor.orange = _of.cvar.ofColor_orange
ofColor.orangeRed = _of.cvar.ofColor_orangeRed
ofColor.orchid = _of.cvar.ofColor_orchid
ofColor.paleGoldenRod = _of.cvar.ofColor_paleGoldenRod
ofColor.paleGreen = _of.cvar.ofColor_paleGreen
ofColor.paleTurquoise = _of.cvar.ofColor_paleTurquoise
ofColor.paleVioletRed = _of.cvar.ofColor_paleVioletRed
ofColor.papayaWhip = _of.cvar.ofColor_papayaWhip
ofColor.peachPuff = _of.cvar.ofColor_peachPuff
ofColor.peru = _of.cvar.ofColor_peru
ofColor.pink = _of.cvar.ofColor_pink
ofColor.plum = _of.cvar.ofColor_plum
ofColor.powderBlue = _of.cvar.ofColor_powderBlue
ofColor.purple = _of.cvar.ofColor_purple
ofColor.rosyBrown = _of.cvar.ofColor_rosyBrown
ofColor.royalBlue = _of.cvar.ofColor_royalBlue
ofColor.saddleBrown = _of.cvar.ofColor_saddleBrown
ofColor.salmon = _of.cvar.ofColor_salmon
ofColor.sandyBrown = _of.cvar.ofColor_sandyBrown
ofColor.seaGreen = _of.cvar.ofColor_seaGreen
ofColor.seaShell = _of.cvar.ofColor_seaShell
ofColor.sienna = _of.cvar.ofColor_sienna
ofColor.silver = _of.cvar.ofColor_silver
ofColor.skyBlue = _of.cvar.ofColor_skyBlue
ofColor.slateBlue = _of.cvar.ofColor_slateBlue
ofColor.slateGray = _of.cvar.ofColor_slateGray
ofColor.slateGrey = _of.cvar.ofColor_slateGrey
ofColor.snow = _of.cvar.ofColor_snow
ofColor.springGreen = _of.cvar.ofColor_springGreen
ofColor.steelBlue = _of.cvar.ofColor_steelBlue
ofColor.tan = _of.cvar.ofColor_tan
ofColor.teal = _of.cvar.ofColor_teal
ofColor.thistle = _of.cvar.ofColor_thistle
ofColor.tomato = _of.cvar.ofColor_tomato
ofColor.turquoise = _of.cvar.ofColor_turquoise
ofColor.violet = _of.cvar.ofColor_violet
ofColor.wheat = _of.cvar.ofColor_wheat
ofColor.whiteSmoke = _of.cvar.ofColor_whiteSmoke
ofColor.yellowGreen = _of.cvar.ofColor_yellowGreen

def ofColor_limit():
  return _of.ofColor_limit()
ofColor_limit = _of.ofColor_limit

class ofFloatColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFloatColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFloatColor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofFloatColor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _of.new_ofFloatColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["fromHsb"] = lambda x: _of.ofFloatColor_fromHsb
    if _newclass:fromHsb = staticmethod(_of.ofFloatColor_fromHsb)
    __swig_getmethods__["fromHex"] = lambda x: _of.ofFloatColor_fromHex
    if _newclass:fromHex = staticmethod(_of.ofFloatColor_fromHex)
    def set(self, *args): return _of.ofFloatColor_set(self, *args)
    def setHex(self, *args): return _of.ofFloatColor_setHex(self, *args)
    def getHex(self): return _of.ofFloatColor_getHex(self)
    def clamp(self): return _of.ofFloatColor_clamp(self)
    def invert(self): return _of.ofFloatColor_invert(self)
    def normalize(self): return _of.ofFloatColor_normalize(self)
    def lerp(self, *args): return _of.ofFloatColor_lerp(self, *args)
    def getClamped(self): return _of.ofFloatColor_getClamped(self)
    def getInverted(self): return _of.ofFloatColor_getInverted(self)
    def getNormalized(self): return _of.ofFloatColor_getNormalized(self)
    def getLerped(self, *args): return _of.ofFloatColor_getLerped(self, *args)
    def getHue(self): return _of.ofFloatColor_getHue(self)
    def getSaturation(self): return _of.ofFloatColor_getSaturation(self)
    def getBrightness(self): return _of.ofFloatColor_getBrightness(self)
    def getLightness(self): return _of.ofFloatColor_getLightness(self)
    def getHsb(self, *args): return _of.ofFloatColor_getHsb(self, *args)
    def setHue(self, *args): return _of.ofFloatColor_setHue(self, *args)
    def setSaturation(self, *args): return _of.ofFloatColor_setSaturation(self, *args)
    def setBrightness(self, *args): return _of.ofFloatColor_setBrightness(self, *args)
    def setHsb(self, *args): return _of.ofFloatColor_setHsb(self, *args)
    def __eq__(self, *args): return _of.ofFloatColor___eq__(self, *args)
    def __ne__(self, *args): return _of.ofFloatColor___ne__(self, *args)
    def __add__(self, *args): return _of.ofFloatColor___add__(self, *args)
    def __iadd__(self, *args): return _of.ofFloatColor___iadd__(self, *args)
    def __sub__(self, *args): return _of.ofFloatColor___sub__(self, *args)
    def __isub__(self, *args): return _of.ofFloatColor___isub__(self, *args)
    def __mul__(self, *args): return _of.ofFloatColor___mul__(self, *args)
    def __imul__(self, *args): return _of.ofFloatColor___imul__(self, *args)
    def __div__(self, *args): return _of.ofFloatColor___div__(self, *args)
    def __idiv__(self, *args): return _of.ofFloatColor___idiv__(self, *args)
    __swig_getmethods__["limit"] = lambda x: _of.ofFloatColor_limit
    if _newclass:limit = staticmethod(_of.ofFloatColor_limit)
ofFloatColor_swigregister = _of.ofFloatColor_swigregister
ofFloatColor_swigregister(ofFloatColor)

def ofFloatColor_fromHsb(*args):
  return _of.ofFloatColor_fromHsb(*args)
ofFloatColor_fromHsb = _of.ofFloatColor_fromHsb

def ofFloatColor_fromHex(*args):
  return _of.ofFloatColor_fromHex(*args)
ofFloatColor_fromHex = _of.ofFloatColor_fromHex
ofFloatColor.white = _of.cvar.ofFloatColor_white
ofFloatColor.gray = _of.cvar.ofFloatColor_gray
ofFloatColor.black = _of.cvar.ofFloatColor_black
ofFloatColor.red = _of.cvar.ofFloatColor_red
ofFloatColor.green = _of.cvar.ofFloatColor_green
ofFloatColor.blue = _of.cvar.ofFloatColor_blue
ofFloatColor.cyan = _of.cvar.ofFloatColor_cyan
ofFloatColor.magenta = _of.cvar.ofFloatColor_magenta
ofFloatColor.yellow = _of.cvar.ofFloatColor_yellow
ofFloatColor.aliceBlue = _of.cvar.ofFloatColor_aliceBlue
ofFloatColor.antiqueWhite = _of.cvar.ofFloatColor_antiqueWhite
ofFloatColor.aqua = _of.cvar.ofFloatColor_aqua
ofFloatColor.aquamarine = _of.cvar.ofFloatColor_aquamarine
ofFloatColor.azure = _of.cvar.ofFloatColor_azure
ofFloatColor.beige = _of.cvar.ofFloatColor_beige
ofFloatColor.bisque = _of.cvar.ofFloatColor_bisque
ofFloatColor.blanchedAlmond = _of.cvar.ofFloatColor_blanchedAlmond
ofFloatColor.blueViolet = _of.cvar.ofFloatColor_blueViolet
ofFloatColor.brown = _of.cvar.ofFloatColor_brown
ofFloatColor.burlyWood = _of.cvar.ofFloatColor_burlyWood
ofFloatColor.cadetBlue = _of.cvar.ofFloatColor_cadetBlue
ofFloatColor.chartreuse = _of.cvar.ofFloatColor_chartreuse
ofFloatColor.chocolate = _of.cvar.ofFloatColor_chocolate
ofFloatColor.coral = _of.cvar.ofFloatColor_coral
ofFloatColor.cornflowerBlue = _of.cvar.ofFloatColor_cornflowerBlue
ofFloatColor.cornsilk = _of.cvar.ofFloatColor_cornsilk
ofFloatColor.crimson = _of.cvar.ofFloatColor_crimson
ofFloatColor.darkBlue = _of.cvar.ofFloatColor_darkBlue
ofFloatColor.darkCyan = _of.cvar.ofFloatColor_darkCyan
ofFloatColor.darkGoldenRod = _of.cvar.ofFloatColor_darkGoldenRod
ofFloatColor.darkGray = _of.cvar.ofFloatColor_darkGray
ofFloatColor.darkGrey = _of.cvar.ofFloatColor_darkGrey
ofFloatColor.darkGreen = _of.cvar.ofFloatColor_darkGreen
ofFloatColor.darkKhaki = _of.cvar.ofFloatColor_darkKhaki
ofFloatColor.darkMagenta = _of.cvar.ofFloatColor_darkMagenta
ofFloatColor.darkOliveGreen = _of.cvar.ofFloatColor_darkOliveGreen
ofFloatColor.darkorange = _of.cvar.ofFloatColor_darkorange
ofFloatColor.darkOrchid = _of.cvar.ofFloatColor_darkOrchid
ofFloatColor.darkRed = _of.cvar.ofFloatColor_darkRed
ofFloatColor.darkSalmon = _of.cvar.ofFloatColor_darkSalmon
ofFloatColor.darkSeaGreen = _of.cvar.ofFloatColor_darkSeaGreen
ofFloatColor.darkSlateBlue = _of.cvar.ofFloatColor_darkSlateBlue
ofFloatColor.darkSlateGray = _of.cvar.ofFloatColor_darkSlateGray
ofFloatColor.darkSlateGrey = _of.cvar.ofFloatColor_darkSlateGrey
ofFloatColor.darkTurquoise = _of.cvar.ofFloatColor_darkTurquoise
ofFloatColor.darkViolet = _of.cvar.ofFloatColor_darkViolet
ofFloatColor.deepPink = _of.cvar.ofFloatColor_deepPink
ofFloatColor.deepSkyBlue = _of.cvar.ofFloatColor_deepSkyBlue
ofFloatColor.dimGray = _of.cvar.ofFloatColor_dimGray
ofFloatColor.dimGrey = _of.cvar.ofFloatColor_dimGrey
ofFloatColor.dodgerBlue = _of.cvar.ofFloatColor_dodgerBlue
ofFloatColor.fireBrick = _of.cvar.ofFloatColor_fireBrick
ofFloatColor.floralWhite = _of.cvar.ofFloatColor_floralWhite
ofFloatColor.forestGreen = _of.cvar.ofFloatColor_forestGreen
ofFloatColor.fuchsia = _of.cvar.ofFloatColor_fuchsia
ofFloatColor.gainsboro = _of.cvar.ofFloatColor_gainsboro
ofFloatColor.ghostWhite = _of.cvar.ofFloatColor_ghostWhite
ofFloatColor.gold = _of.cvar.ofFloatColor_gold
ofFloatColor.goldenRod = _of.cvar.ofFloatColor_goldenRod
ofFloatColor.grey = _of.cvar.ofFloatColor_grey
ofFloatColor.greenYellow = _of.cvar.ofFloatColor_greenYellow
ofFloatColor.honeyDew = _of.cvar.ofFloatColor_honeyDew
ofFloatColor.hotPink = _of.cvar.ofFloatColor_hotPink
ofFloatColor.indianRed = _of.cvar.ofFloatColor_indianRed
ofFloatColor.indigo = _of.cvar.ofFloatColor_indigo
ofFloatColor.ivory = _of.cvar.ofFloatColor_ivory
ofFloatColor.khaki = _of.cvar.ofFloatColor_khaki
ofFloatColor.lavender = _of.cvar.ofFloatColor_lavender
ofFloatColor.lavenderBlush = _of.cvar.ofFloatColor_lavenderBlush
ofFloatColor.lawnGreen = _of.cvar.ofFloatColor_lawnGreen
ofFloatColor.lemonChiffon = _of.cvar.ofFloatColor_lemonChiffon
ofFloatColor.lightBlue = _of.cvar.ofFloatColor_lightBlue
ofFloatColor.lightCoral = _of.cvar.ofFloatColor_lightCoral
ofFloatColor.lightCyan = _of.cvar.ofFloatColor_lightCyan
ofFloatColor.lightGoldenRodYellow = _of.cvar.ofFloatColor_lightGoldenRodYellow
ofFloatColor.lightGray = _of.cvar.ofFloatColor_lightGray
ofFloatColor.lightGrey = _of.cvar.ofFloatColor_lightGrey
ofFloatColor.lightGreen = _of.cvar.ofFloatColor_lightGreen
ofFloatColor.lightPink = _of.cvar.ofFloatColor_lightPink
ofFloatColor.lightSalmon = _of.cvar.ofFloatColor_lightSalmon
ofFloatColor.lightSeaGreen = _of.cvar.ofFloatColor_lightSeaGreen
ofFloatColor.lightSkyBlue = _of.cvar.ofFloatColor_lightSkyBlue
ofFloatColor.lightSlateGray = _of.cvar.ofFloatColor_lightSlateGray
ofFloatColor.lightSlateGrey = _of.cvar.ofFloatColor_lightSlateGrey
ofFloatColor.lightSteelBlue = _of.cvar.ofFloatColor_lightSteelBlue
ofFloatColor.lightYellow = _of.cvar.ofFloatColor_lightYellow
ofFloatColor.lime = _of.cvar.ofFloatColor_lime
ofFloatColor.limeGreen = _of.cvar.ofFloatColor_limeGreen
ofFloatColor.linen = _of.cvar.ofFloatColor_linen
ofFloatColor.maroon = _of.cvar.ofFloatColor_maroon
ofFloatColor.mediumAquaMarine = _of.cvar.ofFloatColor_mediumAquaMarine
ofFloatColor.mediumBlue = _of.cvar.ofFloatColor_mediumBlue
ofFloatColor.mediumOrchid = _of.cvar.ofFloatColor_mediumOrchid
ofFloatColor.mediumPurple = _of.cvar.ofFloatColor_mediumPurple
ofFloatColor.mediumSeaGreen = _of.cvar.ofFloatColor_mediumSeaGreen
ofFloatColor.mediumSlateBlue = _of.cvar.ofFloatColor_mediumSlateBlue
ofFloatColor.mediumSpringGreen = _of.cvar.ofFloatColor_mediumSpringGreen
ofFloatColor.mediumTurquoise = _of.cvar.ofFloatColor_mediumTurquoise
ofFloatColor.mediumVioletRed = _of.cvar.ofFloatColor_mediumVioletRed
ofFloatColor.midnightBlue = _of.cvar.ofFloatColor_midnightBlue
ofFloatColor.mintCream = _of.cvar.ofFloatColor_mintCream
ofFloatColor.mistyRose = _of.cvar.ofFloatColor_mistyRose
ofFloatColor.moccasin = _of.cvar.ofFloatColor_moccasin
ofFloatColor.navajoWhite = _of.cvar.ofFloatColor_navajoWhite
ofFloatColor.navy = _of.cvar.ofFloatColor_navy
ofFloatColor.oldLace = _of.cvar.ofFloatColor_oldLace
ofFloatColor.olive = _of.cvar.ofFloatColor_olive
ofFloatColor.oliveDrab = _of.cvar.ofFloatColor_oliveDrab
ofFloatColor.orange = _of.cvar.ofFloatColor_orange
ofFloatColor.orangeRed = _of.cvar.ofFloatColor_orangeRed
ofFloatColor.orchid = _of.cvar.ofFloatColor_orchid
ofFloatColor.paleGoldenRod = _of.cvar.ofFloatColor_paleGoldenRod
ofFloatColor.paleGreen = _of.cvar.ofFloatColor_paleGreen
ofFloatColor.paleTurquoise = _of.cvar.ofFloatColor_paleTurquoise
ofFloatColor.paleVioletRed = _of.cvar.ofFloatColor_paleVioletRed
ofFloatColor.papayaWhip = _of.cvar.ofFloatColor_papayaWhip
ofFloatColor.peachPuff = _of.cvar.ofFloatColor_peachPuff
ofFloatColor.peru = _of.cvar.ofFloatColor_peru
ofFloatColor.pink = _of.cvar.ofFloatColor_pink
ofFloatColor.plum = _of.cvar.ofFloatColor_plum
ofFloatColor.powderBlue = _of.cvar.ofFloatColor_powderBlue
ofFloatColor.purple = _of.cvar.ofFloatColor_purple
ofFloatColor.rosyBrown = _of.cvar.ofFloatColor_rosyBrown
ofFloatColor.royalBlue = _of.cvar.ofFloatColor_royalBlue
ofFloatColor.saddleBrown = _of.cvar.ofFloatColor_saddleBrown
ofFloatColor.salmon = _of.cvar.ofFloatColor_salmon
ofFloatColor.sandyBrown = _of.cvar.ofFloatColor_sandyBrown
ofFloatColor.seaGreen = _of.cvar.ofFloatColor_seaGreen
ofFloatColor.seaShell = _of.cvar.ofFloatColor_seaShell
ofFloatColor.sienna = _of.cvar.ofFloatColor_sienna
ofFloatColor.silver = _of.cvar.ofFloatColor_silver
ofFloatColor.skyBlue = _of.cvar.ofFloatColor_skyBlue
ofFloatColor.slateBlue = _of.cvar.ofFloatColor_slateBlue
ofFloatColor.slateGray = _of.cvar.ofFloatColor_slateGray
ofFloatColor.slateGrey = _of.cvar.ofFloatColor_slateGrey
ofFloatColor.snow = _of.cvar.ofFloatColor_snow
ofFloatColor.springGreen = _of.cvar.ofFloatColor_springGreen
ofFloatColor.steelBlue = _of.cvar.ofFloatColor_steelBlue
ofFloatColor.tan = _of.cvar.ofFloatColor_tan
ofFloatColor.teal = _of.cvar.ofFloatColor_teal
ofFloatColor.thistle = _of.cvar.ofFloatColor_thistle
ofFloatColor.tomato = _of.cvar.ofFloatColor_tomato
ofFloatColor.turquoise = _of.cvar.ofFloatColor_turquoise
ofFloatColor.violet = _of.cvar.ofFloatColor_violet
ofFloatColor.wheat = _of.cvar.ofFloatColor_wheat
ofFloatColor.whiteSmoke = _of.cvar.ofFloatColor_whiteSmoke
ofFloatColor.yellowGreen = _of.cvar.ofFloatColor_yellowGreen

def ofFloatColor_limit():
  return _of.ofFloatColor_limit()
ofFloatColor_limit = _of.ofFloatColor_limit

class ofShortColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofShortColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofShortColor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofShortColor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _of.new_ofShortColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["fromHsb"] = lambda x: _of.ofShortColor_fromHsb
    if _newclass:fromHsb = staticmethod(_of.ofShortColor_fromHsb)
    __swig_getmethods__["fromHex"] = lambda x: _of.ofShortColor_fromHex
    if _newclass:fromHex = staticmethod(_of.ofShortColor_fromHex)
    def set(self, *args): return _of.ofShortColor_set(self, *args)
    def setHex(self, *args): return _of.ofShortColor_setHex(self, *args)
    def getHex(self): return _of.ofShortColor_getHex(self)
    def clamp(self): return _of.ofShortColor_clamp(self)
    def invert(self): return _of.ofShortColor_invert(self)
    def normalize(self): return _of.ofShortColor_normalize(self)
    def lerp(self, *args): return _of.ofShortColor_lerp(self, *args)
    def getClamped(self): return _of.ofShortColor_getClamped(self)
    def getInverted(self): return _of.ofShortColor_getInverted(self)
    def getNormalized(self): return _of.ofShortColor_getNormalized(self)
    def getLerped(self, *args): return _of.ofShortColor_getLerped(self, *args)
    def getHue(self): return _of.ofShortColor_getHue(self)
    def getSaturation(self): return _of.ofShortColor_getSaturation(self)
    def getBrightness(self): return _of.ofShortColor_getBrightness(self)
    def getLightness(self): return _of.ofShortColor_getLightness(self)
    def getHsb(self, *args): return _of.ofShortColor_getHsb(self, *args)
    def setHue(self, *args): return _of.ofShortColor_setHue(self, *args)
    def setSaturation(self, *args): return _of.ofShortColor_setSaturation(self, *args)
    def setBrightness(self, *args): return _of.ofShortColor_setBrightness(self, *args)
    def setHsb(self, *args): return _of.ofShortColor_setHsb(self, *args)
    def __eq__(self, *args): return _of.ofShortColor___eq__(self, *args)
    def __ne__(self, *args): return _of.ofShortColor___ne__(self, *args)
    def __add__(self, *args): return _of.ofShortColor___add__(self, *args)
    def __iadd__(self, *args): return _of.ofShortColor___iadd__(self, *args)
    def __sub__(self, *args): return _of.ofShortColor___sub__(self, *args)
    def __isub__(self, *args): return _of.ofShortColor___isub__(self, *args)
    def __mul__(self, *args): return _of.ofShortColor___mul__(self, *args)
    def __imul__(self, *args): return _of.ofShortColor___imul__(self, *args)
    def __div__(self, *args): return _of.ofShortColor___div__(self, *args)
    def __idiv__(self, *args): return _of.ofShortColor___idiv__(self, *args)
    __swig_getmethods__["limit"] = lambda x: _of.ofShortColor_limit
    if _newclass:limit = staticmethod(_of.ofShortColor_limit)
ofShortColor_swigregister = _of.ofShortColor_swigregister
ofShortColor_swigregister(ofShortColor)

def ofShortColor_fromHsb(*args):
  return _of.ofShortColor_fromHsb(*args)
ofShortColor_fromHsb = _of.ofShortColor_fromHsb

def ofShortColor_fromHex(*args):
  return _of.ofShortColor_fromHex(*args)
ofShortColor_fromHex = _of.ofShortColor_fromHex
ofShortColor.white = _of.cvar.ofShortColor_white
ofShortColor.gray = _of.cvar.ofShortColor_gray
ofShortColor.black = _of.cvar.ofShortColor_black
ofShortColor.red = _of.cvar.ofShortColor_red
ofShortColor.green = _of.cvar.ofShortColor_green
ofShortColor.blue = _of.cvar.ofShortColor_blue
ofShortColor.cyan = _of.cvar.ofShortColor_cyan
ofShortColor.magenta = _of.cvar.ofShortColor_magenta
ofShortColor.yellow = _of.cvar.ofShortColor_yellow
ofShortColor.aliceBlue = _of.cvar.ofShortColor_aliceBlue
ofShortColor.antiqueWhite = _of.cvar.ofShortColor_antiqueWhite
ofShortColor.aqua = _of.cvar.ofShortColor_aqua
ofShortColor.aquamarine = _of.cvar.ofShortColor_aquamarine
ofShortColor.azure = _of.cvar.ofShortColor_azure
ofShortColor.beige = _of.cvar.ofShortColor_beige
ofShortColor.bisque = _of.cvar.ofShortColor_bisque
ofShortColor.blanchedAlmond = _of.cvar.ofShortColor_blanchedAlmond
ofShortColor.blueViolet = _of.cvar.ofShortColor_blueViolet
ofShortColor.brown = _of.cvar.ofShortColor_brown
ofShortColor.burlyWood = _of.cvar.ofShortColor_burlyWood
ofShortColor.cadetBlue = _of.cvar.ofShortColor_cadetBlue
ofShortColor.chartreuse = _of.cvar.ofShortColor_chartreuse
ofShortColor.chocolate = _of.cvar.ofShortColor_chocolate
ofShortColor.coral = _of.cvar.ofShortColor_coral
ofShortColor.cornflowerBlue = _of.cvar.ofShortColor_cornflowerBlue
ofShortColor.cornsilk = _of.cvar.ofShortColor_cornsilk
ofShortColor.crimson = _of.cvar.ofShortColor_crimson
ofShortColor.darkBlue = _of.cvar.ofShortColor_darkBlue
ofShortColor.darkCyan = _of.cvar.ofShortColor_darkCyan
ofShortColor.darkGoldenRod = _of.cvar.ofShortColor_darkGoldenRod
ofShortColor.darkGray = _of.cvar.ofShortColor_darkGray
ofShortColor.darkGrey = _of.cvar.ofShortColor_darkGrey
ofShortColor.darkGreen = _of.cvar.ofShortColor_darkGreen
ofShortColor.darkKhaki = _of.cvar.ofShortColor_darkKhaki
ofShortColor.darkMagenta = _of.cvar.ofShortColor_darkMagenta
ofShortColor.darkOliveGreen = _of.cvar.ofShortColor_darkOliveGreen
ofShortColor.darkorange = _of.cvar.ofShortColor_darkorange
ofShortColor.darkOrchid = _of.cvar.ofShortColor_darkOrchid
ofShortColor.darkRed = _of.cvar.ofShortColor_darkRed
ofShortColor.darkSalmon = _of.cvar.ofShortColor_darkSalmon
ofShortColor.darkSeaGreen = _of.cvar.ofShortColor_darkSeaGreen
ofShortColor.darkSlateBlue = _of.cvar.ofShortColor_darkSlateBlue
ofShortColor.darkSlateGray = _of.cvar.ofShortColor_darkSlateGray
ofShortColor.darkSlateGrey = _of.cvar.ofShortColor_darkSlateGrey
ofShortColor.darkTurquoise = _of.cvar.ofShortColor_darkTurquoise
ofShortColor.darkViolet = _of.cvar.ofShortColor_darkViolet
ofShortColor.deepPink = _of.cvar.ofShortColor_deepPink
ofShortColor.deepSkyBlue = _of.cvar.ofShortColor_deepSkyBlue
ofShortColor.dimGray = _of.cvar.ofShortColor_dimGray
ofShortColor.dimGrey = _of.cvar.ofShortColor_dimGrey
ofShortColor.dodgerBlue = _of.cvar.ofShortColor_dodgerBlue
ofShortColor.fireBrick = _of.cvar.ofShortColor_fireBrick
ofShortColor.floralWhite = _of.cvar.ofShortColor_floralWhite
ofShortColor.forestGreen = _of.cvar.ofShortColor_forestGreen
ofShortColor.fuchsia = _of.cvar.ofShortColor_fuchsia
ofShortColor.gainsboro = _of.cvar.ofShortColor_gainsboro
ofShortColor.ghostWhite = _of.cvar.ofShortColor_ghostWhite
ofShortColor.gold = _of.cvar.ofShortColor_gold
ofShortColor.goldenRod = _of.cvar.ofShortColor_goldenRod
ofShortColor.grey = _of.cvar.ofShortColor_grey
ofShortColor.greenYellow = _of.cvar.ofShortColor_greenYellow
ofShortColor.honeyDew = _of.cvar.ofShortColor_honeyDew
ofShortColor.hotPink = _of.cvar.ofShortColor_hotPink
ofShortColor.indianRed = _of.cvar.ofShortColor_indianRed
ofShortColor.indigo = _of.cvar.ofShortColor_indigo
ofShortColor.ivory = _of.cvar.ofShortColor_ivory
ofShortColor.khaki = _of.cvar.ofShortColor_khaki
ofShortColor.lavender = _of.cvar.ofShortColor_lavender
ofShortColor.lavenderBlush = _of.cvar.ofShortColor_lavenderBlush
ofShortColor.lawnGreen = _of.cvar.ofShortColor_lawnGreen
ofShortColor.lemonChiffon = _of.cvar.ofShortColor_lemonChiffon
ofShortColor.lightBlue = _of.cvar.ofShortColor_lightBlue
ofShortColor.lightCoral = _of.cvar.ofShortColor_lightCoral
ofShortColor.lightCyan = _of.cvar.ofShortColor_lightCyan
ofShortColor.lightGoldenRodYellow = _of.cvar.ofShortColor_lightGoldenRodYellow
ofShortColor.lightGray = _of.cvar.ofShortColor_lightGray
ofShortColor.lightGrey = _of.cvar.ofShortColor_lightGrey
ofShortColor.lightGreen = _of.cvar.ofShortColor_lightGreen
ofShortColor.lightPink = _of.cvar.ofShortColor_lightPink
ofShortColor.lightSalmon = _of.cvar.ofShortColor_lightSalmon
ofShortColor.lightSeaGreen = _of.cvar.ofShortColor_lightSeaGreen
ofShortColor.lightSkyBlue = _of.cvar.ofShortColor_lightSkyBlue
ofShortColor.lightSlateGray = _of.cvar.ofShortColor_lightSlateGray
ofShortColor.lightSlateGrey = _of.cvar.ofShortColor_lightSlateGrey
ofShortColor.lightSteelBlue = _of.cvar.ofShortColor_lightSteelBlue
ofShortColor.lightYellow = _of.cvar.ofShortColor_lightYellow
ofShortColor.lime = _of.cvar.ofShortColor_lime
ofShortColor.limeGreen = _of.cvar.ofShortColor_limeGreen
ofShortColor.linen = _of.cvar.ofShortColor_linen
ofShortColor.maroon = _of.cvar.ofShortColor_maroon
ofShortColor.mediumAquaMarine = _of.cvar.ofShortColor_mediumAquaMarine
ofShortColor.mediumBlue = _of.cvar.ofShortColor_mediumBlue
ofShortColor.mediumOrchid = _of.cvar.ofShortColor_mediumOrchid
ofShortColor.mediumPurple = _of.cvar.ofShortColor_mediumPurple
ofShortColor.mediumSeaGreen = _of.cvar.ofShortColor_mediumSeaGreen
ofShortColor.mediumSlateBlue = _of.cvar.ofShortColor_mediumSlateBlue
ofShortColor.mediumSpringGreen = _of.cvar.ofShortColor_mediumSpringGreen
ofShortColor.mediumTurquoise = _of.cvar.ofShortColor_mediumTurquoise
ofShortColor.mediumVioletRed = _of.cvar.ofShortColor_mediumVioletRed
ofShortColor.midnightBlue = _of.cvar.ofShortColor_midnightBlue
ofShortColor.mintCream = _of.cvar.ofShortColor_mintCream
ofShortColor.mistyRose = _of.cvar.ofShortColor_mistyRose
ofShortColor.moccasin = _of.cvar.ofShortColor_moccasin
ofShortColor.navajoWhite = _of.cvar.ofShortColor_navajoWhite
ofShortColor.navy = _of.cvar.ofShortColor_navy
ofShortColor.oldLace = _of.cvar.ofShortColor_oldLace
ofShortColor.olive = _of.cvar.ofShortColor_olive
ofShortColor.oliveDrab = _of.cvar.ofShortColor_oliveDrab
ofShortColor.orange = _of.cvar.ofShortColor_orange
ofShortColor.orangeRed = _of.cvar.ofShortColor_orangeRed
ofShortColor.orchid = _of.cvar.ofShortColor_orchid
ofShortColor.paleGoldenRod = _of.cvar.ofShortColor_paleGoldenRod
ofShortColor.paleGreen = _of.cvar.ofShortColor_paleGreen
ofShortColor.paleTurquoise = _of.cvar.ofShortColor_paleTurquoise
ofShortColor.paleVioletRed = _of.cvar.ofShortColor_paleVioletRed
ofShortColor.papayaWhip = _of.cvar.ofShortColor_papayaWhip
ofShortColor.peachPuff = _of.cvar.ofShortColor_peachPuff
ofShortColor.peru = _of.cvar.ofShortColor_peru
ofShortColor.pink = _of.cvar.ofShortColor_pink
ofShortColor.plum = _of.cvar.ofShortColor_plum
ofShortColor.powderBlue = _of.cvar.ofShortColor_powderBlue
ofShortColor.purple = _of.cvar.ofShortColor_purple
ofShortColor.rosyBrown = _of.cvar.ofShortColor_rosyBrown
ofShortColor.royalBlue = _of.cvar.ofShortColor_royalBlue
ofShortColor.saddleBrown = _of.cvar.ofShortColor_saddleBrown
ofShortColor.salmon = _of.cvar.ofShortColor_salmon
ofShortColor.sandyBrown = _of.cvar.ofShortColor_sandyBrown
ofShortColor.seaGreen = _of.cvar.ofShortColor_seaGreen
ofShortColor.seaShell = _of.cvar.ofShortColor_seaShell
ofShortColor.sienna = _of.cvar.ofShortColor_sienna
ofShortColor.silver = _of.cvar.ofShortColor_silver
ofShortColor.skyBlue = _of.cvar.ofShortColor_skyBlue
ofShortColor.slateBlue = _of.cvar.ofShortColor_slateBlue
ofShortColor.slateGray = _of.cvar.ofShortColor_slateGray
ofShortColor.slateGrey = _of.cvar.ofShortColor_slateGrey
ofShortColor.snow = _of.cvar.ofShortColor_snow
ofShortColor.springGreen = _of.cvar.ofShortColor_springGreen
ofShortColor.steelBlue = _of.cvar.ofShortColor_steelBlue
ofShortColor.tan = _of.cvar.ofShortColor_tan
ofShortColor.teal = _of.cvar.ofShortColor_teal
ofShortColor.thistle = _of.cvar.ofShortColor_thistle
ofShortColor.tomato = _of.cvar.ofShortColor_tomato
ofShortColor.turquoise = _of.cvar.ofShortColor_turquoise
ofShortColor.violet = _of.cvar.ofShortColor_violet
ofShortColor.wheat = _of.cvar.ofShortColor_wheat
ofShortColor.whiteSmoke = _of.cvar.ofShortColor_whiteSmoke
ofShortColor.yellowGreen = _of.cvar.ofShortColor_yellowGreen

def ofShortColor_limit():
  return _of.ofShortColor_limit()
ofShortColor_limit = _of.ofShortColor_limit

OF_IMAGE_QUALITY_BEST = _of.OF_IMAGE_QUALITY_BEST
OF_IMAGE_QUALITY_HIGH = _of.OF_IMAGE_QUALITY_HIGH
OF_IMAGE_QUALITY_MEDIUM = _of.OF_IMAGE_QUALITY_MEDIUM
OF_IMAGE_QUALITY_LOW = _of.OF_IMAGE_QUALITY_LOW
OF_IMAGE_QUALITY_WORST = _of.OF_IMAGE_QUALITY_WORST
OF_IMAGE_FORMAT_BMP = _of.OF_IMAGE_FORMAT_BMP
OF_IMAGE_FORMAT_ICO = _of.OF_IMAGE_FORMAT_ICO
OF_IMAGE_FORMAT_JPEG = _of.OF_IMAGE_FORMAT_JPEG
OF_IMAGE_FORMAT_JNG = _of.OF_IMAGE_FORMAT_JNG
OF_IMAGE_FORMAT_KOALA = _of.OF_IMAGE_FORMAT_KOALA
OF_IMAGE_FORMAT_LBM = _of.OF_IMAGE_FORMAT_LBM
OF_IMAGE_FORMAT_IFF = _of.OF_IMAGE_FORMAT_IFF
OF_IMAGE_FORMAT_MNG = _of.OF_IMAGE_FORMAT_MNG
OF_IMAGE_FORMAT_PBM = _of.OF_IMAGE_FORMAT_PBM
OF_IMAGE_FORMAT_PBMRAW = _of.OF_IMAGE_FORMAT_PBMRAW
OF_IMAGE_FORMAT_PCD = _of.OF_IMAGE_FORMAT_PCD
OF_IMAGE_FORMAT_PCX = _of.OF_IMAGE_FORMAT_PCX
OF_IMAGE_FORMAT_PGM = _of.OF_IMAGE_FORMAT_PGM
OF_IMAGE_FORMAT_PGMRAW = _of.OF_IMAGE_FORMAT_PGMRAW
OF_IMAGE_FORMAT_PNG = _of.OF_IMAGE_FORMAT_PNG
OF_IMAGE_FORMAT_PPM = _of.OF_IMAGE_FORMAT_PPM
OF_IMAGE_FORMAT_PPMRAW = _of.OF_IMAGE_FORMAT_PPMRAW
OF_IMAGE_FORMAT_RAS = _of.OF_IMAGE_FORMAT_RAS
OF_IMAGE_FORMAT_TARGA = _of.OF_IMAGE_FORMAT_TARGA
OF_IMAGE_FORMAT_TIFF = _of.OF_IMAGE_FORMAT_TIFF
OF_IMAGE_FORMAT_WBMP = _of.OF_IMAGE_FORMAT_WBMP
OF_IMAGE_FORMAT_PSD = _of.OF_IMAGE_FORMAT_PSD
OF_IMAGE_FORMAT_CUT = _of.OF_IMAGE_FORMAT_CUT
OF_IMAGE_FORMAT_XBM = _of.OF_IMAGE_FORMAT_XBM
OF_IMAGE_FORMAT_XPM = _of.OF_IMAGE_FORMAT_XPM
OF_IMAGE_FORMAT_DDS = _of.OF_IMAGE_FORMAT_DDS
OF_IMAGE_FORMAT_GIF = _of.OF_IMAGE_FORMAT_GIF
OF_IMAGE_FORMAT_HDR = _of.OF_IMAGE_FORMAT_HDR
OF_IMAGE_FORMAT_FAXG3 = _of.OF_IMAGE_FORMAT_FAXG3
OF_IMAGE_FORMAT_SGI = _of.OF_IMAGE_FORMAT_SGI
OF_IMAGE_FORMAT_EXR = _of.OF_IMAGE_FORMAT_EXR
OF_IMAGE_FORMAT_J2K = _of.OF_IMAGE_FORMAT_J2K
OF_IMAGE_FORMAT_JP2 = _of.OF_IMAGE_FORMAT_JP2
OF_IMAGE_FORMAT_PFM = _of.OF_IMAGE_FORMAT_PFM
OF_IMAGE_FORMAT_PICT = _of.OF_IMAGE_FORMAT_PICT
OF_IMAGE_FORMAT_RAW = _of.OF_IMAGE_FORMAT_RAW

def ofLoadImage(*args):
  return _of.ofLoadImage(*args)
ofLoadImage = _of.ofLoadImage

def ofSaveImage(*args):
  return _of.ofSaveImage(*args)
ofSaveImage = _of.ofSaveImage

def ofCloseFreeImage():
  return _of.ofCloseFreeImage()
ofCloseFreeImage = _of.ofCloseFreeImage
class ofImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofImage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _of.ofImage_allocate(self, *args)
    def clear(self): return _of.ofImage_clear(self)
    def __init__(self, *args): 
        this = _of.new_ofImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUseTexture(self, *args): return _of.ofImage_setUseTexture(self, *args)
    def isUsingTexture(self): return _of.ofImage_isUsingTexture(self)
    def getTextureReference(self): return _of.ofImage_getTextureReference(self)
    def bind(self): return _of.ofImage_bind(self)
    def unbind(self): return _of.ofImage_unbind(self)
    def loadImage(self, *args): return _of.ofImage_loadImage(self, *args)
    def saveImage(self, *args): return _of.ofImage_saveImage(self, *args)
    def setCompression(self, *args): return _of.ofImage_setCompression(self, *args)
    def getPixels(self): return _of.ofImage_getPixels(self)
    def getPixelsRef(self): return _of.ofImage_getPixelsRef(self)
    def getColor(self, *args): return _of.ofImage_getColor(self, *args)
    def setColor(self, *args): return _of.ofImage_setColor(self, *args)
    def setFromPixels(self, *args): return _of.ofImage_setFromPixels(self, *args)
    def setImageType(self, *args): return _of.ofImage_setImageType(self, *args)
    def resize(self, *args): return _of.ofImage_resize(self, *args)
    def grabScreen(self, *args): return _of.ofImage_grabScreen(self, *args)
    def crop(self, *args): return _of.ofImage_crop(self, *args)
    def cropFrom(self, *args): return _of.ofImage_cropFrom(self, *args)
    def rotate90(self, *args): return _of.ofImage_rotate90(self, *args)
    def mirror(self, *args): return _of.ofImage_mirror(self, *args)
    def update(self): return _of.ofImage_update(self)
    def setAnchorPercent(self, *args): return _of.ofImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _of.ofImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _of.ofImage_resetAnchor(self)
    def draw(self, *args): return _of.ofImage_draw(self, *args)
    def drawSubsection(self, *args): return _of.ofImage_drawSubsection(self, *args)
    def getHeight(self): return _of.ofImage_getHeight(self)
    def getWidth(self): return _of.ofImage_getWidth(self)
    def bAllocated(self): return _of.ofImage_bAllocated(self)
    def isAllocated(self): return _of.ofImage_isAllocated(self)
    def reloadTexture(self): return _of.ofImage_reloadTexture(self)
    __swig_setmethods__["width"] = _of.ofImage_width_set
    __swig_getmethods__["width"] = _of.ofImage_width_get
    if _newclass:width = _swig_property(_of.ofImage_width_get, _of.ofImage_width_set)
    __swig_setmethods__["height"] = _of.ofImage_height_set
    __swig_getmethods__["height"] = _of.ofImage_height_get
    if _newclass:height = _swig_property(_of.ofImage_height_get, _of.ofImage_height_set)
    __swig_setmethods__["bpp"] = _of.ofImage_bpp_set
    __swig_getmethods__["bpp"] = _of.ofImage_bpp_get
    if _newclass:bpp = _swig_property(_of.ofImage_bpp_get, _of.ofImage_bpp_set)
    __swig_setmethods__["type"] = _of.ofImage_type_set
    __swig_getmethods__["type"] = _of.ofImage_type_get
    if _newclass:type = _swig_property(_of.ofImage_type_get, _of.ofImage_type_set)
ofImage_swigregister = _of.ofImage_swigregister
ofImage_swigregister(ofImage)

class ofFloatImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFloatImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFloatImage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofFloatImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _of.ofFloatImage_allocate(self, *args)
    def clear(self): return _of.ofFloatImage_clear(self)
    def __init__(self, *args): 
        this = _of.new_ofFloatImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUseTexture(self, *args): return _of.ofFloatImage_setUseTexture(self, *args)
    def isUsingTexture(self): return _of.ofFloatImage_isUsingTexture(self)
    def getTextureReference(self): return _of.ofFloatImage_getTextureReference(self)
    def bind(self): return _of.ofFloatImage_bind(self)
    def unbind(self): return _of.ofFloatImage_unbind(self)
    def loadImage(self, *args): return _of.ofFloatImage_loadImage(self, *args)
    def saveImage(self, *args): return _of.ofFloatImage_saveImage(self, *args)
    def setCompression(self, *args): return _of.ofFloatImage_setCompression(self, *args)
    def getPixels(self): return _of.ofFloatImage_getPixels(self)
    def getPixelsRef(self): return _of.ofFloatImage_getPixelsRef(self)
    def getColor(self, *args): return _of.ofFloatImage_getColor(self, *args)
    def setColor(self, *args): return _of.ofFloatImage_setColor(self, *args)
    def setFromPixels(self, *args): return _of.ofFloatImage_setFromPixels(self, *args)
    def setImageType(self, *args): return _of.ofFloatImage_setImageType(self, *args)
    def resize(self, *args): return _of.ofFloatImage_resize(self, *args)
    def grabScreen(self, *args): return _of.ofFloatImage_grabScreen(self, *args)
    def crop(self, *args): return _of.ofFloatImage_crop(self, *args)
    def cropFrom(self, *args): return _of.ofFloatImage_cropFrom(self, *args)
    def rotate90(self, *args): return _of.ofFloatImage_rotate90(self, *args)
    def mirror(self, *args): return _of.ofFloatImage_mirror(self, *args)
    def update(self): return _of.ofFloatImage_update(self)
    def setAnchorPercent(self, *args): return _of.ofFloatImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _of.ofFloatImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _of.ofFloatImage_resetAnchor(self)
    def draw(self, *args): return _of.ofFloatImage_draw(self, *args)
    def drawSubsection(self, *args): return _of.ofFloatImage_drawSubsection(self, *args)
    def getHeight(self): return _of.ofFloatImage_getHeight(self)
    def getWidth(self): return _of.ofFloatImage_getWidth(self)
    def bAllocated(self): return _of.ofFloatImage_bAllocated(self)
    def isAllocated(self): return _of.ofFloatImage_isAllocated(self)
    def reloadTexture(self): return _of.ofFloatImage_reloadTexture(self)
    __swig_setmethods__["width"] = _of.ofFloatImage_width_set
    __swig_getmethods__["width"] = _of.ofFloatImage_width_get
    if _newclass:width = _swig_property(_of.ofFloatImage_width_get, _of.ofFloatImage_width_set)
    __swig_setmethods__["height"] = _of.ofFloatImage_height_set
    __swig_getmethods__["height"] = _of.ofFloatImage_height_get
    if _newclass:height = _swig_property(_of.ofFloatImage_height_get, _of.ofFloatImage_height_set)
    __swig_setmethods__["bpp"] = _of.ofFloatImage_bpp_set
    __swig_getmethods__["bpp"] = _of.ofFloatImage_bpp_get
    if _newclass:bpp = _swig_property(_of.ofFloatImage_bpp_get, _of.ofFloatImage_bpp_set)
    __swig_setmethods__["type"] = _of.ofFloatImage_type_set
    __swig_getmethods__["type"] = _of.ofFloatImage_type_get
    if _newclass:type = _swig_property(_of.ofFloatImage_type_get, _of.ofFloatImage_type_set)
ofFloatImage_swigregister = _of.ofFloatImage_swigregister
ofFloatImage_swigregister(ofFloatImage)

class ofShortImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofShortImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofShortImage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofShortImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _of.ofShortImage_allocate(self, *args)
    def clear(self): return _of.ofShortImage_clear(self)
    def __init__(self, *args): 
        this = _of.new_ofShortImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUseTexture(self, *args): return _of.ofShortImage_setUseTexture(self, *args)
    def isUsingTexture(self): return _of.ofShortImage_isUsingTexture(self)
    def getTextureReference(self): return _of.ofShortImage_getTextureReference(self)
    def bind(self): return _of.ofShortImage_bind(self)
    def unbind(self): return _of.ofShortImage_unbind(self)
    def loadImage(self, *args): return _of.ofShortImage_loadImage(self, *args)
    def saveImage(self, *args): return _of.ofShortImage_saveImage(self, *args)
    def setCompression(self, *args): return _of.ofShortImage_setCompression(self, *args)
    def getPixels(self): return _of.ofShortImage_getPixels(self)
    def getPixelsRef(self): return _of.ofShortImage_getPixelsRef(self)
    def getColor(self, *args): return _of.ofShortImage_getColor(self, *args)
    def setColor(self, *args): return _of.ofShortImage_setColor(self, *args)
    def setFromPixels(self, *args): return _of.ofShortImage_setFromPixels(self, *args)
    def setImageType(self, *args): return _of.ofShortImage_setImageType(self, *args)
    def resize(self, *args): return _of.ofShortImage_resize(self, *args)
    def grabScreen(self, *args): return _of.ofShortImage_grabScreen(self, *args)
    def crop(self, *args): return _of.ofShortImage_crop(self, *args)
    def cropFrom(self, *args): return _of.ofShortImage_cropFrom(self, *args)
    def rotate90(self, *args): return _of.ofShortImage_rotate90(self, *args)
    def mirror(self, *args): return _of.ofShortImage_mirror(self, *args)
    def update(self): return _of.ofShortImage_update(self)
    def setAnchorPercent(self, *args): return _of.ofShortImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _of.ofShortImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _of.ofShortImage_resetAnchor(self)
    def draw(self, *args): return _of.ofShortImage_draw(self, *args)
    def drawSubsection(self, *args): return _of.ofShortImage_drawSubsection(self, *args)
    def getHeight(self): return _of.ofShortImage_getHeight(self)
    def getWidth(self): return _of.ofShortImage_getWidth(self)
    def bAllocated(self): return _of.ofShortImage_bAllocated(self)
    def isAllocated(self): return _of.ofShortImage_isAllocated(self)
    def reloadTexture(self): return _of.ofShortImage_reloadTexture(self)
    __swig_setmethods__["width"] = _of.ofShortImage_width_set
    __swig_getmethods__["width"] = _of.ofShortImage_width_get
    if _newclass:width = _swig_property(_of.ofShortImage_width_get, _of.ofShortImage_width_set)
    __swig_setmethods__["height"] = _of.ofShortImage_height_set
    __swig_getmethods__["height"] = _of.ofShortImage_height_get
    if _newclass:height = _swig_property(_of.ofShortImage_height_get, _of.ofShortImage_height_set)
    __swig_setmethods__["bpp"] = _of.ofShortImage_bpp_set
    __swig_getmethods__["bpp"] = _of.ofShortImage_bpp_get
    if _newclass:bpp = _swig_property(_of.ofShortImage_bpp_get, _of.ofShortImage_bpp_set)
    __swig_setmethods__["type"] = _of.ofShortImage_type_set
    __swig_getmethods__["type"] = _of.ofShortImage_type_get
    if _newclass:type = _swig_property(_of.ofShortImage_type_get, _of.ofShortImage_type_set)
ofShortImage_swigregister = _of.ofShortImage_swigregister
ofShortImage_swigregister(ofShortImage)

OF_INTERPOLATE_NEAREST_NEIGHBOR = _of.OF_INTERPOLATE_NEAREST_NEIGHBOR
OF_INTERPOLATE_BILINEAR = _of.OF_INTERPOLATE_BILINEAR
OF_INTERPOLATE_BICUBIC = _of.OF_INTERPOLATE_BICUBIC
class ofPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPixels, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofPixels
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _of.new_ofPixels(*args)
        try: self.this.append(this)
        except: self.this = this
    def allocate(self, *args): return _of.ofPixels_allocate(self, *args)
    def set(self, *args): return _of.ofPixels_set(self, *args)
    def setFromPixels(self, *args): return _of.ofPixels_setFromPixels(self, *args)
    def setFromExternalPixels(self, *args): return _of.ofPixels_setFromExternalPixels(self, *args)
    def setFromAlignedPixels(self, *args): return _of.ofPixels_setFromAlignedPixels(self, *args)
    def swap(self, *args): return _of.ofPixels_swap(self, *args)
    def crop(self, *args): return _of.ofPixels_crop(self, *args)
    def cropTo(self, *args): return _of.ofPixels_cropTo(self, *args)
    def rotate90(self, *args): return _of.ofPixels_rotate90(self, *args)
    def rotate90To(self, *args): return _of.ofPixels_rotate90To(self, *args)
    def mirrorTo(self, *args): return _of.ofPixels_mirrorTo(self, *args)
    def mirror(self, *args): return _of.ofPixels_mirror(self, *args)
    def resize(self, *args): return _of.ofPixels_resize(self, *args)
    def resizeTo(self, *args): return _of.ofPixels_resizeTo(self, *args)
    def pasteInto(self, *args): return _of.ofPixels_pasteInto(self, *args)
    def swapRgb(self): return _of.ofPixels_swapRgb(self)
    def clear(self): return _of.ofPixels_clear(self)
    def getPixels(self, *args): return _of.ofPixels_getPixels(self, *args)
    def getPixelIndex(self, *args): return _of.ofPixels_getPixelIndex(self, *args)
    def getColor(self, *args): return _of.ofPixels_getColor(self, *args)
    def setColor(self, *args): return _of.ofPixels_setColor(self, *args)
    def isAllocated(self): return _of.ofPixels_isAllocated(self)
    def getWidth(self): return _of.ofPixels_getWidth(self)
    def getHeight(self): return _of.ofPixels_getHeight(self)
    def getBytesPerPixel(self): return _of.ofPixels_getBytesPerPixel(self)
    def getBitsPerPixel(self): return _of.ofPixels_getBitsPerPixel(self)
    def getBytesPerChannel(self): return _of.ofPixels_getBytesPerChannel(self)
    def getBitsPerChannel(self): return _of.ofPixels_getBitsPerChannel(self)
    def getNumChannels(self): return _of.ofPixels_getNumChannels(self)
    def getChannel(self, *args): return _of.ofPixels_getChannel(self, *args)
    def setChannel(self, *args): return _of.ofPixels_setChannel(self, *args)
    def getImageType(self): return _of.ofPixels_getImageType(self)
    def setImageType(self, *args): return _of.ofPixels_setImageType(self, *args)
    def setNumChannels(self, *args): return _of.ofPixels_setNumChannels(self, *args)
    def size(self): return _of.ofPixels_size(self)
ofPixels_swigregister = _of.ofPixels_swigregister
ofPixels_swigregister(ofPixels)

class ofFloatPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFloatPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFloatPixels, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofFloatPixels
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _of.new_ofFloatPixels(*args)
        try: self.this.append(this)
        except: self.this = this
    def allocate(self, *args): return _of.ofFloatPixels_allocate(self, *args)
    def set(self, *args): return _of.ofFloatPixels_set(self, *args)
    def setFromPixels(self, *args): return _of.ofFloatPixels_setFromPixels(self, *args)
    def setFromExternalPixels(self, *args): return _of.ofFloatPixels_setFromExternalPixels(self, *args)
    def setFromAlignedPixels(self, *args): return _of.ofFloatPixels_setFromAlignedPixels(self, *args)
    def swap(self, *args): return _of.ofFloatPixels_swap(self, *args)
    def crop(self, *args): return _of.ofFloatPixels_crop(self, *args)
    def cropTo(self, *args): return _of.ofFloatPixels_cropTo(self, *args)
    def rotate90(self, *args): return _of.ofFloatPixels_rotate90(self, *args)
    def rotate90To(self, *args): return _of.ofFloatPixels_rotate90To(self, *args)
    def mirrorTo(self, *args): return _of.ofFloatPixels_mirrorTo(self, *args)
    def mirror(self, *args): return _of.ofFloatPixels_mirror(self, *args)
    def resize(self, *args): return _of.ofFloatPixels_resize(self, *args)
    def resizeTo(self, *args): return _of.ofFloatPixels_resizeTo(self, *args)
    def pasteInto(self, *args): return _of.ofFloatPixels_pasteInto(self, *args)
    def swapRgb(self): return _of.ofFloatPixels_swapRgb(self)
    def clear(self): return _of.ofFloatPixels_clear(self)
    def getPixels(self, *args): return _of.ofFloatPixels_getPixels(self, *args)
    def getPixelIndex(self, *args): return _of.ofFloatPixels_getPixelIndex(self, *args)
    def getColor(self, *args): return _of.ofFloatPixels_getColor(self, *args)
    def setColor(self, *args): return _of.ofFloatPixels_setColor(self, *args)
    def isAllocated(self): return _of.ofFloatPixels_isAllocated(self)
    def getWidth(self): return _of.ofFloatPixels_getWidth(self)
    def getHeight(self): return _of.ofFloatPixels_getHeight(self)
    def getBytesPerPixel(self): return _of.ofFloatPixels_getBytesPerPixel(self)
    def getBitsPerPixel(self): return _of.ofFloatPixels_getBitsPerPixel(self)
    def getBytesPerChannel(self): return _of.ofFloatPixels_getBytesPerChannel(self)
    def getBitsPerChannel(self): return _of.ofFloatPixels_getBitsPerChannel(self)
    def getNumChannels(self): return _of.ofFloatPixels_getNumChannels(self)
    def getChannel(self, *args): return _of.ofFloatPixels_getChannel(self, *args)
    def setChannel(self, *args): return _of.ofFloatPixels_setChannel(self, *args)
    def getImageType(self): return _of.ofFloatPixels_getImageType(self)
    def setImageType(self, *args): return _of.ofFloatPixels_setImageType(self, *args)
    def setNumChannels(self, *args): return _of.ofFloatPixels_setNumChannels(self, *args)
    def size(self): return _of.ofFloatPixels_size(self)
ofFloatPixels_swigregister = _of.ofFloatPixels_swigregister
ofFloatPixels_swigregister(ofFloatPixels)

class ofShortPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofShortPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofShortPixels, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofShortPixels
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _of.new_ofShortPixels(*args)
        try: self.this.append(this)
        except: self.this = this
    def allocate(self, *args): return _of.ofShortPixels_allocate(self, *args)
    def set(self, *args): return _of.ofShortPixels_set(self, *args)
    def setFromPixels(self, *args): return _of.ofShortPixels_setFromPixels(self, *args)
    def setFromExternalPixels(self, *args): return _of.ofShortPixels_setFromExternalPixels(self, *args)
    def setFromAlignedPixels(self, *args): return _of.ofShortPixels_setFromAlignedPixels(self, *args)
    def swap(self, *args): return _of.ofShortPixels_swap(self, *args)
    def crop(self, *args): return _of.ofShortPixels_crop(self, *args)
    def cropTo(self, *args): return _of.ofShortPixels_cropTo(self, *args)
    def rotate90(self, *args): return _of.ofShortPixels_rotate90(self, *args)
    def rotate90To(self, *args): return _of.ofShortPixels_rotate90To(self, *args)
    def mirrorTo(self, *args): return _of.ofShortPixels_mirrorTo(self, *args)
    def mirror(self, *args): return _of.ofShortPixels_mirror(self, *args)
    def resize(self, *args): return _of.ofShortPixels_resize(self, *args)
    def resizeTo(self, *args): return _of.ofShortPixels_resizeTo(self, *args)
    def pasteInto(self, *args): return _of.ofShortPixels_pasteInto(self, *args)
    def swapRgb(self): return _of.ofShortPixels_swapRgb(self)
    def clear(self): return _of.ofShortPixels_clear(self)
    def getPixels(self, *args): return _of.ofShortPixels_getPixels(self, *args)
    def getPixelIndex(self, *args): return _of.ofShortPixels_getPixelIndex(self, *args)
    def getColor(self, *args): return _of.ofShortPixels_getColor(self, *args)
    def setColor(self, *args): return _of.ofShortPixels_setColor(self, *args)
    def isAllocated(self): return _of.ofShortPixels_isAllocated(self)
    def getWidth(self): return _of.ofShortPixels_getWidth(self)
    def getHeight(self): return _of.ofShortPixels_getHeight(self)
    def getBytesPerPixel(self): return _of.ofShortPixels_getBytesPerPixel(self)
    def getBitsPerPixel(self): return _of.ofShortPixels_getBitsPerPixel(self)
    def getBytesPerChannel(self): return _of.ofShortPixels_getBytesPerChannel(self)
    def getBitsPerChannel(self): return _of.ofShortPixels_getBitsPerChannel(self)
    def getNumChannels(self): return _of.ofShortPixels_getNumChannels(self)
    def getChannel(self, *args): return _of.ofShortPixels_getChannel(self, *args)
    def setChannel(self, *args): return _of.ofShortPixels_setChannel(self, *args)
    def getImageType(self): return _of.ofShortPixels_getImageType(self)
    def setImageType(self, *args): return _of.ofShortPixels_setImageType(self, *args)
    def setNumChannels(self, *args): return _of.ofShortPixels_setNumChannels(self, *args)
    def size(self): return _of.ofShortPixels_size(self)
ofShortPixels_swigregister = _of.ofShortPixels_swigregister
ofShortPixels_swigregister(ofShortPixels)


def ofGetMousePressed(*args):
  return _of.ofGetMousePressed(*args)
ofGetMousePressed = _of.ofGetMousePressed

def ofGetKeyPressed(*args):
  return _of.ofGetKeyPressed(*args)
ofGetKeyPressed = _of.ofGetKeyPressed

def ofGetMouseX():
  return _of.ofGetMouseX()
ofGetMouseX = _of.ofGetMouseX

def ofGetMouseY():
  return _of.ofGetMouseY()
ofGetMouseY = _of.ofGetMouseY

def ofGetPreviousMouseX():
  return _of.ofGetPreviousMouseX()
ofGetPreviousMouseX = _of.ofGetPreviousMouseX

def ofGetPreviousMouseY():
  return _of.ofGetPreviousMouseY()
ofGetPreviousMouseY = _of.ofGetPreviousMouseY

def ofSetEscapeQuitsApp(*args):
  return _of.ofSetEscapeQuitsApp(*args)
ofSetEscapeQuitsApp = _of.ofSetEscapeQuitsApp

def exitApp():
  return _of.exitApp()
exitApp = _of.exitApp
class ofDragInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofDragInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofDragInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["files"] = _of.ofDragInfo_files_set
    __swig_getmethods__["files"] = _of.ofDragInfo_files_get
    if _newclass:files = _swig_property(_of.ofDragInfo_files_get, _of.ofDragInfo_files_set)
    __swig_setmethods__["position"] = _of.ofDragInfo_position_set
    __swig_getmethods__["position"] = _of.ofDragInfo_position_get
    if _newclass:position = _swig_property(_of.ofDragInfo_position_get, _of.ofDragInfo_position_set)
    def __init__(self): 
        this = _of.new_ofDragInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofDragInfo
    __del__ = lambda self : None;
ofDragInfo_swigregister = _of.ofDragInfo_swigregister
ofDragInfo_swigregister(ofDragInfo)

class ofEventArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofEventArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofEventArgs, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofEventArgs
    __del__ = lambda self : None;
ofEventArgs_swigregister = _of.ofEventArgs_swigregister
ofEventArgs_swigregister(ofEventArgs)

class ofEntryEventArgs(ofEventArgs):
    __swig_setmethods__ = {}
    for _s in [ofEventArgs]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofEntryEventArgs, name, value)
    __swig_getmethods__ = {}
    for _s in [ofEventArgs]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofEntryEventArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _of.ofEntryEventArgs_state_set
    __swig_getmethods__["state"] = _of.ofEntryEventArgs_state_get
    if _newclass:state = _swig_property(_of.ofEntryEventArgs_state_get, _of.ofEntryEventArgs_state_set)
    def __init__(self): 
        this = _of.new_ofEntryEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofEntryEventArgs
    __del__ = lambda self : None;
ofEntryEventArgs_swigregister = _of.ofEntryEventArgs_swigregister
ofEntryEventArgs_swigregister(ofEntryEventArgs)

class ofKeyEventArgs(ofEventArgs):
    __swig_setmethods__ = {}
    for _s in [ofEventArgs]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofKeyEventArgs, name, value)
    __swig_getmethods__ = {}
    for _s in [ofEventArgs]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofKeyEventArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _of.ofKeyEventArgs_key_set
    __swig_getmethods__["key"] = _of.ofKeyEventArgs_key_get
    if _newclass:key = _swig_property(_of.ofKeyEventArgs_key_get, _of.ofKeyEventArgs_key_set)
    def __init__(self): 
        this = _of.new_ofKeyEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofKeyEventArgs
    __del__ = lambda self : None;
ofKeyEventArgs_swigregister = _of.ofKeyEventArgs_swigregister
ofKeyEventArgs_swigregister(ofKeyEventArgs)

class ofMouseEventArgs(ofEventArgs):
    __swig_setmethods__ = {}
    for _s in [ofEventArgs]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMouseEventArgs, name, value)
    __swig_getmethods__ = {}
    for _s in [ofEventArgs]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofMouseEventArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _of.ofMouseEventArgs_x_set
    __swig_getmethods__["x"] = _of.ofMouseEventArgs_x_get
    if _newclass:x = _swig_property(_of.ofMouseEventArgs_x_get, _of.ofMouseEventArgs_x_set)
    __swig_setmethods__["y"] = _of.ofMouseEventArgs_y_set
    __swig_getmethods__["y"] = _of.ofMouseEventArgs_y_get
    if _newclass:y = _swig_property(_of.ofMouseEventArgs_y_get, _of.ofMouseEventArgs_y_set)
    __swig_setmethods__["button"] = _of.ofMouseEventArgs_button_set
    __swig_getmethods__["button"] = _of.ofMouseEventArgs_button_get
    if _newclass:button = _swig_property(_of.ofMouseEventArgs_button_get, _of.ofMouseEventArgs_button_set)
    def __init__(self): 
        this = _of.new_ofMouseEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofMouseEventArgs
    __del__ = lambda self : None;
ofMouseEventArgs_swigregister = _of.ofMouseEventArgs_swigregister
ofMouseEventArgs_swigregister(ofMouseEventArgs)

class ofTouchEventArgs(ofEventArgs):
    __swig_setmethods__ = {}
    for _s in [ofEventArgs]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTouchEventArgs, name, value)
    __swig_getmethods__ = {}
    for _s in [ofEventArgs]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofTouchEventArgs, name)
    __repr__ = _swig_repr
    down = _of.ofTouchEventArgs_down
    up = _of.ofTouchEventArgs_up
    move = _of.ofTouchEventArgs_move
    doubleTap = _of.ofTouchEventArgs_doubleTap
    cancel = _of.ofTouchEventArgs_cancel
    __swig_setmethods__["type"] = _of.ofTouchEventArgs_type_set
    __swig_getmethods__["type"] = _of.ofTouchEventArgs_type_get
    if _newclass:type = _swig_property(_of.ofTouchEventArgs_type_get, _of.ofTouchEventArgs_type_set)
    __swig_setmethods__["id"] = _of.ofTouchEventArgs_id_set
    __swig_getmethods__["id"] = _of.ofTouchEventArgs_id_get
    if _newclass:id = _swig_property(_of.ofTouchEventArgs_id_get, _of.ofTouchEventArgs_id_set)
    __swig_setmethods__["time"] = _of.ofTouchEventArgs_time_set
    __swig_getmethods__["time"] = _of.ofTouchEventArgs_time_get
    if _newclass:time = _swig_property(_of.ofTouchEventArgs_time_get, _of.ofTouchEventArgs_time_set)
    __swig_setmethods__["x"] = _of.ofTouchEventArgs_x_set
    __swig_getmethods__["x"] = _of.ofTouchEventArgs_x_get
    if _newclass:x = _swig_property(_of.ofTouchEventArgs_x_get, _of.ofTouchEventArgs_x_set)
    __swig_setmethods__["y"] = _of.ofTouchEventArgs_y_set
    __swig_getmethods__["y"] = _of.ofTouchEventArgs_y_get
    if _newclass:y = _swig_property(_of.ofTouchEventArgs_y_get, _of.ofTouchEventArgs_y_set)
    __swig_setmethods__["numTouches"] = _of.ofTouchEventArgs_numTouches_set
    __swig_getmethods__["numTouches"] = _of.ofTouchEventArgs_numTouches_get
    if _newclass:numTouches = _swig_property(_of.ofTouchEventArgs_numTouches_get, _of.ofTouchEventArgs_numTouches_set)
    __swig_setmethods__["width"] = _of.ofTouchEventArgs_width_set
    __swig_getmethods__["width"] = _of.ofTouchEventArgs_width_get
    if _newclass:width = _swig_property(_of.ofTouchEventArgs_width_get, _of.ofTouchEventArgs_width_set)
    __swig_setmethods__["height"] = _of.ofTouchEventArgs_height_set
    __swig_getmethods__["height"] = _of.ofTouchEventArgs_height_get
    if _newclass:height = _swig_property(_of.ofTouchEventArgs_height_get, _of.ofTouchEventArgs_height_set)
    __swig_setmethods__["angle"] = _of.ofTouchEventArgs_angle_set
    __swig_getmethods__["angle"] = _of.ofTouchEventArgs_angle_get
    if _newclass:angle = _swig_property(_of.ofTouchEventArgs_angle_get, _of.ofTouchEventArgs_angle_set)
    __swig_setmethods__["minoraxis"] = _of.ofTouchEventArgs_minoraxis_set
    __swig_getmethods__["minoraxis"] = _of.ofTouchEventArgs_minoraxis_get
    if _newclass:minoraxis = _swig_property(_of.ofTouchEventArgs_minoraxis_get, _of.ofTouchEventArgs_minoraxis_set)
    __swig_setmethods__["majoraxis"] = _of.ofTouchEventArgs_majoraxis_set
    __swig_getmethods__["majoraxis"] = _of.ofTouchEventArgs_majoraxis_get
    if _newclass:majoraxis = _swig_property(_of.ofTouchEventArgs_majoraxis_get, _of.ofTouchEventArgs_majoraxis_set)
    __swig_setmethods__["pressure"] = _of.ofTouchEventArgs_pressure_set
    __swig_getmethods__["pressure"] = _of.ofTouchEventArgs_pressure_get
    if _newclass:pressure = _swig_property(_of.ofTouchEventArgs_pressure_get, _of.ofTouchEventArgs_pressure_set)
    __swig_setmethods__["xspeed"] = _of.ofTouchEventArgs_xspeed_set
    __swig_getmethods__["xspeed"] = _of.ofTouchEventArgs_xspeed_get
    if _newclass:xspeed = _swig_property(_of.ofTouchEventArgs_xspeed_get, _of.ofTouchEventArgs_xspeed_set)
    __swig_setmethods__["yspeed"] = _of.ofTouchEventArgs_yspeed_set
    __swig_getmethods__["yspeed"] = _of.ofTouchEventArgs_yspeed_get
    if _newclass:yspeed = _swig_property(_of.ofTouchEventArgs_yspeed_get, _of.ofTouchEventArgs_yspeed_set)
    __swig_setmethods__["xaccel"] = _of.ofTouchEventArgs_xaccel_set
    __swig_getmethods__["xaccel"] = _of.ofTouchEventArgs_xaccel_get
    if _newclass:xaccel = _swig_property(_of.ofTouchEventArgs_xaccel_get, _of.ofTouchEventArgs_xaccel_set)
    __swig_setmethods__["yaccel"] = _of.ofTouchEventArgs_yaccel_set
    __swig_getmethods__["yaccel"] = _of.ofTouchEventArgs_yaccel_get
    if _newclass:yaccel = _swig_property(_of.ofTouchEventArgs_yaccel_get, _of.ofTouchEventArgs_yaccel_set)
    def __init__(self): 
        this = _of.new_ofTouchEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofTouchEventArgs
    __del__ = lambda self : None;
ofTouchEventArgs_swigregister = _of.ofTouchEventArgs_swigregister
ofTouchEventArgs_swigregister(ofTouchEventArgs)

class ofAudioEventArgs(ofEventArgs):
    __swig_setmethods__ = {}
    for _s in [ofEventArgs]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofAudioEventArgs, name, value)
    __swig_getmethods__ = {}
    for _s in [ofEventArgs]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofAudioEventArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer"] = _of.ofAudioEventArgs_buffer_set
    __swig_getmethods__["buffer"] = _of.ofAudioEventArgs_buffer_get
    if _newclass:buffer = _swig_property(_of.ofAudioEventArgs_buffer_get, _of.ofAudioEventArgs_buffer_set)
    __swig_setmethods__["bufferSize"] = _of.ofAudioEventArgs_bufferSize_set
    __swig_getmethods__["bufferSize"] = _of.ofAudioEventArgs_bufferSize_get
    if _newclass:bufferSize = _swig_property(_of.ofAudioEventArgs_bufferSize_get, _of.ofAudioEventArgs_bufferSize_set)
    __swig_setmethods__["nChannels"] = _of.ofAudioEventArgs_nChannels_set
    __swig_getmethods__["nChannels"] = _of.ofAudioEventArgs_nChannels_get
    if _newclass:nChannels = _swig_property(_of.ofAudioEventArgs_nChannels_get, _of.ofAudioEventArgs_nChannels_set)
    def __init__(self): 
        this = _of.new_ofAudioEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofAudioEventArgs
    __del__ = lambda self : None;
ofAudioEventArgs_swigregister = _of.ofAudioEventArgs_swigregister
ofAudioEventArgs_swigregister(ofAudioEventArgs)

class ofResizeEventArgs(ofEventArgs):
    __swig_setmethods__ = {}
    for _s in [ofEventArgs]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofResizeEventArgs, name, value)
    __swig_getmethods__ = {}
    for _s in [ofEventArgs]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofResizeEventArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _of.ofResizeEventArgs_width_set
    __swig_getmethods__["width"] = _of.ofResizeEventArgs_width_get
    if _newclass:width = _swig_property(_of.ofResizeEventArgs_width_get, _of.ofResizeEventArgs_width_set)
    __swig_setmethods__["height"] = _of.ofResizeEventArgs_height_set
    __swig_getmethods__["height"] = _of.ofResizeEventArgs_height_get
    if _newclass:height = _swig_property(_of.ofResizeEventArgs_height_get, _of.ofResizeEventArgs_height_set)
    def __init__(self): 
        this = _of.new_ofResizeEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofResizeEventArgs
    __del__ = lambda self : None;
ofResizeEventArgs_swigregister = _of.ofResizeEventArgs_swigregister
ofResizeEventArgs_swigregister(ofResizeEventArgs)

class ofMessage(ofEventArgs):
    __swig_setmethods__ = {}
    for _s in [ofEventArgs]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [ofEventArgs]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["message"] = _of.ofMessage_message_set
    __swig_getmethods__["message"] = _of.ofMessage_message_get
    if _newclass:message = _swig_property(_of.ofMessage_message_get, _of.ofMessage_message_set)
    __swig_destroy__ = _of.delete_ofMessage
    __del__ = lambda self : None;
ofMessage_swigregister = _of.ofMessage_swigregister
ofMessage_swigregister(ofMessage)

class ofCoreEvents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofCoreEvents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofCoreEvents, name)
    __repr__ = _swig_repr
    __swig_setmethods__["setup"] = _of.ofCoreEvents_setup_set
    __swig_getmethods__["setup"] = _of.ofCoreEvents_setup_get
    if _newclass:setup = _swig_property(_of.ofCoreEvents_setup_get, _of.ofCoreEvents_setup_set)
    __swig_setmethods__["update"] = _of.ofCoreEvents_update_set
    __swig_getmethods__["update"] = _of.ofCoreEvents_update_get
    if _newclass:update = _swig_property(_of.ofCoreEvents_update_get, _of.ofCoreEvents_update_set)
    __swig_setmethods__["draw"] = _of.ofCoreEvents_draw_set
    __swig_getmethods__["draw"] = _of.ofCoreEvents_draw_get
    if _newclass:draw = _swig_property(_of.ofCoreEvents_draw_get, _of.ofCoreEvents_draw_set)
    __swig_setmethods__["exit"] = _of.ofCoreEvents_exit_set
    __swig_getmethods__["exit"] = _of.ofCoreEvents_exit_get
    if _newclass:exit = _swig_property(_of.ofCoreEvents_exit_get, _of.ofCoreEvents_exit_set)
    __swig_setmethods__["windowEntered"] = _of.ofCoreEvents_windowEntered_set
    __swig_getmethods__["windowEntered"] = _of.ofCoreEvents_windowEntered_get
    if _newclass:windowEntered = _swig_property(_of.ofCoreEvents_windowEntered_get, _of.ofCoreEvents_windowEntered_set)
    __swig_setmethods__["windowResized"] = _of.ofCoreEvents_windowResized_set
    __swig_getmethods__["windowResized"] = _of.ofCoreEvents_windowResized_get
    if _newclass:windowResized = _swig_property(_of.ofCoreEvents_windowResized_get, _of.ofCoreEvents_windowResized_set)
    __swig_setmethods__["keyPressed"] = _of.ofCoreEvents_keyPressed_set
    __swig_getmethods__["keyPressed"] = _of.ofCoreEvents_keyPressed_get
    if _newclass:keyPressed = _swig_property(_of.ofCoreEvents_keyPressed_get, _of.ofCoreEvents_keyPressed_set)
    __swig_setmethods__["keyReleased"] = _of.ofCoreEvents_keyReleased_set
    __swig_getmethods__["keyReleased"] = _of.ofCoreEvents_keyReleased_get
    if _newclass:keyReleased = _swig_property(_of.ofCoreEvents_keyReleased_get, _of.ofCoreEvents_keyReleased_set)
    __swig_setmethods__["mouseMoved"] = _of.ofCoreEvents_mouseMoved_set
    __swig_getmethods__["mouseMoved"] = _of.ofCoreEvents_mouseMoved_get
    if _newclass:mouseMoved = _swig_property(_of.ofCoreEvents_mouseMoved_get, _of.ofCoreEvents_mouseMoved_set)
    __swig_setmethods__["mouseDragged"] = _of.ofCoreEvents_mouseDragged_set
    __swig_getmethods__["mouseDragged"] = _of.ofCoreEvents_mouseDragged_get
    if _newclass:mouseDragged = _swig_property(_of.ofCoreEvents_mouseDragged_get, _of.ofCoreEvents_mouseDragged_set)
    __swig_setmethods__["mousePressed"] = _of.ofCoreEvents_mousePressed_set
    __swig_getmethods__["mousePressed"] = _of.ofCoreEvents_mousePressed_get
    if _newclass:mousePressed = _swig_property(_of.ofCoreEvents_mousePressed_get, _of.ofCoreEvents_mousePressed_set)
    __swig_setmethods__["mouseReleased"] = _of.ofCoreEvents_mouseReleased_set
    __swig_getmethods__["mouseReleased"] = _of.ofCoreEvents_mouseReleased_get
    if _newclass:mouseReleased = _swig_property(_of.ofCoreEvents_mouseReleased_get, _of.ofCoreEvents_mouseReleased_set)
    __swig_setmethods__["audioReceived"] = _of.ofCoreEvents_audioReceived_set
    __swig_getmethods__["audioReceived"] = _of.ofCoreEvents_audioReceived_get
    if _newclass:audioReceived = _swig_property(_of.ofCoreEvents_audioReceived_get, _of.ofCoreEvents_audioReceived_set)
    __swig_setmethods__["audioRequested"] = _of.ofCoreEvents_audioRequested_set
    __swig_getmethods__["audioRequested"] = _of.ofCoreEvents_audioRequested_get
    if _newclass:audioRequested = _swig_property(_of.ofCoreEvents_audioRequested_get, _of.ofCoreEvents_audioRequested_set)
    __swig_setmethods__["touchDown"] = _of.ofCoreEvents_touchDown_set
    __swig_getmethods__["touchDown"] = _of.ofCoreEvents_touchDown_get
    if _newclass:touchDown = _swig_property(_of.ofCoreEvents_touchDown_get, _of.ofCoreEvents_touchDown_set)
    __swig_setmethods__["touchUp"] = _of.ofCoreEvents_touchUp_set
    __swig_getmethods__["touchUp"] = _of.ofCoreEvents_touchUp_get
    if _newclass:touchUp = _swig_property(_of.ofCoreEvents_touchUp_get, _of.ofCoreEvents_touchUp_set)
    __swig_setmethods__["touchMoved"] = _of.ofCoreEvents_touchMoved_set
    __swig_getmethods__["touchMoved"] = _of.ofCoreEvents_touchMoved_get
    if _newclass:touchMoved = _swig_property(_of.ofCoreEvents_touchMoved_get, _of.ofCoreEvents_touchMoved_set)
    __swig_setmethods__["touchDoubleTap"] = _of.ofCoreEvents_touchDoubleTap_set
    __swig_getmethods__["touchDoubleTap"] = _of.ofCoreEvents_touchDoubleTap_get
    if _newclass:touchDoubleTap = _swig_property(_of.ofCoreEvents_touchDoubleTap_get, _of.ofCoreEvents_touchDoubleTap_set)
    __swig_setmethods__["touchCancelled"] = _of.ofCoreEvents_touchCancelled_set
    __swig_getmethods__["touchCancelled"] = _of.ofCoreEvents_touchCancelled_get
    if _newclass:touchCancelled = _swig_property(_of.ofCoreEvents_touchCancelled_get, _of.ofCoreEvents_touchCancelled_set)
    __swig_setmethods__["messageEvent"] = _of.ofCoreEvents_messageEvent_set
    __swig_getmethods__["messageEvent"] = _of.ofCoreEvents_messageEvent_get
    if _newclass:messageEvent = _swig_property(_of.ofCoreEvents_messageEvent_get, _of.ofCoreEvents_messageEvent_set)
    __swig_setmethods__["fileDragEvent"] = _of.ofCoreEvents_fileDragEvent_set
    __swig_getmethods__["fileDragEvent"] = _of.ofCoreEvents_fileDragEvent_get
    if _newclass:fileDragEvent = _swig_property(_of.ofCoreEvents_fileDragEvent_get, _of.ofCoreEvents_fileDragEvent_set)
    def disable(self): return _of.ofCoreEvents_disable(self)
    def enable(self): return _of.ofCoreEvents_enable(self)
    def __init__(self): 
        this = _of.new_ofCoreEvents()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofCoreEvents
    __del__ = lambda self : None;
ofCoreEvents_swigregister = _of.ofCoreEvents_swigregister
ofCoreEvents_swigregister(ofCoreEvents)


def ofSendMessage(*args):
  return _of.ofSendMessage(*args)
ofSendMessage = _of.ofSendMessage

def ofEvents():
  return _of.ofEvents()
ofEvents = _of.ofEvents

def ofNotifySetup():
  return _of.ofNotifySetup()
ofNotifySetup = _of.ofNotifySetup

def ofNotifyUpdate():
  return _of.ofNotifyUpdate()
ofNotifyUpdate = _of.ofNotifyUpdate

def ofNotifyDraw():
  return _of.ofNotifyDraw()
ofNotifyDraw = _of.ofNotifyDraw

def ofNotifyKeyPressed(*args):
  return _of.ofNotifyKeyPressed(*args)
ofNotifyKeyPressed = _of.ofNotifyKeyPressed

def ofNotifyKeyReleased(*args):
  return _of.ofNotifyKeyReleased(*args)
ofNotifyKeyReleased = _of.ofNotifyKeyReleased

def ofNotifyMousePressed(*args):
  return _of.ofNotifyMousePressed(*args)
ofNotifyMousePressed = _of.ofNotifyMousePressed

def ofNotifyMouseReleased(*args):
  return _of.ofNotifyMouseReleased(*args)
ofNotifyMouseReleased = _of.ofNotifyMouseReleased

def ofNotifyMouseDragged(*args):
  return _of.ofNotifyMouseDragged(*args)
ofNotifyMouseDragged = _of.ofNotifyMouseDragged

def ofNotifyMouseMoved(*args):
  return _of.ofNotifyMouseMoved(*args)
ofNotifyMouseMoved = _of.ofNotifyMouseMoved

def ofNotifyExit():
  return _of.ofNotifyExit()
ofNotifyExit = _of.ofNotifyExit

def ofNotifyWindowResized(*args):
  return _of.ofNotifyWindowResized(*args)
ofNotifyWindowResized = _of.ofNotifyWindowResized

def ofNotifyWindowEntry(*args):
  return _of.ofNotifyWindowEntry(*args)
ofNotifyWindowEntry = _of.ofNotifyWindowEntry

def ofNotifyDragEvent(*args):
  return _of.ofNotifyDragEvent(*args)
ofNotifyDragEvent = _of.ofNotifyDragEvent
class ofNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofNode, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofNode
    __del__ = lambda self : None;
    def setParent(self, *args): return _of.ofNode_setParent(self, *args)
    def clearParent(self): return _of.ofNode_clearParent(self)
    def getParent(self): return _of.ofNode_getParent(self)
    def getPosition(self): return _of.ofNode_getPosition(self)
    def getX(self): return _of.ofNode_getX(self)
    def getY(self): return _of.ofNode_getY(self)
    def getZ(self): return _of.ofNode_getZ(self)
    def getXAxis(self): return _of.ofNode_getXAxis(self)
    def getYAxis(self): return _of.ofNode_getYAxis(self)
    def getZAxis(self): return _of.ofNode_getZAxis(self)
    def getSideDir(self): return _of.ofNode_getSideDir(self)
    def getLookAtDir(self): return _of.ofNode_getLookAtDir(self)
    def getUpDir(self): return _of.ofNode_getUpDir(self)
    def getPitch(self): return _of.ofNode_getPitch(self)
    def getHeading(self): return _of.ofNode_getHeading(self)
    def getRoll(self): return _of.ofNode_getRoll(self)
    def getOrientationQuat(self): return _of.ofNode_getOrientationQuat(self)
    def getOrientationEuler(self): return _of.ofNode_getOrientationEuler(self)
    def getScale(self): return _of.ofNode_getScale(self)
    def getLocalTransformMatrix(self): return _of.ofNode_getLocalTransformMatrix(self)
    def getGlobalTransformMatrix(self): return _of.ofNode_getGlobalTransformMatrix(self)
    def getGlobalPosition(self): return _of.ofNode_getGlobalPosition(self)
    def getGlobalOrientation(self): return _of.ofNode_getGlobalOrientation(self)
    def getGlobalScale(self): return _of.ofNode_getGlobalScale(self)
    def setTransformMatrix(self, *args): return _of.ofNode_setTransformMatrix(self, *args)
    def setPosition(self, *args): return _of.ofNode_setPosition(self, *args)
    def setGlobalPosition(self, *args): return _of.ofNode_setGlobalPosition(self, *args)
    def setOrientation(self, *args): return _of.ofNode_setOrientation(self, *args)
    def setGlobalOrientation(self, *args): return _of.ofNode_setGlobalOrientation(self, *args)
    def setScale(self, *args): return _of.ofNode_setScale(self, *args)
    def move(self, *args): return _of.ofNode_move(self, *args)
    def truck(self, *args): return _of.ofNode_truck(self, *args)
    def boom(self, *args): return _of.ofNode_boom(self, *args)
    def dolly(self, *args): return _of.ofNode_dolly(self, *args)
    def tilt(self, *args): return _of.ofNode_tilt(self, *args)
    def pan(self, *args): return _of.ofNode_pan(self, *args)
    def roll(self, *args): return _of.ofNode_roll(self, *args)
    def rotate(self, *args): return _of.ofNode_rotate(self, *args)
    def rotateAround(self, *args): return _of.ofNode_rotateAround(self, *args)
    def lookAt(self, *args): return _of.ofNode_lookAt(self, *args)
    def orbit(self, *args): return _of.ofNode_orbit(self, *args)
    def transformGL(self): return _of.ofNode_transformGL(self)
    def restoreTransformGL(self): return _of.ofNode_restoreTransformGL(self)
    def resetTransform(self): return _of.ofNode_resetTransform(self)
    def customDraw(self): return _of.ofNode_customDraw(self)
    def draw(self): return _of.ofNode_draw(self)
ofNode_swigregister = _of.ofNode_swigregister
ofNode_swigregister(ofNode)


def ofDrawAxis(*args):
  return _of.ofDrawAxis(*args)
ofDrawAxis = _of.ofDrawAxis

def ofDrawGrid(scale=10.0, ticks=8.0, labels=False, x=True, y=True, z=True):
  return _of.ofDrawGrid(scale, ticks, labels, x, y, z)
ofDrawGrid = _of.ofDrawGrid

def ofDrawGridPlane(*args):
  return _of.ofDrawGridPlane(*args)
ofDrawGridPlane = _of.ofDrawGridPlane

def ofDrawArrow(*args):
  return _of.ofDrawArrow(*args)
ofDrawArrow = _of.ofDrawArrow

def ofDrawRotationAxes(*args):
  return _of.ofDrawRotationAxes(*args)
ofDrawRotationAxes = _of.ofDrawRotationAxes
class ofCamera(ofNode):
    __swig_setmethods__ = {}
    for _s in [ofNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofCamera, name, value)
    __swig_getmethods__ = {}
    for _s in [ofNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofCamera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofCamera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofCamera
    __del__ = lambda self : None;
    def setFov(self, *args): return _of.ofCamera_setFov(self, *args)
    def setNearClip(self, *args): return _of.ofCamera_setNearClip(self, *args)
    def setFarClip(self, *args): return _of.ofCamera_setFarClip(self, *args)
    def setLensOffset(self, *args): return _of.ofCamera_setLensOffset(self, *args)
    def setAspectRatio(self, *args): return _of.ofCamera_setAspectRatio(self, *args)
    def setForceAspectRatio(self, *args): return _of.ofCamera_setForceAspectRatio(self, *args)
    def getFov(self): return _of.ofCamera_getFov(self)
    def getNearClip(self): return _of.ofCamera_getNearClip(self)
    def getFarClip(self): return _of.ofCamera_getFarClip(self)
    def getLensOffset(self): return _of.ofCamera_getLensOffset(self)
    def getForceAspectRatio(self): return _of.ofCamera_getForceAspectRatio(self)
    def getAspectRatio(self): return _of.ofCamera_getAspectRatio(self)
    def setupPerspective(self, *args): return _of.ofCamera_setupPerspective(self, *args)
    def setupOffAxisViewPortal(self, *args): return _of.ofCamera_setupOffAxisViewPortal(self, *args)
    def enableOrtho(self): return _of.ofCamera_enableOrtho(self)
    def disableOrtho(self): return _of.ofCamera_disableOrtho(self)
    def getOrtho(self): return _of.ofCamera_getOrtho(self)
    def getImagePlaneDistance(self, *args): return _of.ofCamera_getImagePlaneDistance(self, *args)
    def begin(self, *args): return _of.ofCamera_begin(self, *args)
    def end_(self): return _of.ofCamera_end_(self)
    def getProjectionMatrix(self, *args): return _of.ofCamera_getProjectionMatrix(self, *args)
    def getModelViewMatrix(self): return _of.ofCamera_getModelViewMatrix(self)
    def getModelViewProjectionMatrix(self, *args): return _of.ofCamera_getModelViewProjectionMatrix(self, *args)
    def worldToScreen(self, *args): return _of.ofCamera_worldToScreen(self, *args)
    def screenToWorld(self, *args): return _of.ofCamera_screenToWorld(self, *args)
    def worldToCamera(self, *args): return _of.ofCamera_worldToCamera(self, *args)
    def cameraToWorld(self, *args): return _of.ofCamera_cameraToWorld(self, *args)
ofCamera_swigregister = _of.ofCamera_swigregister
ofCamera_swigregister(ofCamera)

class ofEasyCam(ofCamera):
    __swig_setmethods__ = {}
    for _s in [ofCamera]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofEasyCam, name, value)
    __swig_getmethods__ = {}
    for _s in [ofCamera]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofEasyCam, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofEasyCam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofEasyCam
    __del__ = lambda self : None;
    def begin(self, *args): return _of.ofEasyCam_begin(self, *args)
    def reset(self): return _of.ofEasyCam_reset(self)
    def setTarget(self, *args): return _of.ofEasyCam_setTarget(self, *args)
    def getTarget(self): return _of.ofEasyCam_getTarget(self)
    def setDistance(self, *args): return _of.ofEasyCam_setDistance(self, *args)
    def getDistance(self): return _of.ofEasyCam_getDistance(self)
    def setDrag(self, *args): return _of.ofEasyCam_setDrag(self, *args)
    def getDrag(self): return _of.ofEasyCam_getDrag(self)
    def setTranslationKey(self, *args): return _of.ofEasyCam_setTranslationKey(self, *args)
    def getTranslationKey(self): return _of.ofEasyCam_getTranslationKey(self)
    def enableMouseInput(self): return _of.ofEasyCam_enableMouseInput(self)
    def disableMouseInput(self): return _of.ofEasyCam_disableMouseInput(self)
    def getMouseInputEnabled(self): return _of.ofEasyCam_getMouseInputEnabled(self)
    def enableMouseMiddleButton(self): return _of.ofEasyCam_enableMouseMiddleButton(self)
    def disableMouseMiddleButton(self): return _of.ofEasyCam_disableMouseMiddleButton(self)
    def getMouseMiddleButtonEnabled(self): return _of.ofEasyCam_getMouseMiddleButtonEnabled(self)
    def setAutoDistance(self, *args): return _of.ofEasyCam_setAutoDistance(self, *args)
ofEasyCam_swigregister = _of.ofEasyCam_swigregister
ofEasyCam_swigregister(ofEasyCam)

class ofMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofMesh
    __del__ = lambda self : None;
    def setMode(self, *args): return _of.ofMesh_setMode(self, *args)
    def getMode(self): return _of.ofMesh_getMode(self)
    def clear(self): return _of.ofMesh_clear(self)
    def setupIndicesAuto(self): return _of.ofMesh_setupIndicesAuto(self)
    def getVertex(self, *args): return _of.ofMesh_getVertex(self, *args)
    def addVertex(self, *args): return _of.ofMesh_addVertex(self, *args)
    def addVertices(self, *args): return _of.ofMesh_addVertices(self, *args)
    def removeVertex(self, *args): return _of.ofMesh_removeVertex(self, *args)
    def setVertex(self, *args): return _of.ofMesh_setVertex(self, *args)
    def clearVertices(self): return _of.ofMesh_clearVertices(self)
    def getNormal(self, *args): return _of.ofMesh_getNormal(self, *args)
    def addNormal(self, *args): return _of.ofMesh_addNormal(self, *args)
    def addNormals(self, *args): return _of.ofMesh_addNormals(self, *args)
    def removeNormal(self, *args): return _of.ofMesh_removeNormal(self, *args)
    def setNormal(self, *args): return _of.ofMesh_setNormal(self, *args)
    def clearNormals(self): return _of.ofMesh_clearNormals(self)
    def getColor(self, *args): return _of.ofMesh_getColor(self, *args)
    def addColor(self, *args): return _of.ofMesh_addColor(self, *args)
    def addColors(self, *args): return _of.ofMesh_addColors(self, *args)
    def removeColor(self, *args): return _of.ofMesh_removeColor(self, *args)
    def setColor(self, *args): return _of.ofMesh_setColor(self, *args)
    def clearColors(self): return _of.ofMesh_clearColors(self)
    def getTexCoord(self, *args): return _of.ofMesh_getTexCoord(self, *args)
    def addTexCoord(self, *args): return _of.ofMesh_addTexCoord(self, *args)
    def addTexCoords(self, *args): return _of.ofMesh_addTexCoords(self, *args)
    def removeTexCoord(self, *args): return _of.ofMesh_removeTexCoord(self, *args)
    def setTexCoord(self, *args): return _of.ofMesh_setTexCoord(self, *args)
    def clearTexCoords(self): return _of.ofMesh_clearTexCoords(self)
    def getIndex(self, *args): return _of.ofMesh_getIndex(self, *args)
    def addIndex(self, *args): return _of.ofMesh_addIndex(self, *args)
    def addIndices(self, *args): return _of.ofMesh_addIndices(self, *args)
    def removeIndex(self, *args): return _of.ofMesh_removeIndex(self, *args)
    def setIndex(self, *args): return _of.ofMesh_setIndex(self, *args)
    def clearIndices(self): return _of.ofMesh_clearIndices(self)
    def addTriangle(self, *args): return _of.ofMesh_addTriangle(self, *args)
    def getNumVertices(self): return _of.ofMesh_getNumVertices(self)
    def getNumColors(self): return _of.ofMesh_getNumColors(self)
    def getNumNormals(self): return _of.ofMesh_getNumNormals(self)
    def getNumTexCoords(self): return _of.ofMesh_getNumTexCoords(self)
    def getNumIndices(self): return _of.ofMesh_getNumIndices(self)
    def getVerticesPointer(self, *args): return _of.ofMesh_getVerticesPointer(self, *args)
    def getColorsPointer(self, *args): return _of.ofMesh_getColorsPointer(self, *args)
    def getNormalsPointer(self, *args): return _of.ofMesh_getNormalsPointer(self, *args)
    def getTexCoordsPointer(self, *args): return _of.ofMesh_getTexCoordsPointer(self, *args)
    def getIndexPointer(self, *args): return _of.ofMesh_getIndexPointer(self, *args)
    def getVertices(self, *args): return _of.ofMesh_getVertices(self, *args)
    def getColors(self, *args): return _of.ofMesh_getColors(self, *args)
    def getNormals(self, *args): return _of.ofMesh_getNormals(self, *args)
    def getTexCoords(self, *args): return _of.ofMesh_getTexCoords(self, *args)
    def getIndices(self, *args): return _of.ofMesh_getIndices(self, *args)
    def getCentroid(self): return _of.ofMesh_getCentroid(self)
    def setName(self, *args): return _of.ofMesh_setName(self, *args)
    def haveVertsChanged(self): return _of.ofMesh_haveVertsChanged(self)
    def haveColorsChanged(self): return _of.ofMesh_haveColorsChanged(self)
    def haveNormalsChanged(self): return _of.ofMesh_haveNormalsChanged(self)
    def haveTexCoordsChanged(self): return _of.ofMesh_haveTexCoordsChanged(self)
    def haveIndicesChanged(self): return _of.ofMesh_haveIndicesChanged(self)
    def hasVertices(self): return _of.ofMesh_hasVertices(self)
    def hasColors(self): return _of.ofMesh_hasColors(self)
    def hasNormals(self): return _of.ofMesh_hasNormals(self)
    def hasTexCoords(self): return _of.ofMesh_hasTexCoords(self)
    def hasIndices(self): return _of.ofMesh_hasIndices(self)
    def drawVertices(self): return _of.ofMesh_drawVertices(self)
    def drawWireframe(self): return _of.ofMesh_drawWireframe(self)
    def drawFaces(self): return _of.ofMesh_drawFaces(self)
    def draw(self): return _of.ofMesh_draw(self)
    def load(self, *args): return _of.ofMesh_load(self, *args)
    def save(self, *args): return _of.ofMesh_save(self, *args)
    def enableColors(self): return _of.ofMesh_enableColors(self)
    def enableTextures(self): return _of.ofMesh_enableTextures(self)
    def enableNormals(self): return _of.ofMesh_enableNormals(self)
    def enableIndices(self): return _of.ofMesh_enableIndices(self)
    def disableColors(self): return _of.ofMesh_disableColors(self)
    def disableTextures(self): return _of.ofMesh_disableTextures(self)
    def disableNormals(self): return _of.ofMesh_disableNormals(self)
    def disableIndices(self): return _of.ofMesh_disableIndices(self)
    def usingColors(self): return _of.ofMesh_usingColors(self)
    def usingTextures(self): return _of.ofMesh_usingTextures(self)
    def usingNormals(self): return _of.ofMesh_usingNormals(self)
    def usingIndices(self): return _of.ofMesh_usingIndices(self)
ofMesh_swigregister = _of.ofMesh_swigregister
ofMesh_swigregister(ofMesh)

class ofFbo(ofBaseDraws,ofBaseHasTexture):
    __swig_setmethods__ = {}
    for _s in [ofBaseDraws,ofBaseHasTexture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFbo, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseDraws,ofBaseHasTexture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofFbo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofFbo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofFbo
    __del__ = lambda self : None;
    def allocate(self, *args): return _of.ofFbo_allocate(self, *args)
    def isAllocated(self): return _of.ofFbo_isAllocated(self)
    def draw(self, *args): return _of.ofFbo_draw(self, *args)
    def setAnchorPercent(self, *args): return _of.ofFbo_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _of.ofFbo_setAnchorPoint(self, *args)
    def resetAnchor(self): return _of.ofFbo_resetAnchor(self)
    def setDefaultTextureIndex(self, *args): return _of.ofFbo_setDefaultTextureIndex(self, *args)
    def getDefaultTextureIndex(self): return _of.ofFbo_getDefaultTextureIndex(self)
    def getTextureReference(self, *args): return _of.ofFbo_getTextureReference(self, *args)
    def getDepthTexture(self): return _of.ofFbo_getDepthTexture(self)
    def setUseTexture(self, *args): return _of.ofFbo_setUseTexture(self, *args)
    def begin(self, setupScreen=True): return _of.ofFbo_begin(self, setupScreen)
    def end_(self): return _of.ofFbo_end_(self)
    def readToPixels(self, *args): return _of.ofFbo_readToPixels(self, *args)
    def getWidth(self): return _of.ofFbo_getWidth(self)
    def getHeight(self): return _of.ofFbo_getHeight(self)
    def bind(self): return _of.ofFbo_bind(self)
    def unbind(self): return _of.ofFbo_unbind(self)
    def getNumTextures(self): return _of.ofFbo_getNumTextures(self)
    def setActiveDrawBuffer(self, *args): return _of.ofFbo_setActiveDrawBuffer(self, *args)
    def setActiveDrawBuffers(self, *args): return _of.ofFbo_setActiveDrawBuffers(self, *args)
    def activateAllDrawBuffers(self): return _of.ofFbo_activateAllDrawBuffers(self)
    def getFbo(self): return _of.ofFbo_getFbo(self)
    __swig_getmethods__["checkGLSupport"] = lambda x: _of.ofFbo_checkGLSupport
    if _newclass:checkGLSupport = staticmethod(_of.ofFbo_checkGLSupport)
    __swig_getmethods__["maxColorAttachments"] = lambda x: _of.ofFbo_maxColorAttachments
    if _newclass:maxColorAttachments = staticmethod(_of.ofFbo_maxColorAttachments)
    __swig_getmethods__["maxDrawBuffers"] = lambda x: _of.ofFbo_maxDrawBuffers
    if _newclass:maxDrawBuffers = staticmethod(_of.ofFbo_maxDrawBuffers)
    __swig_getmethods__["maxSamples"] = lambda x: _of.ofFbo_maxSamples
    if _newclass:maxSamples = staticmethod(_of.ofFbo_maxSamples)
    def getDepthBuffer(self): return _of.ofFbo_getDepthBuffer(self)
    def getStencilBuffer(self): return _of.ofFbo_getStencilBuffer(self)
ofFbo_swigregister = _of.ofFbo_swigregister
ofFbo_swigregister(ofFbo)

def ofFbo_checkGLSupport():
  return _of.ofFbo_checkGLSupport()
ofFbo_checkGLSupport = _of.ofFbo_checkGLSupport

def ofFbo_maxColorAttachments():
  return _of.ofFbo_maxColorAttachments()
ofFbo_maxColorAttachments = _of.ofFbo_maxColorAttachments

def ofFbo_maxDrawBuffers():
  return _of.ofFbo_maxDrawBuffers()
ofFbo_maxDrawBuffers = _of.ofFbo_maxDrawBuffers

def ofFbo_maxSamples():
  return _of.ofFbo_maxSamples()
ofFbo_maxSamples = _of.ofFbo_maxSamples

OF_PRIMITIVE_TRIANGLES = _of.OF_PRIMITIVE_TRIANGLES
OF_PRIMITIVE_TRIANGLE_STRIP = _of.OF_PRIMITIVE_TRIANGLE_STRIP
OF_PRIMITIVE_TRIANGLE_FAN = _of.OF_PRIMITIVE_TRIANGLE_FAN
OF_PRIMITIVE_LINES = _of.OF_PRIMITIVE_LINES
OF_PRIMITIVE_LINE_STRIP = _of.OF_PRIMITIVE_LINE_STRIP
OF_PRIMITIVE_LINE_LOOP = _of.OF_PRIMITIVE_LINE_LOOP
OF_PRIMITIVE_POINTS = _of.OF_PRIMITIVE_POINTS
OF_TRIANGLES_MODE = _of.OF_TRIANGLES_MODE
OF_TRIANGLE_STRIP_MODE = _of.OF_TRIANGLE_STRIP_MODE
OF_TRIANGLE_FAN_MODE = _of.OF_TRIANGLE_FAN_MODE
OF_LINES_MODE = _of.OF_LINES_MODE
OF_LINE_STRIP_MODE = _of.OF_LINE_STRIP_MODE
OF_LINE_LOOP_MODE = _of.OF_LINE_LOOP_MODE
OF_POINTS_MODE = _of.OF_POINTS_MODE
OF_MESH_POINTS = _of.OF_MESH_POINTS
OF_MESH_WIREFRAME = _of.OF_MESH_WIREFRAME
OF_MESH_FILL = _of.OF_MESH_FILL

def ofGetGLPolyMode(*args):
  return _of.ofGetGLPolyMode(*args)
ofGetGLPolyMode = _of.ofGetGLPolyMode

def ofGetOFPolyMode(*args):
  return _of.ofGetOFPolyMode(*args)
ofGetOFPolyMode = _of.ofGetOFPolyMode

def ofGetGLPrimitiveMode(*args):
  return _of.ofGetGLPrimitiveMode(*args)
ofGetGLPrimitiveMode = _of.ofGetGLPrimitiveMode

def ofGetOFPrimitiveMode(*args):
  return _of.ofGetOFPrimitiveMode(*args)
ofGetOFPrimitiveMode = _of.ofGetOFPrimitiveMode

def ofGetGLTypeFromPixelFormat(*args):
  return _of.ofGetGLTypeFromPixelFormat(*args)
ofGetGLTypeFromPixelFormat = _of.ofGetGLTypeFromPixelFormat
OF_MAX_LIGHTS = _of.OF_MAX_LIGHTS
OF_LIGHT_POINT = _of.OF_LIGHT_POINT
OF_LIGHT_SPOT = _of.OF_LIGHT_SPOT
OF_LIGHT_DIRECTIONAL = _of.OF_LIGHT_DIRECTIONAL

def ofEnableLighting():
  return _of.ofEnableLighting()
ofEnableLighting = _of.ofEnableLighting

def ofDisableLighting():
  return _of.ofDisableLighting()
ofDisableLighting = _of.ofDisableLighting

def ofEnableSeparateSpecularLight():
  return _of.ofEnableSeparateSpecularLight()
ofEnableSeparateSpecularLight = _of.ofEnableSeparateSpecularLight

def ofDisableSeparateSpecularLight():
  return _of.ofDisableSeparateSpecularLight()
ofDisableSeparateSpecularLight = _of.ofDisableSeparateSpecularLight

def ofGetLightingEnabled():
  return _of.ofGetLightingEnabled()
ofGetLightingEnabled = _of.ofGetLightingEnabled

def ofSetSmoothLighting(*args):
  return _of.ofSetSmoothLighting(*args)
ofSetSmoothLighting = _of.ofSetSmoothLighting

def ofSetGlobalAmbientColor(*args):
  return _of.ofSetGlobalAmbientColor(*args)
ofSetGlobalAmbientColor = _of.ofSetGlobalAmbientColor
class ofLight(ofNode):
    __swig_setmethods__ = {}
    for _s in [ofNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofLight, name, value)
    __swig_getmethods__ = {}
    for _s in [ofNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofLight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofLight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofLight
    __del__ = lambda self : None;
    def destroy(self): return _of.ofLight_destroy(self)
    def setup(self): return _of.ofLight_setup(self)
    def enable(self): return _of.ofLight_enable(self)
    def disable(self): return _of.ofLight_disable(self)
    def getIsEnabled(self): return _of.ofLight_getIsEnabled(self)
    def setDirectional(self): return _of.ofLight_setDirectional(self)
    def getIsDirectional(self): return _of.ofLight_getIsDirectional(self)
    def setSpotlight(self, spotCutOff=45., exponent=0.): return _of.ofLight_setSpotlight(self, spotCutOff, exponent)
    def getIsSpotlight(self): return _of.ofLight_getIsSpotlight(self)
    def setSpotlightCutOff(self, *args): return _of.ofLight_setSpotlightCutOff(self, *args)
    def getSpotlightCutOff(self): return _of.ofLight_getSpotlightCutOff(self)
    def setSpotConcentration(self, *args): return _of.ofLight_setSpotConcentration(self, *args)
    def getSpotConcentration(self): return _of.ofLight_getSpotConcentration(self)
    def setPointLight(self): return _of.ofLight_setPointLight(self)
    def getIsPointLight(self): return _of.ofLight_getIsPointLight(self)
    def setAttenuation(self, constant=1., linear=0., quadratic=0.): return _of.ofLight_setAttenuation(self, constant, linear, quadratic)
    def getAttenuationConstant(self): return _of.ofLight_getAttenuationConstant(self)
    def getAttenuationLinear(self): return _of.ofLight_getAttenuationLinear(self)
    def getAttenuationQuadratic(self): return _of.ofLight_getAttenuationQuadratic(self)
    def getType(self): return _of.ofLight_getType(self)
    def setAmbientColor(self, *args): return _of.ofLight_setAmbientColor(self, *args)
    def setDiffuseColor(self, *args): return _of.ofLight_setDiffuseColor(self, *args)
    def setSpecularColor(self, *args): return _of.ofLight_setSpecularColor(self, *args)
    def getAmbientColor(self): return _of.ofLight_getAmbientColor(self)
    def getDiffuseColor(self): return _of.ofLight_getDiffuseColor(self)
    def getSpecularColor(self): return _of.ofLight_getSpecularColor(self)
    def getLightID(self): return _of.ofLight_getLightID(self)
    def customDraw(self): return _of.ofLight_customDraw(self)
ofLight_swigregister = _of.ofLight_swigregister
ofLight_swigregister(ofLight)

class ofMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMaterial, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofMaterial()
        try: self.this.append(this)
        except: self.this = this
    def setColors(self, *args): return _of.ofMaterial_setColors(self, *args)
    def setDiffuseColor(self, *args): return _of.ofMaterial_setDiffuseColor(self, *args)
    def setAmbientColor(self, *args): return _of.ofMaterial_setAmbientColor(self, *args)
    def setSpecularColor(self, *args): return _of.ofMaterial_setSpecularColor(self, *args)
    def setEmissiveColor(self, *args): return _of.ofMaterial_setEmissiveColor(self, *args)
    def setShininess(self, *args): return _of.ofMaterial_setShininess(self, *args)
    def getDiffuseColor(self): return _of.ofMaterial_getDiffuseColor(self)
    def getAmbientColor(self): return _of.ofMaterial_getAmbientColor(self)
    def getSpecularColor(self): return _of.ofMaterial_getSpecularColor(self)
    def getEmissiveColor(self): return _of.ofMaterial_getEmissiveColor(self)
    def getShininess(self): return _of.ofMaterial_getShininess(self)
    def begin(self): return _of.ofMaterial_begin(self)
    def end_(self): return _of.ofMaterial_end_(self)
    __swig_destroy__ = _of.delete_ofMaterial
    __del__ = lambda self : None;
ofMaterial_swigregister = _of.ofMaterial_swigregister
ofMaterial_swigregister(ofMaterial)

class ofShader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofShader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofShader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofShader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofShader
    __del__ = lambda self : None;
    def load(self, *args): return _of.ofShader_load(self, *args)
    def setGeometryInputType(self, *args): return _of.ofShader_setGeometryInputType(self, *args)
    def setGeometryOutputType(self, *args): return _of.ofShader_setGeometryOutputType(self, *args)
    def setGeometryOutputCount(self, *args): return _of.ofShader_setGeometryOutputCount(self, *args)
    def getGeometryMaxOutputCount(self): return _of.ofShader_getGeometryMaxOutputCount(self)
    def unload(self): return _of.ofShader_unload(self)
    def begin(self): return _of.ofShader_begin(self)
    def end_(self): return _of.ofShader_end_(self)
    def setUniformTexture(self, *args): return _of.ofShader_setUniformTexture(self, *args)
    def setUniform1i(self, *args): return _of.ofShader_setUniform1i(self, *args)
    def setUniform2i(self, *args): return _of.ofShader_setUniform2i(self, *args)
    def setUniform3i(self, *args): return _of.ofShader_setUniform3i(self, *args)
    def setUniform4i(self, *args): return _of.ofShader_setUniform4i(self, *args)
    def setUniform1f(self, *args): return _of.ofShader_setUniform1f(self, *args)
    def setUniform2f(self, *args): return _of.ofShader_setUniform2f(self, *args)
    def setUniform3f(self, *args): return _of.ofShader_setUniform3f(self, *args)
    def setUniform4f(self, *args): return _of.ofShader_setUniform4f(self, *args)
    def setUniform1iv(self, *args): return _of.ofShader_setUniform1iv(self, *args)
    def setUniform2iv(self, *args): return _of.ofShader_setUniform2iv(self, *args)
    def setUniform3iv(self, *args): return _of.ofShader_setUniform3iv(self, *args)
    def setUniform4iv(self, *args): return _of.ofShader_setUniform4iv(self, *args)
    def setUniform1fv(self, *args): return _of.ofShader_setUniform1fv(self, *args)
    def setUniform2fv(self, *args): return _of.ofShader_setUniform2fv(self, *args)
    def setUniform3fv(self, *args): return _of.ofShader_setUniform3fv(self, *args)
    def setUniform4fv(self, *args): return _of.ofShader_setUniform4fv(self, *args)
    def setUniformMatrix4f(self, *args): return _of.ofShader_setUniformMatrix4f(self, *args)
    def getAttributeLocation(self, *args): return _of.ofShader_getAttributeLocation(self, *args)
    def setAttribute1s(self, *args): return _of.ofShader_setAttribute1s(self, *args)
    def setAttribute2s(self, *args): return _of.ofShader_setAttribute2s(self, *args)
    def setAttribute3s(self, *args): return _of.ofShader_setAttribute3s(self, *args)
    def setAttribute4s(self, *args): return _of.ofShader_setAttribute4s(self, *args)
    def setAttribute1f(self, *args): return _of.ofShader_setAttribute1f(self, *args)
    def setAttribute2f(self, *args): return _of.ofShader_setAttribute2f(self, *args)
    def setAttribute3f(self, *args): return _of.ofShader_setAttribute3f(self, *args)
    def setAttribute4f(self, *args): return _of.ofShader_setAttribute4f(self, *args)
    def setAttribute1d(self, *args): return _of.ofShader_setAttribute1d(self, *args)
    def setAttribute2d(self, *args): return _of.ofShader_setAttribute2d(self, *args)
    def setAttribute3d(self, *args): return _of.ofShader_setAttribute3d(self, *args)
    def setAttribute4d(self, *args): return _of.ofShader_setAttribute4d(self, *args)
    def printActiveUniforms(self): return _of.ofShader_printActiveUniforms(self)
    def printActiveAttributes(self): return _of.ofShader_printActiveAttributes(self)
    def setupShaderFromSource(self, *args): return _of.ofShader_setupShaderFromSource(self, *args)
    def setupShaderFromFile(self, *args): return _of.ofShader_setupShaderFromFile(self, *args)
    def linkProgram(self): return _of.ofShader_linkProgram(self)
    def getProgram(self): return _of.ofShader_getProgram(self)
    def getShader(self, *args): return _of.ofShader_getShader(self, *args)
ofShader_swigregister = _of.ofShader_swigregister
ofShader_swigregister(ofShader)


def ofGetGlInternalFormat(*args):
  return _of.ofGetGlInternalFormat(*args)
ofGetGlInternalFormat = _of.ofGetGlInternalFormat

def ofGetGlFormatAndType(*args):
  return _of.ofGetGlFormatAndType(*args)
ofGetGlFormatAndType = _of.ofGetGlFormatAndType

def ofGetImageTypeFromGLType(*args):
  return _of.ofGetImageTypeFromGLType(*args)
ofGetImageTypeFromGLType = _of.ofGetImageTypeFromGLType

def ofGetUsingArbTex():
  return _of.ofGetUsingArbTex()
ofGetUsingArbTex = _of.ofGetUsingArbTex

def ofEnableArbTex():
  return _of.ofEnableArbTex()
ofEnableArbTex = _of.ofEnableArbTex

def ofDisableArbTex():
  return _of.ofDisableArbTex()
ofDisableArbTex = _of.ofDisableArbTex

def ofGetUsingNormalizedTexCoords():
  return _of.ofGetUsingNormalizedTexCoords()
ofGetUsingNormalizedTexCoords = _of.ofGetUsingNormalizedTexCoords

def ofEnableNormalizedTexCoords():
  return _of.ofEnableNormalizedTexCoords()
ofEnableNormalizedTexCoords = _of.ofEnableNormalizedTexCoords

def ofDisableNormalizedTexCoords():
  return _of.ofDisableNormalizedTexCoords()
ofDisableNormalizedTexCoords = _of.ofDisableNormalizedTexCoords

def ofSetTextureWrap(*args):
  return _of.ofSetTextureWrap(*args)
ofSetTextureWrap = _of.ofSetTextureWrap

def ofGetUsingCustomTextureWrap():
  return _of.ofGetUsingCustomTextureWrap()
ofGetUsingCustomTextureWrap = _of.ofGetUsingCustomTextureWrap

def ofRestoreTextureWrap():
  return _of.ofRestoreTextureWrap()
ofRestoreTextureWrap = _of.ofRestoreTextureWrap

def ofSetMinMagFilters(*args):
  return _of.ofSetMinMagFilters(*args)
ofSetMinMagFilters = _of.ofSetMinMagFilters

def ofGetUsingCustomMinMagFilters():
  return _of.ofGetUsingCustomMinMagFilters()
ofGetUsingCustomMinMagFilters = _of.ofGetUsingCustomMinMagFilters

def ofRestoreMinMagFilters():
  return _of.ofRestoreMinMagFilters()
ofRestoreMinMagFilters = _of.ofRestoreMinMagFilters
OF_COMPRESS_NONE = _of.OF_COMPRESS_NONE
OF_COMPRESS_SRGB = _of.OF_COMPRESS_SRGB
OF_COMPRESS_ARB = _of.OF_COMPRESS_ARB
class ofTextureData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTextureData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTextureData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofTextureData()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["textureID"] = _of.ofTextureData_textureID_set
    __swig_getmethods__["textureID"] = _of.ofTextureData_textureID_get
    if _newclass:textureID = _swig_property(_of.ofTextureData_textureID_get, _of.ofTextureData_textureID_set)
    __swig_setmethods__["textureTarget"] = _of.ofTextureData_textureTarget_set
    __swig_getmethods__["textureTarget"] = _of.ofTextureData_textureTarget_get
    if _newclass:textureTarget = _swig_property(_of.ofTextureData_textureTarget_get, _of.ofTextureData_textureTarget_set)
    __swig_setmethods__["glTypeInternal"] = _of.ofTextureData_glTypeInternal_set
    __swig_getmethods__["glTypeInternal"] = _of.ofTextureData_glTypeInternal_get
    if _newclass:glTypeInternal = _swig_property(_of.ofTextureData_glTypeInternal_get, _of.ofTextureData_glTypeInternal_set)
    __swig_setmethods__["glType"] = _of.ofTextureData_glType_set
    __swig_getmethods__["glType"] = _of.ofTextureData_glType_get
    if _newclass:glType = _swig_property(_of.ofTextureData_glType_get, _of.ofTextureData_glType_set)
    __swig_setmethods__["pixelType"] = _of.ofTextureData_pixelType_set
    __swig_getmethods__["pixelType"] = _of.ofTextureData_pixelType_get
    if _newclass:pixelType = _swig_property(_of.ofTextureData_pixelType_get, _of.ofTextureData_pixelType_set)
    __swig_setmethods__["tex_t"] = _of.ofTextureData_tex_t_set
    __swig_getmethods__["tex_t"] = _of.ofTextureData_tex_t_get
    if _newclass:tex_t = _swig_property(_of.ofTextureData_tex_t_get, _of.ofTextureData_tex_t_set)
    __swig_setmethods__["tex_u"] = _of.ofTextureData_tex_u_set
    __swig_getmethods__["tex_u"] = _of.ofTextureData_tex_u_get
    if _newclass:tex_u = _swig_property(_of.ofTextureData_tex_u_get, _of.ofTextureData_tex_u_set)
    __swig_setmethods__["tex_w"] = _of.ofTextureData_tex_w_set
    __swig_getmethods__["tex_w"] = _of.ofTextureData_tex_w_get
    if _newclass:tex_w = _swig_property(_of.ofTextureData_tex_w_get, _of.ofTextureData_tex_w_set)
    __swig_setmethods__["tex_h"] = _of.ofTextureData_tex_h_set
    __swig_getmethods__["tex_h"] = _of.ofTextureData_tex_h_get
    if _newclass:tex_h = _swig_property(_of.ofTextureData_tex_h_get, _of.ofTextureData_tex_h_set)
    __swig_setmethods__["width"] = _of.ofTextureData_width_set
    __swig_getmethods__["width"] = _of.ofTextureData_width_get
    if _newclass:width = _swig_property(_of.ofTextureData_width_get, _of.ofTextureData_width_set)
    __swig_setmethods__["height"] = _of.ofTextureData_height_set
    __swig_getmethods__["height"] = _of.ofTextureData_height_get
    if _newclass:height = _swig_property(_of.ofTextureData_height_get, _of.ofTextureData_height_set)
    __swig_setmethods__["bFlipTexture"] = _of.ofTextureData_bFlipTexture_set
    __swig_getmethods__["bFlipTexture"] = _of.ofTextureData_bFlipTexture_get
    if _newclass:bFlipTexture = _swig_property(_of.ofTextureData_bFlipTexture_get, _of.ofTextureData_bFlipTexture_set)
    __swig_setmethods__["compressionType"] = _of.ofTextureData_compressionType_set
    __swig_getmethods__["compressionType"] = _of.ofTextureData_compressionType_get
    if _newclass:compressionType = _swig_property(_of.ofTextureData_compressionType_get, _of.ofTextureData_compressionType_set)
    __swig_setmethods__["bAllocated"] = _of.ofTextureData_bAllocated_set
    __swig_getmethods__["bAllocated"] = _of.ofTextureData_bAllocated_get
    if _newclass:bAllocated = _swig_property(_of.ofTextureData_bAllocated_get, _of.ofTextureData_bAllocated_set)
    __swig_setmethods__["bUseExternalTextureID"] = _of.ofTextureData_bUseExternalTextureID_set
    __swig_getmethods__["bUseExternalTextureID"] = _of.ofTextureData_bUseExternalTextureID_get
    if _newclass:bUseExternalTextureID = _swig_property(_of.ofTextureData_bUseExternalTextureID_get, _of.ofTextureData_bUseExternalTextureID_set)
    __swig_destroy__ = _of.delete_ofTextureData
    __del__ = lambda self : None;
ofTextureData_swigregister = _of.ofTextureData_swigregister
ofTextureData_swigregister(ofTextureData)


def ofEnableTextureEdgeHack():
  return _of.ofEnableTextureEdgeHack()
ofEnableTextureEdgeHack = _of.ofEnableTextureEdgeHack

def ofDisableTextureEdgeHack():
  return _of.ofDisableTextureEdgeHack()
ofDisableTextureEdgeHack = _of.ofDisableTextureEdgeHack
class ofTexture(ofBaseDraws):
    __swig_setmethods__ = {}
    for _s in [ofBaseDraws]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseDraws]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofTexture, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofTexture
    __del__ = lambda self : None;
    def allocate(self, *args): return _of.ofTexture_allocate(self, *args)
    def clear(self): return _of.ofTexture_clear(self)
    def setUseExternalTextureID(self, *args): return _of.ofTexture_setUseExternalTextureID(self, *args)
    def loadData(self, *args): return _of.ofTexture_loadData(self, *args)
    def loadScreenData(self, *args): return _of.ofTexture_loadScreenData(self, *args)
    def setAnchorPercent(self, *args): return _of.ofTexture_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _of.ofTexture_setAnchorPoint(self, *args)
    def resetAnchor(self): return _of.ofTexture_resetAnchor(self)
    def draw(self, *args): return _of.ofTexture_draw(self, *args)
    def drawSubsection(self, *args): return _of.ofTexture_drawSubsection(self, *args)
    def readToPixels(self, *args): return _of.ofTexture_readToPixels(self, *args)
    def bind(self): return _of.ofTexture_bind(self)
    def unbind(self): return _of.ofTexture_unbind(self)
    def getCoordFromPoint(self, *args): return _of.ofTexture_getCoordFromPoint(self, *args)
    def getCoordFromPercent(self, *args): return _of.ofTexture_getCoordFromPercent(self, *args)
    def setTextureWrap(self, *args): return _of.ofTexture_setTextureWrap(self, *args)
    def setTextureMinMagFilter(self, *args): return _of.ofTexture_setTextureMinMagFilter(self, *args)
    def setCompression(self, *args): return _of.ofTexture_setCompression(self, *args)
    def bAllocated(self): return _of.ofTexture_bAllocated(self)
    def isAllocated(self): return _of.ofTexture_isAllocated(self)
    def getTextureData(self, *args): return _of.ofTexture_getTextureData(self, *args)
    __swig_setmethods__["texData"] = _of.ofTexture_texData_set
    __swig_getmethods__["texData"] = _of.ofTexture_texData_get
    if _newclass:texData = _swig_property(_of.ofTexture_texData_get, _of.ofTexture_texData_set)
    def getHeight(self): return _of.ofTexture_getHeight(self)
    def getWidth(self): return _of.ofTexture_getWidth(self)
ofTexture_swigregister = _of.ofTexture_swigregister
ofTexture_swigregister(ofTexture)

class ofVbo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVbo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVbo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofVbo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofVbo
    __del__ = lambda self : None;
    def setMesh(self, *args): return _of.ofVbo_setMesh(self, *args)
    def setIndexData(self, *args): return _of.ofVbo_setIndexData(self, *args)
    def setVertexData(self, *args): return _of.ofVbo_setVertexData(self, *args)
    def setColorData(self, *args): return _of.ofVbo_setColorData(self, *args)
    def setNormalData(self, *args): return _of.ofVbo_setNormalData(self, *args)
    def setTexCoordData(self, *args): return _of.ofVbo_setTexCoordData(self, *args)
    def updateMesh(self, *args): return _of.ofVbo_updateMesh(self, *args)
    def updateIndexData(self, *args): return _of.ofVbo_updateIndexData(self, *args)
    def updateVertexData(self, *args): return _of.ofVbo_updateVertexData(self, *args)
    def updateColorData(self, *args): return _of.ofVbo_updateColorData(self, *args)
    def updateNormalData(self, *args): return _of.ofVbo_updateNormalData(self, *args)
    def updateTexCoordData(self, *args): return _of.ofVbo_updateTexCoordData(self, *args)
    def enableColors(self): return _of.ofVbo_enableColors(self)
    def enableNormals(self): return _of.ofVbo_enableNormals(self)
    def enableTexCoords(self): return _of.ofVbo_enableTexCoords(self)
    def enableIndices(self): return _of.ofVbo_enableIndices(self)
    def disableColors(self): return _of.ofVbo_disableColors(self)
    def disableNormals(self): return _of.ofVbo_disableNormals(self)
    def disableTexCoords(self): return _of.ofVbo_disableTexCoords(self)
    def disableIndices(self): return _of.ofVbo_disableIndices(self)
    def getVertId(self): return _of.ofVbo_getVertId(self)
    def getColorId(self): return _of.ofVbo_getColorId(self)
    def getNormalId(self): return _of.ofVbo_getNormalId(self)
    def getTexCoordId(self): return _of.ofVbo_getTexCoordId(self)
    def getIndexId(self): return _of.ofVbo_getIndexId(self)
    def getIsAllocated(self): return _of.ofVbo_getIsAllocated(self)
    def getUsingVerts(self): return _of.ofVbo_getUsingVerts(self)
    def getUsingColors(self): return _of.ofVbo_getUsingColors(self)
    def getUsingNormals(self): return _of.ofVbo_getUsingNormals(self)
    def getUsingTexCoords(self): return _of.ofVbo_getUsingTexCoords(self)
    def getUsingIndices(self): return _of.ofVbo_getUsingIndices(self)
    def draw(self, *args): return _of.ofVbo_draw(self, *args)
    def drawElements(self, *args): return _of.ofVbo_drawElements(self, *args)
    def bind(self): return _of.ofVbo_bind(self)
    def unbind(self): return _of.ofVbo_unbind(self)
    def clear(self): return _of.ofVbo_clear(self)
    def clearVertices(self): return _of.ofVbo_clearVertices(self)
    def clearNormals(self): return _of.ofVbo_clearNormals(self)
    def clearColors(self): return _of.ofVbo_clearColors(self)
    def clearTexCoords(self): return _of.ofVbo_clearTexCoords(self)
    def clearIndices(self): return _of.ofVbo_clearIndices(self)
ofVbo_swigregister = _of.ofVbo_swigregister
ofVbo_swigregister(ofVbo)

class ofVboMesh(ofMesh):
    __swig_setmethods__ = {}
    for _s in [ofMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVboMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [ofMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofVboMesh, name)
    __repr__ = _swig_repr
    def draw(self): return _of.ofVboMesh_draw(self)
    def __init__(self, *args): 
        this = _of.new_ofVboMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUsage(self, *args): return _of.ofVboMesh_setUsage(self, *args)
    def enableColors(self): return _of.ofVboMesh_enableColors(self)
    def enableTextures(self): return _of.ofVboMesh_enableTextures(self)
    def enableNormals(self): return _of.ofVboMesh_enableNormals(self)
    def enableIndices(self): return _of.ofVboMesh_enableIndices(self)
    def disableColors(self): return _of.ofVboMesh_disableColors(self)
    def disableTextures(self): return _of.ofVboMesh_disableTextures(self)
    def disableNormals(self): return _of.ofVboMesh_disableNormals(self)
    def disableIndices(self): return _of.ofVboMesh_disableIndices(self)
    def usingColors(self): return _of.ofVboMesh_usingColors(self)
    def usingTextures(self): return _of.ofVboMesh_usingTextures(self)
    def usingNormals(self): return _of.ofVboMesh_usingNormals(self)
    def usingIndices(self): return _of.ofVboMesh_usingIndices(self)
    __swig_destroy__ = _of.delete_ofVboMesh
    __del__ = lambda self : None;
ofVboMesh_swigregister = _of.ofVboMesh_swigregister
ofVboMesh_swigregister(ofVboMesh)

CIRC_RESOLUTION = _of.CIRC_RESOLUTION

def ofSetCurrentRenderer(*args):
  return _of.ofSetCurrentRenderer(*args)
ofSetCurrentRenderer = _of.ofSetCurrentRenderer

def ofGetCurrentRenderer():
  return _of.ofGetCurrentRenderer()
ofGetCurrentRenderer = _of.ofGetCurrentRenderer

def ofGetGLRenderer():
  return _of.ofGetGLRenderer()
ofGetGLRenderer = _of.ofGetGLRenderer

def ofBeginSaveScreenAsPDF(*args):
  return _of.ofBeginSaveScreenAsPDF(*args)
ofBeginSaveScreenAsPDF = _of.ofBeginSaveScreenAsPDF

def ofEndSaveScreenAsPDF():
  return _of.ofEndSaveScreenAsPDF()
ofEndSaveScreenAsPDF = _of.ofEndSaveScreenAsPDF

def ofPushView():
  return _of.ofPushView()
ofPushView = _of.ofPushView

def ofPopView():
  return _of.ofPopView()
ofPopView = _of.ofPopView

def ofViewport(*args):
  return _of.ofViewport(*args)
ofViewport = _of.ofViewport

def ofSetupScreenPerspective(*args):
  return _of.ofSetupScreenPerspective(*args)
ofSetupScreenPerspective = _of.ofSetupScreenPerspective

def ofSetupScreenOrtho(*args):
  return _of.ofSetupScreenOrtho(*args)
ofSetupScreenOrtho = _of.ofSetupScreenOrtho

def ofGetCurrentViewport():
  return _of.ofGetCurrentViewport()
ofGetCurrentViewport = _of.ofGetCurrentViewport

def ofGetViewportWidth():
  return _of.ofGetViewportWidth()
ofGetViewportWidth = _of.ofGetViewportWidth

def ofGetViewportHeight():
  return _of.ofGetViewportHeight()
ofGetViewportHeight = _of.ofGetViewportHeight

def ofOrientationToDegrees(*args):
  return _of.ofOrientationToDegrees(*args)
ofOrientationToDegrees = _of.ofOrientationToDegrees

def ofSetCoordHandedness(*args):
  return _of.ofSetCoordHandedness(*args)
ofSetCoordHandedness = _of.ofSetCoordHandedness

def ofGetCoordHandedness():
  return _of.ofGetCoordHandedness()
ofGetCoordHandedness = _of.ofGetCoordHandedness

def ofPushMatrix():
  return _of.ofPushMatrix()
ofPushMatrix = _of.ofPushMatrix

def ofPopMatrix():
  return _of.ofPopMatrix()
ofPopMatrix = _of.ofPopMatrix

def ofTranslate(*args):
  return _of.ofTranslate(*args)
ofTranslate = _of.ofTranslate

def ofScale(*args):
  return _of.ofScale(*args)
ofScale = _of.ofScale

def ofRotateX(*args):
  return _of.ofRotateX(*args)
ofRotateX = _of.ofRotateX

def ofRotateY(*args):
  return _of.ofRotateY(*args)
ofRotateY = _of.ofRotateY

def ofRotateZ(*args):
  return _of.ofRotateZ(*args)
ofRotateZ = _of.ofRotateZ

def ofRotate(*args):
  return _of.ofRotate(*args)
ofRotate = _of.ofRotate

def ofLoadIdentityMatrix():
  return _of.ofLoadIdentityMatrix()
ofLoadIdentityMatrix = _of.ofLoadIdentityMatrix

def ofLoadMatrix(*args):
  return _of.ofLoadMatrix(*args)
ofLoadMatrix = _of.ofLoadMatrix

def ofMultMatrix(*args):
  return _of.ofMultMatrix(*args)
ofMultMatrix = _of.ofMultMatrix

def ofSetMatrixMode(*args):
  return _of.ofSetMatrixMode(*args)
ofSetMatrixMode = _of.ofSetMatrixMode

def ofSetupGraphicDefaults():
  return _of.ofSetupGraphicDefaults()
ofSetupGraphicDefaults = _of.ofSetupGraphicDefaults

def ofSetupScreen():
  return _of.ofSetupScreen()
ofSetupScreen = _of.ofSetupScreen

def ofGetRectMode():
  return _of.ofGetRectMode()
ofGetRectMode = _of.ofGetRectMode

def ofSetCircleResolution(*args):
  return _of.ofSetCircleResolution(*args)
ofSetCircleResolution = _of.ofSetCircleResolution

def ofSetCurveResolution(*args):
  return _of.ofSetCurveResolution(*args)
ofSetCurveResolution = _of.ofSetCurveResolution

def ofSetSphereResolution(*args):
  return _of.ofSetSphereResolution(*args)
ofSetSphereResolution = _of.ofSetSphereResolution

def ofNoFill():
  return _of.ofNoFill()
ofNoFill = _of.ofNoFill

def ofFill():
  return _of.ofFill()
ofFill = _of.ofFill

def ofGetFill():
  return _of.ofGetFill()
ofGetFill = _of.ofGetFill

def ofSetLineWidth(*args):
  return _of.ofSetLineWidth(*args)
ofSetLineWidth = _of.ofSetLineWidth

def ofSetColor(*args):
  return _of.ofSetColor(*args)
ofSetColor = _of.ofSetColor

def ofSetHexColor(*args):
  return _of.ofSetHexColor(*args)
ofSetHexColor = _of.ofSetHexColor

def ofEnableBlendMode(*args):
  return _of.ofEnableBlendMode(*args)
ofEnableBlendMode = _of.ofEnableBlendMode

def ofDisableBlendMode():
  return _of.ofDisableBlendMode()
ofDisableBlendMode = _of.ofDisableBlendMode

def ofEnablePointSprites():
  return _of.ofEnablePointSprites()
ofEnablePointSprites = _of.ofEnablePointSprites

def ofDisablePointSprites():
  return _of.ofDisablePointSprites()
ofDisablePointSprites = _of.ofDisablePointSprites

def ofEnableAlphaBlending():
  return _of.ofEnableAlphaBlending()
ofEnableAlphaBlending = _of.ofEnableAlphaBlending

def ofDisableAlphaBlending():
  return _of.ofDisableAlphaBlending()
ofDisableAlphaBlending = _of.ofDisableAlphaBlending

def ofEnableSmoothing():
  return _of.ofEnableSmoothing()
ofEnableSmoothing = _of.ofEnableSmoothing

def ofDisableSmoothing():
  return _of.ofDisableSmoothing()
ofDisableSmoothing = _of.ofDisableSmoothing

def ofGetStyle():
  return _of.ofGetStyle()
ofGetStyle = _of.ofGetStyle

def ofSetStyle(*args):
  return _of.ofSetStyle(*args)
ofSetStyle = _of.ofSetStyle

def ofPushStyle():
  return _of.ofPushStyle()
ofPushStyle = _of.ofPushStyle

def ofPopStyle():
  return _of.ofPopStyle()
ofPopStyle = _of.ofPopStyle

def ofSetPolyMode(*args):
  return _of.ofSetPolyMode(*args)
ofSetPolyMode = _of.ofSetPolyMode

def ofSetRectMode(*args):
  return _of.ofSetRectMode(*args)
ofSetRectMode = _of.ofSetRectMode

def ofBgColorPtr():
  return _of.ofBgColorPtr()
ofBgColorPtr = _of.ofBgColorPtr

def ofBackground(*args):
  return _of.ofBackground(*args)
ofBackground = _of.ofBackground

def ofBackgroundHex(*args):
  return _of.ofBackgroundHex(*args)
ofBackgroundHex = _of.ofBackgroundHex

def ofBackgroundGradient(*args):
  return _of.ofBackgroundGradient(*args)
ofBackgroundGradient = _of.ofBackgroundGradient

def ofSetBackgroundColor(*args):
  return _of.ofSetBackgroundColor(*args)
ofSetBackgroundColor = _of.ofSetBackgroundColor

def ofSetBackgroundColorHex(*args):
  return _of.ofSetBackgroundColorHex(*args)
ofSetBackgroundColorHex = _of.ofSetBackgroundColorHex

def ofSetBackgroundAuto(*args):
  return _of.ofSetBackgroundAuto(*args)
ofSetBackgroundAuto = _of.ofSetBackgroundAuto

def ofClear(*args):
  return _of.ofClear(*args)
ofClear = _of.ofClear

def ofClearAlpha():
  return _of.ofClearAlpha()
ofClearAlpha = _of.ofClearAlpha

def ofbClearBg():
  return _of.ofbClearBg()
ofbClearBg = _of.ofbClearBg

def ofTriangle(*args):
  return _of.ofTriangle(*args)
ofTriangle = _of.ofTriangle

def ofCircle(*args):
  return _of.ofCircle(*args)
ofCircle = _of.ofCircle

def ofEllipse(*args):
  return _of.ofEllipse(*args)
ofEllipse = _of.ofEllipse

def ofLine(*args):
  return _of.ofLine(*args)
ofLine = _of.ofLine

def ofRect(*args):
  return _of.ofRect(*args)
ofRect = _of.ofRect

def ofRectRounded(*args):
  return _of.ofRectRounded(*args)
ofRectRounded = _of.ofRectRounded

def ofCurve(*args):
  return _of.ofCurve(*args)
ofCurve = _of.ofCurve

def ofBezier(*args):
  return _of.ofBezier(*args)
ofBezier = _of.ofBezier

def ofBeginShape():
  return _of.ofBeginShape()
ofBeginShape = _of.ofBeginShape

def ofVertex(*args):
  return _of.ofVertex(*args)
ofVertex = _of.ofVertex

def ofVertices(*args):
  return _of.ofVertices(*args)
ofVertices = _of.ofVertices

def ofVertexes(*args):
  return _of.ofVertexes(*args)
ofVertexes = _of.ofVertexes

def ofCurveVertex(*args):
  return _of.ofCurveVertex(*args)
ofCurveVertex = _of.ofCurveVertex

def ofCurveVertices(*args):
  return _of.ofCurveVertices(*args)
ofCurveVertices = _of.ofCurveVertices

def ofCurveVertexes(*args):
  return _of.ofCurveVertexes(*args)
ofCurveVertexes = _of.ofCurveVertexes

def ofBezierVertex(*args):
  return _of.ofBezierVertex(*args)
ofBezierVertex = _of.ofBezierVertex

def ofEndShape(bClose=False):
  return _of.ofEndShape(bClose)
ofEndShape = _of.ofEndShape

def ofNextContour(bClose=False):
  return _of.ofNextContour(bClose)
ofNextContour = _of.ofNextContour

def ofSphere(*args):
  return _of.ofSphere(*args)
ofSphere = _of.ofSphere

def ofBox(*args):
  return _of.ofBox(*args)
ofBox = _of.ofBox

def ofCone(*args):
  return _of.ofCone(*args)
ofCone = _of.ofCone

def ofSetDrawBitmapMode(*args):
  return _of.ofSetDrawBitmapMode(*args)
ofSetDrawBitmapMode = _of.ofSetDrawBitmapMode

def ofDrawBitmapString(*args):
  return _of.ofDrawBitmapString(*args)
ofDrawBitmapString = _of.ofDrawBitmapString

def ofDrawBitmapStringHighlight(*args):
  return _of.ofDrawBitmapStringHighlight(*args)
ofDrawBitmapStringHighlight = _of.ofDrawBitmapStringHighlight
class ofPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPath, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofPath()
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _of.ofPath_clear(self)
    def newSubPath(self): return _of.ofPath_newSubPath(self)
    def close(self): return _of.ofPath_close(self)
    def lineTo(self, *args): return _of.ofPath_lineTo(self, *args)
    def moveTo(self, *args): return _of.ofPath_moveTo(self, *args)
    def curveTo(self, *args): return _of.ofPath_curveTo(self, *args)
    def bezierTo(self, *args): return _of.ofPath_bezierTo(self, *args)
    def quadBezierTo(self, *args): return _of.ofPath_quadBezierTo(self, *args)
    def arc(self, *args): return _of.ofPath_arc(self, *args)
    def arcNegative(self, *args): return _of.ofPath_arcNegative(self, *args)
    def setPolyWindingMode(self, *args): return _of.ofPath_setPolyWindingMode(self, *args)
    def setFilled(self, *args): return _of.ofPath_setFilled(self, *args)
    def setStrokeWidth(self, *args): return _of.ofPath_setStrokeWidth(self, *args)
    def setColor(self, *args): return _of.ofPath_setColor(self, *args)
    def setHexColor(self, *args): return _of.ofPath_setHexColor(self, *args)
    def setFillColor(self, *args): return _of.ofPath_setFillColor(self, *args)
    def setFillHexColor(self, *args): return _of.ofPath_setFillHexColor(self, *args)
    def setStrokeColor(self, *args): return _of.ofPath_setStrokeColor(self, *args)
    def setStrokeHexColor(self, *args): return _of.ofPath_setStrokeHexColor(self, *args)
    def getWindingMode(self): return _of.ofPath_getWindingMode(self)
    def isFilled(self): return _of.ofPath_isFilled(self)
    def getFillColor(self): return _of.ofPath_getFillColor(self)
    def getStrokeColor(self): return _of.ofPath_getStrokeColor(self)
    def getStrokeWidth(self): return _of.ofPath_getStrokeWidth(self)
    def hasOutline(self): return _of.ofPath_hasOutline(self)
    def draw(self, *args): return _of.ofPath_draw(self, *args)
    def getSubPaths(self, *args): return _of.ofPath_getSubPaths(self, *args)
    def getOutline(self): return _of.ofPath_getOutline(self)
    def getTessellation(self): return _of.ofPath_getTessellation(self)
    def simplify(self, tolerance=0.3): return _of.ofPath_simplify(self, tolerance)
    def flagShapeChanged(self): return _of.ofPath_flagShapeChanged(self)
    PATHS = _of.ofPath_PATHS
    POLYLINES = _of.ofPath_POLYLINES
    def setMode(self, *args): return _of.ofPath_setMode(self, *args)
    def setCurveResolution(self, *args): return _of.ofPath_setCurveResolution(self, *args)
    def getCurveResolution(self): return _of.ofPath_getCurveResolution(self)
    def setArcResolution(self, *args): return _of.ofPath_setArcResolution(self, *args)
    def getArcResolution(self): return _of.ofPath_getArcResolution(self)
    def setUseShapeColor(self, *args): return _of.ofPath_setUseShapeColor(self, *args)
    def getUseShapeColor(self): return _of.ofPath_getUseShapeColor(self)
    def tessellate(self): return _of.ofPath_tessellate(self)
    def translate(self, *args): return _of.ofPath_translate(self, *args)
    def rotate(self, *args): return _of.ofPath_rotate(self, *args)
    def scale(self, *args): return _of.ofPath_scale(self, *args)
    __swig_destroy__ = _of.delete_ofPath
    __del__ = lambda self : None;
ofPath_swigregister = _of.ofPath_swigregister
ofPath_swigregister(ofPath)

class ofSubPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSubPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSubPath, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofSubPath()
        try: self.this.append(this)
        except: self.this = this
    def getCommands(self, *args): return _of.ofSubPath_getCommands(self, *args)
    def addCommand(self, *args): return _of.ofSubPath_addCommand(self, *args)
    def close(self): return _of.ofSubPath_close(self)
    def isClosed(self): return _of.ofSubPath_isClosed(self)
    def size(self): return _of.ofSubPath_size(self)
    __swig_destroy__ = _of.delete_ofSubPath
    __del__ = lambda self : None;
ofSubPath_swigregister = _of.ofSubPath_swigregister
ofSubPath_swigregister(ofSubPath)

class ofPolyline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPolyline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPolyline, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofPolyline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["fromRectangle"] = lambda x: _of.ofPolyline_fromRectangle
    if _newclass:fromRectangle = staticmethod(_of.ofPolyline_fromRectangle)
    def clear(self): return _of.ofPolyline_clear(self)
    def addVertex(self, *args): return _of.ofPolyline_addVertex(self, *args)
    def addVertices(self, *args): return _of.ofPolyline_addVertices(self, *args)
    def addVertexes(self, *args): return _of.ofPolyline_addVertexes(self, *args)
    def lineTo(self, *args): return _of.ofPolyline_lineTo(self, *args)
    def arc(self, *args): return _of.ofPolyline_arc(self, *args)
    def arcNegative(self, *args): return _of.ofPolyline_arcNegative(self, *args)
    def curveTo(self, *args): return _of.ofPolyline_curveTo(self, *args)
    def bezierTo(self, *args): return _of.ofPolyline_bezierTo(self, *args)
    def quadBezierTo(self, *args): return _of.ofPolyline_quadBezierTo(self, *args)
    def getSmoothed(self, *args): return _of.ofPolyline_getSmoothed(self, *args)
    def getResampledBySpacing(self, *args): return _of.ofPolyline_getResampledBySpacing(self, *args)
    def getResampledByCount(self, *args): return _of.ofPolyline_getResampledByCount(self, *args)
    def getBoundingBox(self): return _of.ofPolyline_getBoundingBox(self)
    def getClosestPoint(self, *args): return _of.ofPolyline_getClosestPoint(self, *args)
    def inside(self, *args): return _of.ofPolyline_inside(self, *args)
    def simplify(self, tolerance=0.3): return _of.ofPolyline_simplify(self, tolerance)
    def size(self): return _of.ofPolyline_size(self)
    def resize(self, *args): return _of.ofPolyline_resize(self, *args)
    def setClosed(self, *args): return _of.ofPolyline_setClosed(self, *args)
    def isClosed(self): return _of.ofPolyline_isClosed(self)
    def close(self): return _of.ofPolyline_close(self)
    def hasChanged(self): return _of.ofPolyline_hasChanged(self)
    def getVertices(self): return _of.ofPolyline_getVertices(self)
    def getPerimeter(self): return _of.ofPolyline_getPerimeter(self)
    def getArea(self): return _of.ofPolyline_getArea(self)
    def getCentroid2D(self): return _of.ofPolyline_getCentroid2D(self)
    def draw(self): return _of.ofPolyline_draw(self)
    __swig_destroy__ = _of.delete_ofPolyline
    __del__ = lambda self : None;
ofPolyline_swigregister = _of.ofPolyline_swigregister
ofPolyline_swigregister(ofPolyline)

def ofPolyline_fromRectangle(*args):
  return _of.ofPolyline_fromRectangle(*args)
ofPolyline_fromRectangle = _of.ofPolyline_fromRectangle

class ofTessellator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTessellator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTessellator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofTessellator
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _of.new_ofTessellator(*args)
        try: self.this.append(this)
        except: self.this = this
    def tessellateToMesh(self, *args): return _of.ofTessellator_tessellateToMesh(self, *args)
    def tessellateToPolylines(self, *args): return _of.ofTessellator_tessellateToPolylines(self, *args)
ofTessellator_swigregister = _of.ofTessellator_swigregister
ofTessellator_swigregister(ofTessellator)

class charProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charProps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["character"] = _of.charProps_character_set
    __swig_getmethods__["character"] = _of.charProps_character_get
    if _newclass:character = _swig_property(_of.charProps_character_get, _of.charProps_character_set)
    __swig_setmethods__["height"] = _of.charProps_height_set
    __swig_getmethods__["height"] = _of.charProps_height_get
    if _newclass:height = _swig_property(_of.charProps_height_get, _of.charProps_height_set)
    __swig_setmethods__["width"] = _of.charProps_width_set
    __swig_getmethods__["width"] = _of.charProps_width_get
    if _newclass:width = _swig_property(_of.charProps_width_get, _of.charProps_width_set)
    __swig_setmethods__["setWidth"] = _of.charProps_setWidth_set
    __swig_getmethods__["setWidth"] = _of.charProps_setWidth_get
    if _newclass:setWidth = _swig_property(_of.charProps_setWidth_get, _of.charProps_setWidth_set)
    __swig_setmethods__["topExtent"] = _of.charProps_topExtent_set
    __swig_getmethods__["topExtent"] = _of.charProps_topExtent_get
    if _newclass:topExtent = _swig_property(_of.charProps_topExtent_get, _of.charProps_topExtent_set)
    __swig_setmethods__["leftExtent"] = _of.charProps_leftExtent_set
    __swig_getmethods__["leftExtent"] = _of.charProps_leftExtent_get
    if _newclass:leftExtent = _swig_property(_of.charProps_leftExtent_get, _of.charProps_leftExtent_set)
    __swig_setmethods__["tW"] = _of.charProps_tW_set
    __swig_getmethods__["tW"] = _of.charProps_tW_get
    if _newclass:tW = _swig_property(_of.charProps_tW_get, _of.charProps_tW_set)
    __swig_setmethods__["tH"] = _of.charProps_tH_set
    __swig_getmethods__["tH"] = _of.charProps_tH_get
    if _newclass:tH = _swig_property(_of.charProps_tH_get, _of.charProps_tH_set)
    __swig_setmethods__["x1"] = _of.charProps_x1_set
    __swig_getmethods__["x1"] = _of.charProps_x1_get
    if _newclass:x1 = _swig_property(_of.charProps_x1_get, _of.charProps_x1_set)
    __swig_setmethods__["x2"] = _of.charProps_x2_set
    __swig_getmethods__["x2"] = _of.charProps_x2_get
    if _newclass:x2 = _swig_property(_of.charProps_x2_get, _of.charProps_x2_set)
    __swig_setmethods__["y1"] = _of.charProps_y1_set
    __swig_getmethods__["y1"] = _of.charProps_y1_get
    if _newclass:y1 = _swig_property(_of.charProps_y1_get, _of.charProps_y1_set)
    __swig_setmethods__["y2"] = _of.charProps_y2_set
    __swig_getmethods__["y2"] = _of.charProps_y2_get
    if _newclass:y2 = _swig_property(_of.charProps_y2_get, _of.charProps_y2_set)
    __swig_setmethods__["t1"] = _of.charProps_t1_set
    __swig_getmethods__["t1"] = _of.charProps_t1_get
    if _newclass:t1 = _swig_property(_of.charProps_t1_get, _of.charProps_t1_set)
    __swig_setmethods__["t2"] = _of.charProps_t2_set
    __swig_getmethods__["t2"] = _of.charProps_t2_get
    if _newclass:t2 = _swig_property(_of.charProps_t2_get, _of.charProps_t2_set)
    __swig_setmethods__["v1"] = _of.charProps_v1_set
    __swig_getmethods__["v1"] = _of.charProps_v1_get
    if _newclass:v1 = _swig_property(_of.charProps_v1_get, _of.charProps_v1_set)
    __swig_setmethods__["v2"] = _of.charProps_v2_set
    __swig_getmethods__["v2"] = _of.charProps_v2_get
    if _newclass:v2 = _swig_property(_of.charProps_v2_get, _of.charProps_v2_set)
    def __init__(self): 
        this = _of.new_charProps()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_charProps
    __del__ = lambda self : None;
charProps_swigregister = _of.charProps_swigregister
charProps_swigregister(charProps)

NUM_CHARACTER_TO_START = _of.NUM_CHARACTER_TO_START
class ofTrueTypeFont(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTrueTypeFont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTrueTypeFont, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofTrueTypeFont()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofTrueTypeFont
    __del__ = lambda self : None;
    __swig_getmethods__["setGlobalDpi"] = lambda x: _of.ofTrueTypeFont_setGlobalDpi
    if _newclass:setGlobalDpi = staticmethod(_of.ofTrueTypeFont_setGlobalDpi)
    def loadFont(self, *args): return _of.ofTrueTypeFont_loadFont(self, *args)
    def isLoaded(self): return _of.ofTrueTypeFont_isLoaded(self)
    def isAntiAliased(self): return _of.ofTrueTypeFont_isAntiAliased(self)
    def hasFullCharacterSet(self): return _of.ofTrueTypeFont_hasFullCharacterSet(self)
    def getSize(self): return _of.ofTrueTypeFont_getSize(self)
    def getLineHeight(self): return _of.ofTrueTypeFont_getLineHeight(self)
    def setLineHeight(self, *args): return _of.ofTrueTypeFont_setLineHeight(self, *args)
    def getLetterSpacing(self): return _of.ofTrueTypeFont_getLetterSpacing(self)
    def setLetterSpacing(self, *args): return _of.ofTrueTypeFont_setLetterSpacing(self, *args)
    def getSpaceSize(self): return _of.ofTrueTypeFont_getSpaceSize(self)
    def setSpaceSize(self, *args): return _of.ofTrueTypeFont_setSpaceSize(self, *args)
    def stringWidth(self, *args): return _of.ofTrueTypeFont_stringWidth(self, *args)
    def stringHeight(self, *args): return _of.ofTrueTypeFont_stringHeight(self, *args)
    def getStringBoundingBox(self, *args): return _of.ofTrueTypeFont_getStringBoundingBox(self, *args)
    def drawString(self, *args): return _of.ofTrueTypeFont_drawString(self, *args)
    def drawStringAsShapes(self, *args): return _of.ofTrueTypeFont_drawStringAsShapes(self, *args)
    def getNumCharacters(self): return _of.ofTrueTypeFont_getNumCharacters(self)
    def getCharacterAsPoints(self, *args): return _of.ofTrueTypeFont_getCharacterAsPoints(self, *args)
    def getStringAsPoints(self, *args): return _of.ofTrueTypeFont_getStringAsPoints(self, *args)
    def bind(self): return _of.ofTrueTypeFont_bind(self)
    def unbind(self): return _of.ofTrueTypeFont_unbind(self)
ofTrueTypeFont_swigregister = _of.ofTrueTypeFont_swigregister
ofTrueTypeFont_swigregister(ofTrueTypeFont)

def ofTrueTypeFont_setGlobalDpi(*args):
  return _of.ofTrueTypeFont_setGlobalDpi(*args)
ofTrueTypeFont_setGlobalDpi = _of.ofTrueTypeFont_setGlobalDpi


def ofNextPow2(*args):
  return _of.ofNextPow2(*args)
ofNextPow2 = _of.ofNextPow2

def ofSeedRandom(*args):
  return _of.ofSeedRandom(*args)
ofSeedRandom = _of.ofSeedRandom

def ofRandom(*args):
  return _of.ofRandom(*args)
ofRandom = _of.ofRandom

def ofRandomf():
  return _of.ofRandomf()
ofRandomf = _of.ofRandomf

def ofRandomuf():
  return _of.ofRandomuf()
ofRandomuf = _of.ofRandomuf

def ofNormalize(*args):
  return _of.ofNormalize(*args)
ofNormalize = _of.ofNormalize

def ofMap(*args):
  return _of.ofMap(*args)
ofMap = _of.ofMap

def ofClamp(*args):
  return _of.ofClamp(*args)
ofClamp = _of.ofClamp

def ofLerp(*args):
  return _of.ofLerp(*args)
ofLerp = _of.ofLerp

def ofDist(*args):
  return _of.ofDist(*args)
ofDist = _of.ofDist

def ofDistSquared(*args):
  return _of.ofDistSquared(*args)
ofDistSquared = _of.ofDistSquared

def ofSign(*args):
  return _of.ofSign(*args)
ofSign = _of.ofSign

def ofInRange(*args):
  return _of.ofInRange(*args)
ofInRange = _of.ofInRange

def ofRadToDeg(*args):
  return _of.ofRadToDeg(*args)
ofRadToDeg = _of.ofRadToDeg

def ofDegToRad(*args):
  return _of.ofDegToRad(*args)
ofDegToRad = _of.ofDegToRad

def ofLerpDegrees(*args):
  return _of.ofLerpDegrees(*args)
ofLerpDegrees = _of.ofLerpDegrees

def ofLerpRadians(*args):
  return _of.ofLerpRadians(*args)
ofLerpRadians = _of.ofLerpRadians

def ofAngleDifferenceDegrees(*args):
  return _of.ofAngleDifferenceDegrees(*args)
ofAngleDifferenceDegrees = _of.ofAngleDifferenceDegrees

def ofAngleDifferenceRadians(*args):
  return _of.ofAngleDifferenceRadians(*args)
ofAngleDifferenceRadians = _of.ofAngleDifferenceRadians

def ofWrapRadians(*args):
  return _of.ofWrapRadians(*args)
ofWrapRadians = _of.ofWrapRadians

def ofWrapDegrees(*args):
  return _of.ofWrapDegrees(*args)
ofWrapDegrees = _of.ofWrapDegrees

def ofRandomWidth():
  return _of.ofRandomWidth()
ofRandomWidth = _of.ofRandomWidth

def ofRandomHeight():
  return _of.ofRandomHeight()
ofRandomHeight = _of.ofRandomHeight

def ofNoise(*args):
  return _of.ofNoise(*args)
ofNoise = _of.ofNoise

def ofSignedNoise(*args):
  return _of.ofSignedNoise(*args)
ofSignedNoise = _of.ofSignedNoise

def ofInsidePoly(*args):
  return _of.ofInsidePoly(*args)
ofInsidePoly = _of.ofInsidePoly

def ofLineSegmentIntersection(*args):
  return _of.ofLineSegmentIntersection(*args)
ofLineSegmentIntersection = _of.ofLineSegmentIntersection

def ofBezierPoint(*args):
  return _of.ofBezierPoint(*args)
ofBezierPoint = _of.ofBezierPoint

def ofCurvePoint(*args):
  return _of.ofCurvePoint(*args)
ofCurvePoint = _of.ofCurvePoint

def ofBezierTangent(*args):
  return _of.ofBezierTangent(*args)
ofBezierTangent = _of.ofBezierTangent

def ofCurveTangent(*args):
  return _of.ofCurveTangent(*args)
ofCurveTangent = _of.ofCurveTangent
class ofMatrix3x3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMatrix3x3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMatrix3x3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _of.ofMatrix3x3_a_set
    __swig_getmethods__["a"] = _of.ofMatrix3x3_a_get
    if _newclass:a = _swig_property(_of.ofMatrix3x3_a_get, _of.ofMatrix3x3_a_set)
    __swig_setmethods__["b"] = _of.ofMatrix3x3_b_set
    __swig_getmethods__["b"] = _of.ofMatrix3x3_b_get
    if _newclass:b = _swig_property(_of.ofMatrix3x3_b_get, _of.ofMatrix3x3_b_set)
    __swig_setmethods__["c"] = _of.ofMatrix3x3_c_set
    __swig_getmethods__["c"] = _of.ofMatrix3x3_c_get
    if _newclass:c = _swig_property(_of.ofMatrix3x3_c_get, _of.ofMatrix3x3_c_set)
    __swig_setmethods__["d"] = _of.ofMatrix3x3_d_set
    __swig_getmethods__["d"] = _of.ofMatrix3x3_d_get
    if _newclass:d = _swig_property(_of.ofMatrix3x3_d_get, _of.ofMatrix3x3_d_set)
    __swig_setmethods__["e"] = _of.ofMatrix3x3_e_set
    __swig_getmethods__["e"] = _of.ofMatrix3x3_e_get
    if _newclass:e = _swig_property(_of.ofMatrix3x3_e_get, _of.ofMatrix3x3_e_set)
    __swig_setmethods__["f"] = _of.ofMatrix3x3_f_set
    __swig_getmethods__["f"] = _of.ofMatrix3x3_f_get
    if _newclass:f = _swig_property(_of.ofMatrix3x3_f_get, _of.ofMatrix3x3_f_set)
    __swig_setmethods__["g"] = _of.ofMatrix3x3_g_set
    __swig_getmethods__["g"] = _of.ofMatrix3x3_g_get
    if _newclass:g = _swig_property(_of.ofMatrix3x3_g_get, _of.ofMatrix3x3_g_set)
    __swig_setmethods__["h"] = _of.ofMatrix3x3_h_set
    __swig_getmethods__["h"] = _of.ofMatrix3x3_h_get
    if _newclass:h = _swig_property(_of.ofMatrix3x3_h_get, _of.ofMatrix3x3_h_set)
    __swig_setmethods__["i"] = _of.ofMatrix3x3_i_set
    __swig_getmethods__["i"] = _of.ofMatrix3x3_i_get
    if _newclass:i = _swig_property(_of.ofMatrix3x3_i_get, _of.ofMatrix3x3_i_set)
    def __init__(self, _a=0.0, _b=0.0, _c=0.0, _d=0.0, _e=0.0, _f=0.0, _g=0.0, _h=0.0, _i=0.0): 
        this = _of.new_ofMatrix3x3(_a, _b, _c, _d, _e, _f, _g, _h, _i)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _of.ofMatrix3x3_set(self, *args)
    def transpose(self, *args): return _of.ofMatrix3x3_transpose(self, *args)
    def determinant(self, *args): return _of.ofMatrix3x3_determinant(self, *args)
    def invert(self): return _of.ofMatrix3x3_invert(self)
    def inverse(self, *args): return _of.ofMatrix3x3_inverse(self, *args)
    def __add__(self, *args): return _of.ofMatrix3x3___add__(self, *args)
    def __iadd__(self, *args): return _of.ofMatrix3x3___iadd__(self, *args)
    def __sub__(self, *args): return _of.ofMatrix3x3___sub__(self, *args)
    def __isub__(self, *args): return _of.ofMatrix3x3___isub__(self, *args)
    def entrywiseTimes(self, *args): return _of.ofMatrix3x3_entrywiseTimes(self, *args)
    def __imul__(self, *args): return _of.ofMatrix3x3___imul__(self, *args)
    def __mul__(self, *args): return _of.ofMatrix3x3___mul__(self, *args)
    def __div__(self, *args): return _of.ofMatrix3x3___div__(self, *args)
    def __idiv__(self, *args): return _of.ofMatrix3x3___idiv__(self, *args)
    __swig_destroy__ = _of.delete_ofMatrix3x3
    __del__ = lambda self : None;
ofMatrix3x3_swigregister = _of.ofMatrix3x3_swigregister
ofMatrix3x3_swigregister(ofMatrix3x3)

class ofMatrix4x4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMatrix4x4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMatrix4x4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_mat"] = _of.ofMatrix4x4__mat_set
    __swig_getmethods__["_mat"] = _of.ofMatrix4x4__mat_get
    if _newclass:_mat = _swig_property(_of.ofMatrix4x4__mat_get, _of.ofMatrix4x4__mat_set)
    def __init__(self, *args): 
        this = _of.new_ofMatrix4x4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofMatrix4x4
    __del__ = lambda self : None;
    def __call__(self, *args): return _of.ofMatrix4x4___call__(self, *args)
    def getRowAsVec3f(self, *args): return _of.ofMatrix4x4_getRowAsVec3f(self, *args)
    def getRowAsVec4f(self, *args): return _of.ofMatrix4x4_getRowAsVec4f(self, *args)
    def isValid(self): return _of.ofMatrix4x4_isValid(self)
    def isNaN(self): return _of.ofMatrix4x4_isNaN(self)
    def set(self, *args): return _of.ofMatrix4x4_set(self, *args)
    def getPtr(self, *args): return _of.ofMatrix4x4_getPtr(self, *args)
    def isIdentity(self): return _of.ofMatrix4x4_isIdentity(self)
    def makeIdentityMatrix(self): return _of.ofMatrix4x4_makeIdentityMatrix(self)
    def makeScaleMatrix(self, *args): return _of.ofMatrix4x4_makeScaleMatrix(self, *args)
    def makeTranslationMatrix(self, *args): return _of.ofMatrix4x4_makeTranslationMatrix(self, *args)
    def makeRotationMatrix(self, *args): return _of.ofMatrix4x4_makeRotationMatrix(self, *args)
    def makeInvertOf(self, *args): return _of.ofMatrix4x4_makeInvertOf(self, *args)
    def makeOrthoNormalOf(self, *args): return _of.ofMatrix4x4_makeOrthoNormalOf(self, *args)
    def makeFromMultiplicationOf(self, *args): return _of.ofMatrix4x4_makeFromMultiplicationOf(self, *args)
    def getInverse(self): return _of.ofMatrix4x4_getInverse(self)
    def makeOrthoMatrix(self, *args): return _of.ofMatrix4x4_makeOrthoMatrix(self, *args)
    def makeOrtho2DMatrix(self, *args): return _of.ofMatrix4x4_makeOrtho2DMatrix(self, *args)
    def makeFrustumMatrix(self, *args): return _of.ofMatrix4x4_makeFrustumMatrix(self, *args)
    def makePerspectiveMatrix(self, *args): return _of.ofMatrix4x4_makePerspectiveMatrix(self, *args)
    def makeLookAtMatrix(self, *args): return _of.ofMatrix4x4_makeLookAtMatrix(self, *args)
    def makeLookAtViewMatrix(self, *args): return _of.ofMatrix4x4_makeLookAtViewMatrix(self, *args)
    def getOrtho(self, *args): return _of.ofMatrix4x4_getOrtho(self, *args)
    def getFrustum(self, *args): return _of.ofMatrix4x4_getFrustum(self, *args)
    def getPerspective(self, *args): return _of.ofMatrix4x4_getPerspective(self, *args)
    def getLookAt(self, *args): return _of.ofMatrix4x4_getLookAt(self, *args)
    def decompose(self, *args): return _of.ofMatrix4x4_decompose(self, *args)
    __swig_getmethods__["newIdentityMatrix"] = lambda x: _of.ofMatrix4x4_newIdentityMatrix
    if _newclass:newIdentityMatrix = staticmethod(_of.ofMatrix4x4_newIdentityMatrix)
    __swig_getmethods__["newScaleMatrix"] = lambda x: _of.ofMatrix4x4_newScaleMatrix
    if _newclass:newScaleMatrix = staticmethod(_of.ofMatrix4x4_newScaleMatrix)
    __swig_getmethods__["newTranslationMatrix"] = lambda x: _of.ofMatrix4x4_newTranslationMatrix
    if _newclass:newTranslationMatrix = staticmethod(_of.ofMatrix4x4_newTranslationMatrix)
    __swig_getmethods__["newRotationMatrix"] = lambda x: _of.ofMatrix4x4_newRotationMatrix
    if _newclass:newRotationMatrix = staticmethod(_of.ofMatrix4x4_newRotationMatrix)
    __swig_getmethods__["getInverseOf"] = lambda x: _of.ofMatrix4x4_getInverseOf
    if _newclass:getInverseOf = staticmethod(_of.ofMatrix4x4_getInverseOf)
    __swig_getmethods__["getTransposedOf"] = lambda x: _of.ofMatrix4x4_getTransposedOf
    if _newclass:getTransposedOf = staticmethod(_of.ofMatrix4x4_getTransposedOf)
    __swig_getmethods__["getOrthoNormalOf"] = lambda x: _of.ofMatrix4x4_getOrthoNormalOf
    if _newclass:getOrthoNormalOf = staticmethod(_of.ofMatrix4x4_getOrthoNormalOf)
    __swig_getmethods__["newOrthoMatrix"] = lambda x: _of.ofMatrix4x4_newOrthoMatrix
    if _newclass:newOrthoMatrix = staticmethod(_of.ofMatrix4x4_newOrthoMatrix)
    __swig_getmethods__["newOrtho2DMatrix"] = lambda x: _of.ofMatrix4x4_newOrtho2DMatrix
    if _newclass:newOrtho2DMatrix = staticmethod(_of.ofMatrix4x4_newOrtho2DMatrix)
    __swig_getmethods__["newFrustumMatrix"] = lambda x: _of.ofMatrix4x4_newFrustumMatrix
    if _newclass:newFrustumMatrix = staticmethod(_of.ofMatrix4x4_newFrustumMatrix)
    __swig_getmethods__["newPerspectiveMatrix"] = lambda x: _of.ofMatrix4x4_newPerspectiveMatrix
    if _newclass:newPerspectiveMatrix = staticmethod(_of.ofMatrix4x4_newPerspectiveMatrix)
    __swig_getmethods__["newLookAtMatrix"] = lambda x: _of.ofMatrix4x4_newLookAtMatrix
    if _newclass:newLookAtMatrix = staticmethod(_of.ofMatrix4x4_newLookAtMatrix)
    def setRotate(self, *args): return _of.ofMatrix4x4_setRotate(self, *args)
    def setTranslation(self, *args): return _of.ofMatrix4x4_setTranslation(self, *args)
    def rotateRad(self, *args): return _of.ofMatrix4x4_rotateRad(self, *args)
    def rotate(self, *args): return _of.ofMatrix4x4_rotate(self, *args)
    def translate(self, *args): return _of.ofMatrix4x4_translate(self, *args)
    def scale(self, *args): return _of.ofMatrix4x4_scale(self, *args)
    def glRotateRad(self, *args): return _of.ofMatrix4x4_glRotateRad(self, *args)
    def glRotate(self, *args): return _of.ofMatrix4x4_glRotate(self, *args)
    def glTranslate(self, *args): return _of.ofMatrix4x4_glTranslate(self, *args)
    def glScale(self, *args): return _of.ofMatrix4x4_glScale(self, *args)
    def getRotate(self): return _of.ofMatrix4x4_getRotate(self)
    def getTranslation(self): return _of.ofMatrix4x4_getTranslation(self)
    def getScale(self): return _of.ofMatrix4x4_getScale(self)
    __swig_getmethods__["transform3x3"] = lambda x: _of.ofMatrix4x4_transform3x3
    if _newclass:transform3x3 = staticmethod(_of.ofMatrix4x4_transform3x3)
    def postMult(self, *args): return _of.ofMatrix4x4_postMult(self, *args)
    def __imul__(self, *args): return _of.ofMatrix4x4___imul__(self, *args)
    def __mul__(self, *args): return _of.ofMatrix4x4___mul__(self, *args)
    def preMult(self, *args): return _of.ofMatrix4x4_preMult(self, *args)
    def postMultTranslate(self, *args): return _of.ofMatrix4x4_postMultTranslate(self, *args)
    def postMultRotate(self, *args): return _of.ofMatrix4x4_postMultRotate(self, *args)
    def postMultScale(self, *args): return _of.ofMatrix4x4_postMultScale(self, *args)
    def preMultScale(self, *args): return _of.ofMatrix4x4_preMultScale(self, *args)
    def preMultTranslate(self, *args): return _of.ofMatrix4x4_preMultTranslate(self, *args)
    def preMultRotate(self, *args): return _of.ofMatrix4x4_preMultRotate(self, *args)
ofMatrix4x4_swigregister = _of.ofMatrix4x4_swigregister
ofMatrix4x4_swigregister(ofMatrix4x4)

def ofMatrix4x4_newIdentityMatrix():
  return _of.ofMatrix4x4_newIdentityMatrix()
ofMatrix4x4_newIdentityMatrix = _of.ofMatrix4x4_newIdentityMatrix

def ofMatrix4x4_newScaleMatrix(*args):
  return _of.ofMatrix4x4_newScaleMatrix(*args)
ofMatrix4x4_newScaleMatrix = _of.ofMatrix4x4_newScaleMatrix

def ofMatrix4x4_newTranslationMatrix(*args):
  return _of.ofMatrix4x4_newTranslationMatrix(*args)
ofMatrix4x4_newTranslationMatrix = _of.ofMatrix4x4_newTranslationMatrix

def ofMatrix4x4_newRotationMatrix(*args):
  return _of.ofMatrix4x4_newRotationMatrix(*args)
ofMatrix4x4_newRotationMatrix = _of.ofMatrix4x4_newRotationMatrix

def ofMatrix4x4_getInverseOf(*args):
  return _of.ofMatrix4x4_getInverseOf(*args)
ofMatrix4x4_getInverseOf = _of.ofMatrix4x4_getInverseOf

def ofMatrix4x4_getTransposedOf(*args):
  return _of.ofMatrix4x4_getTransposedOf(*args)
ofMatrix4x4_getTransposedOf = _of.ofMatrix4x4_getTransposedOf

def ofMatrix4x4_getOrthoNormalOf(*args):
  return _of.ofMatrix4x4_getOrthoNormalOf(*args)
ofMatrix4x4_getOrthoNormalOf = _of.ofMatrix4x4_getOrthoNormalOf

def ofMatrix4x4_newOrthoMatrix(*args):
  return _of.ofMatrix4x4_newOrthoMatrix(*args)
ofMatrix4x4_newOrthoMatrix = _of.ofMatrix4x4_newOrthoMatrix

def ofMatrix4x4_newOrtho2DMatrix(*args):
  return _of.ofMatrix4x4_newOrtho2DMatrix(*args)
ofMatrix4x4_newOrtho2DMatrix = _of.ofMatrix4x4_newOrtho2DMatrix

def ofMatrix4x4_newFrustumMatrix(*args):
  return _of.ofMatrix4x4_newFrustumMatrix(*args)
ofMatrix4x4_newFrustumMatrix = _of.ofMatrix4x4_newFrustumMatrix

def ofMatrix4x4_newPerspectiveMatrix(*args):
  return _of.ofMatrix4x4_newPerspectiveMatrix(*args)
ofMatrix4x4_newPerspectiveMatrix = _of.ofMatrix4x4_newPerspectiveMatrix

def ofMatrix4x4_newLookAtMatrix(*args):
  return _of.ofMatrix4x4_newLookAtMatrix(*args)
ofMatrix4x4_newLookAtMatrix = _of.ofMatrix4x4_newLookAtMatrix

def ofMatrix4x4_transform3x3(*args):
  return _of.ofMatrix4x4_transform3x3(*args)
ofMatrix4x4_transform3x3 = _of.ofMatrix4x4_transform3x3

class ofQuaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofQuaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofQuaternion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_v"] = _of.ofQuaternion__v_set
    __swig_getmethods__["_v"] = _of.ofQuaternion__v_get
    if _newclass:_v = _swig_property(_of.ofQuaternion__v_get, _of.ofQuaternion__v_set)
    def __init__(self, *args): 
        this = _of.new_ofQuaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _of.ofQuaternion___eq__(self, *args)
    def __ne__(self, *args): return _of.ofQuaternion___ne__(self, *args)
    def __lshift__(self, *args): return _of.ofQuaternion___lshift__(self, *args)
    def __rshift__(self, *args): return _of.ofQuaternion___rshift__(self, *args)
    def asVec4(self): return _of.ofQuaternion_asVec4(self)
    def asVec3(self): return _of.ofQuaternion_asVec3(self)
    def set(self, *args): return _of.ofQuaternion_set(self, *args)
    def get(self, *args): return _of.ofQuaternion_get(self, *args)
    def x(self, *args): return _of.ofQuaternion_x(self, *args)
    def y(self, *args): return _of.ofQuaternion_y(self, *args)
    def z(self, *args): return _of.ofQuaternion_z(self, *args)
    def w(self, *args): return _of.ofQuaternion_w(self, *args)
    def zeroRotation(self): return _of.ofQuaternion_zeroRotation(self)
    def __imul__(self, *args): return _of.ofQuaternion___imul__(self, *args)
    def __div__(self, *args): return _of.ofQuaternion___div__(self, *args)
    def __idiv__(self, *args): return _of.ofQuaternion___idiv__(self, *args)
    def __add__(self, *args): return _of.ofQuaternion___add__(self, *args)
    def __iadd__(self, *args): return _of.ofQuaternion___iadd__(self, *args)
    def __sub__(self, *args): return _of.ofQuaternion___sub__(self, *args)
    def __isub__(self, *args): return _of.ofQuaternion___isub__(self, *args)
    def __neg__(self): return _of.ofQuaternion___neg__(self)
    def __mul__(self, *args): return _of.ofQuaternion___mul__(self, *args)
    def length(self): return _of.ofQuaternion_length(self)
    def length2(self): return _of.ofQuaternion_length2(self)
    def conj(self): return _of.ofQuaternion_conj(self)
    def inverse(self): return _of.ofQuaternion_inverse(self)
    def makeRotate(self, *args): return _of.ofQuaternion_makeRotate(self, *args)
    def makeRotate_original(self, *args): return _of.ofQuaternion_makeRotate_original(self, *args)
    def getRotate(self, *args): return _of.ofQuaternion_getRotate(self, *args)
    def getEuler(self): return _of.ofQuaternion_getEuler(self)
    def slerp(self, *args): return _of.ofQuaternion_slerp(self, *args)
    def normalize(self): return _of.ofQuaternion_normalize(self)
    __swig_destroy__ = _of.delete_ofQuaternion
    __del__ = lambda self : None;
ofQuaternion_swigregister = _of.ofQuaternion_swigregister
ofQuaternion_swigregister(ofQuaternion)

class ofVec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVec2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _of.ofVec2f_x_set
    __swig_getmethods__["x"] = _of.ofVec2f_x_get
    if _newclass:x = _swig_property(_of.ofVec2f_x_get, _of.ofVec2f_x_set)
    __swig_setmethods__["y"] = _of.ofVec2f_y_set
    __swig_getmethods__["y"] = _of.ofVec2f_y_get
    if _newclass:y = _swig_property(_of.ofVec2f_y_get, _of.ofVec2f_y_set)
    DIM = _of.ofVec2f_DIM
    def __init__(self, *args): 
        this = _of.new_ofVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPtr(self, *args): return _of.ofVec2f_getPtr(self, *args)
    def set(self, *args): return _of.ofVec2f_set(self, *args)
    def __eq__(self, *args): return _of.ofVec2f___eq__(self, *args)
    def __ne__(self, *args): return _of.ofVec2f___ne__(self, *args)
    def match(self, *args): return _of.ofVec2f_match(self, *args)
    def isAligned(self, *args): return _of.ofVec2f_isAligned(self, *args)
    def isAlignedRad(self, *args): return _of.ofVec2f_isAlignedRad(self, *args)
    def align(self, *args): return _of.ofVec2f_align(self, *args)
    def alignRad(self, *args): return _of.ofVec2f_alignRad(self, *args)
    def __add__(self, *args): return _of.ofVec2f___add__(self, *args)
    def __iadd__(self, *args): return _of.ofVec2f___iadd__(self, *args)
    def __sub__(self, *args): return _of.ofVec2f___sub__(self, *args)
    def __isub__(self, *args): return _of.ofVec2f___isub__(self, *args)
    def __neg__(self): return _of.ofVec2f___neg__(self)
    def __mul__(self, *args): return _of.ofVec2f___mul__(self, *args)
    def __imul__(self, *args): return _of.ofVec2f___imul__(self, *args)
    def __div__(self, *args): return _of.ofVec2f___div__(self, *args)
    def __idiv__(self, *args): return _of.ofVec2f___idiv__(self, *args)
    def getScaled(self, *args): return _of.ofVec2f_getScaled(self, *args)
    def scale(self, *args): return _of.ofVec2f_scale(self, *args)
    def getRotated(self, *args): return _of.ofVec2f_getRotated(self, *args)
    def rotate(self, *args): return _of.ofVec2f_rotate(self, *args)
    def getRotatedRad(self, *args): return _of.ofVec2f_getRotatedRad(self, *args)
    def rotateRad(self, *args): return _of.ofVec2f_rotateRad(self, *args)
    def getMapped(self, *args): return _of.ofVec2f_getMapped(self, *args)
    def map(self, *args): return _of.ofVec2f_map(self, *args)
    def distance(self, *args): return _of.ofVec2f_distance(self, *args)
    def squareDistance(self, *args): return _of.ofVec2f_squareDistance(self, *args)
    def getInterpolated(self, *args): return _of.ofVec2f_getInterpolated(self, *args)
    def interpolate(self, *args): return _of.ofVec2f_interpolate(self, *args)
    def getMiddle(self, *args): return _of.ofVec2f_getMiddle(self, *args)
    def middle(self, *args): return _of.ofVec2f_middle(self, *args)
    def average(self, *args): return _of.ofVec2f_average(self, *args)
    def getNormalized(self): return _of.ofVec2f_getNormalized(self)
    def normalize(self): return _of.ofVec2f_normalize(self)
    def getLimited(self, *args): return _of.ofVec2f_getLimited(self, *args)
    def limit(self, *args): return _of.ofVec2f_limit(self, *args)
    def getPerpendicular(self): return _of.ofVec2f_getPerpendicular(self)
    def perpendicular(self): return _of.ofVec2f_perpendicular(self)
    def length(self): return _of.ofVec2f_length(self)
    def lengthSquared(self): return _of.ofVec2f_lengthSquared(self)
    def squareLength(self): return _of.ofVec2f_squareLength(self)
    def angle(self, *args): return _of.ofVec2f_angle(self, *args)
    def angleRad(self, *args): return _of.ofVec2f_angleRad(self, *args)
    def dot(self, *args): return _of.ofVec2f_dot(self, *args)
    def rescaled(self, *args): return _of.ofVec2f_rescaled(self, *args)
    def rescale(self, *args): return _of.ofVec2f_rescale(self, *args)
    def normalized(self): return _of.ofVec2f_normalized(self)
    def limited(self, *args): return _of.ofVec2f_limited(self, *args)
    def perpendiculared(self): return _of.ofVec2f_perpendiculared(self)
    def interpolated(self, *args): return _of.ofVec2f_interpolated(self, *args)
    def middled(self, *args): return _of.ofVec2f_middled(self, *args)
    def mapped(self, *args): return _of.ofVec2f_mapped(self, *args)
    def distanceSquared(self, *args): return _of.ofVec2f_distanceSquared(self, *args)
    def rotated(self, *args): return _of.ofVec2f_rotated(self, *args)
    __swig_getmethods__["zero"] = lambda x: _of.ofVec2f_zero
    if _newclass:zero = staticmethod(_of.ofVec2f_zero)
    __swig_getmethods__["one"] = lambda x: _of.ofVec2f_one
    if _newclass:one = staticmethod(_of.ofVec2f_one)
    __swig_destroy__ = _of.delete_ofVec2f
    __del__ = lambda self : None;
ofVec2f_swigregister = _of.ofVec2f_swigregister
ofVec2f_swigregister(ofVec2f)

def ofVec2f_zero():
  return _of.ofVec2f_zero()
ofVec2f_zero = _of.ofVec2f_zero

def ofVec2f_one():
  return _of.ofVec2f_one()
ofVec2f_one = _of.ofVec2f_one

class ofVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVec3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _of.ofVec3f_x_set
    __swig_getmethods__["x"] = _of.ofVec3f_x_get
    if _newclass:x = _swig_property(_of.ofVec3f_x_get, _of.ofVec3f_x_set)
    __swig_setmethods__["y"] = _of.ofVec3f_y_set
    __swig_getmethods__["y"] = _of.ofVec3f_y_get
    if _newclass:y = _swig_property(_of.ofVec3f_y_get, _of.ofVec3f_y_set)
    __swig_setmethods__["z"] = _of.ofVec3f_z_set
    __swig_getmethods__["z"] = _of.ofVec3f_z_get
    if _newclass:z = _swig_property(_of.ofVec3f_z_get, _of.ofVec3f_z_set)
    DIM = _of.ofVec3f_DIM
    def __init__(self, *args): 
        this = _of.new_ofVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPtr(self, *args): return _of.ofVec3f_getPtr(self, *args)
    def set(self, *args): return _of.ofVec3f_set(self, *args)
    def __eq__(self, *args): return _of.ofVec3f___eq__(self, *args)
    def __ne__(self, *args): return _of.ofVec3f___ne__(self, *args)
    def match(self, *args): return _of.ofVec3f_match(self, *args)
    def isAligned(self, *args): return _of.ofVec3f_isAligned(self, *args)
    def align(self, *args): return _of.ofVec3f_align(self, *args)
    def isAlignedRad(self, *args): return _of.ofVec3f_isAlignedRad(self, *args)
    def alignRad(self, *args): return _of.ofVec3f_alignRad(self, *args)
    def __neg__(self): return _of.ofVec3f___neg__(self)
    def __add__(self, *args): return _of.ofVec3f___add__(self, *args)
    def __iadd__(self, *args): return _of.ofVec3f___iadd__(self, *args)
    def __sub__(self, *args): return _of.ofVec3f___sub__(self, *args)
    def __isub__(self, *args): return _of.ofVec3f___isub__(self, *args)
    def __mul__(self, *args): return _of.ofVec3f___mul__(self, *args)
    def __imul__(self, *args): return _of.ofVec3f___imul__(self, *args)
    def __div__(self, *args): return _of.ofVec3f___div__(self, *args)
    def __idiv__(self, *args): return _of.ofVec3f___idiv__(self, *args)
    def getScaled(self, *args): return _of.ofVec3f_getScaled(self, *args)
    def scale(self, *args): return _of.ofVec3f_scale(self, *args)
    def getRotated(self, *args): return _of.ofVec3f_getRotated(self, *args)
    def rotate(self, *args): return _of.ofVec3f_rotate(self, *args)
    def getRotatedRad(self, *args): return _of.ofVec3f_getRotatedRad(self, *args)
    def rotateRad(self, *args): return _of.ofVec3f_rotateRad(self, *args)
    def getMapped(self, *args): return _of.ofVec3f_getMapped(self, *args)
    def map(self, *args): return _of.ofVec3f_map(self, *args)
    def distance(self, *args): return _of.ofVec3f_distance(self, *args)
    def squareDistance(self, *args): return _of.ofVec3f_squareDistance(self, *args)
    def getInterpolated(self, *args): return _of.ofVec3f_getInterpolated(self, *args)
    def interpolate(self, *args): return _of.ofVec3f_interpolate(self, *args)
    def getMiddle(self, *args): return _of.ofVec3f_getMiddle(self, *args)
    def middle(self, *args): return _of.ofVec3f_middle(self, *args)
    def average(self, *args): return _of.ofVec3f_average(self, *args)
    def getNormalized(self): return _of.ofVec3f_getNormalized(self)
    def normalize(self): return _of.ofVec3f_normalize(self)
    def getLimited(self, *args): return _of.ofVec3f_getLimited(self, *args)
    def limit(self, *args): return _of.ofVec3f_limit(self, *args)
    def getCrossed(self, *args): return _of.ofVec3f_getCrossed(self, *args)
    def cross(self, *args): return _of.ofVec3f_cross(self, *args)
    def getPerpendicular(self, *args): return _of.ofVec3f_getPerpendicular(self, *args)
    def perpendicular(self, *args): return _of.ofVec3f_perpendicular(self, *args)
    def length(self): return _of.ofVec3f_length(self)
    def lengthSquared(self): return _of.ofVec3f_lengthSquared(self)
    def squareLength(self): return _of.ofVec3f_squareLength(self)
    def angle(self, *args): return _of.ofVec3f_angle(self, *args)
    def angleRad(self, *args): return _of.ofVec3f_angleRad(self, *args)
    def dot(self, *args): return _of.ofVec3f_dot(self, *args)
    def rescaled(self, *args): return _of.ofVec3f_rescaled(self, *args)
    def rescale(self, *args): return _of.ofVec3f_rescale(self, *args)
    def normalized(self): return _of.ofVec3f_normalized(self)
    def limited(self, *args): return _of.ofVec3f_limited(self, *args)
    def crossed(self, *args): return _of.ofVec3f_crossed(self, *args)
    def perpendiculared(self, *args): return _of.ofVec3f_perpendiculared(self, *args)
    def mapped(self, *args): return _of.ofVec3f_mapped(self, *args)
    def distanceSquared(self, *args): return _of.ofVec3f_distanceSquared(self, *args)
    def interpolated(self, *args): return _of.ofVec3f_interpolated(self, *args)
    def middled(self, *args): return _of.ofVec3f_middled(self, *args)
    def rotated(self, *args): return _of.ofVec3f_rotated(self, *args)
    __swig_getmethods__["zero"] = lambda x: _of.ofVec3f_zero
    if _newclass:zero = staticmethod(_of.ofVec3f_zero)
    __swig_getmethods__["one"] = lambda x: _of.ofVec3f_one
    if _newclass:one = staticmethod(_of.ofVec3f_one)
    __swig_destroy__ = _of.delete_ofVec3f
    __del__ = lambda self : None;
ofVec3f_swigregister = _of.ofVec3f_swigregister
ofVec3f_swigregister(ofVec3f)

def ofVec3f_zero():
  return _of.ofVec3f_zero()
ofVec3f_zero = _of.ofVec3f_zero

def ofVec3f_one():
  return _of.ofVec3f_one()
ofVec3f_one = _of.ofVec3f_one

class ofVec4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVec4f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _of.ofVec4f_x_set
    __swig_getmethods__["x"] = _of.ofVec4f_x_get
    if _newclass:x = _swig_property(_of.ofVec4f_x_get, _of.ofVec4f_x_set)
    __swig_setmethods__["y"] = _of.ofVec4f_y_set
    __swig_getmethods__["y"] = _of.ofVec4f_y_get
    if _newclass:y = _swig_property(_of.ofVec4f_y_get, _of.ofVec4f_y_set)
    __swig_setmethods__["z"] = _of.ofVec4f_z_set
    __swig_getmethods__["z"] = _of.ofVec4f_z_get
    if _newclass:z = _swig_property(_of.ofVec4f_z_get, _of.ofVec4f_z_set)
    __swig_setmethods__["w"] = _of.ofVec4f_w_set
    __swig_getmethods__["w"] = _of.ofVec4f_w_get
    if _newclass:w = _swig_property(_of.ofVec4f_w_get, _of.ofVec4f_w_set)
    DIM = _of.ofVec4f_DIM
    def __init__(self, *args): 
        this = _of.new_ofVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _of.ofVec4f_set(self, *args)
    def getPtr(self, *args): return _of.ofVec4f_getPtr(self, *args)
    def __eq__(self, *args): return _of.ofVec4f___eq__(self, *args)
    def __ne__(self, *args): return _of.ofVec4f___ne__(self, *args)
    def match(self, *args): return _of.ofVec4f_match(self, *args)
    def __sub__(self, *args): return _of.ofVec4f___sub__(self, *args)
    def __isub__(self, *args): return _of.ofVec4f___isub__(self, *args)
    def __add__(self, *args): return _of.ofVec4f___add__(self, *args)
    def __iadd__(self, *args): return _of.ofVec4f___iadd__(self, *args)
    def __neg__(self): return _of.ofVec4f___neg__(self)
    def __mul__(self, *args): return _of.ofVec4f___mul__(self, *args)
    def __imul__(self, *args): return _of.ofVec4f___imul__(self, *args)
    def __div__(self, *args): return _of.ofVec4f___div__(self, *args)
    def __idiv__(self, *args): return _of.ofVec4f___idiv__(self, *args)
    def getScaled(self, *args): return _of.ofVec4f_getScaled(self, *args)
    def scale(self, *args): return _of.ofVec4f_scale(self, *args)
    def distance(self, *args): return _of.ofVec4f_distance(self, *args)
    def squareDistance(self, *args): return _of.ofVec4f_squareDistance(self, *args)
    def getInterpolated(self, *args): return _of.ofVec4f_getInterpolated(self, *args)
    def interpolate(self, *args): return _of.ofVec4f_interpolate(self, *args)
    def getMiddle(self, *args): return _of.ofVec4f_getMiddle(self, *args)
    def middle(self, *args): return _of.ofVec4f_middle(self, *args)
    def average(self, *args): return _of.ofVec4f_average(self, *args)
    def getNormalized(self): return _of.ofVec4f_getNormalized(self)
    def normalize(self): return _of.ofVec4f_normalize(self)
    def getLimited(self, *args): return _of.ofVec4f_getLimited(self, *args)
    def limit(self, *args): return _of.ofVec4f_limit(self, *args)
    def length(self): return _of.ofVec4f_length(self)
    def lengthSquared(self): return _of.ofVec4f_lengthSquared(self)
    def squareLength(self): return _of.ofVec4f_squareLength(self)
    def dot(self, *args): return _of.ofVec4f_dot(self, *args)
    def rescaled(self, *args): return _of.ofVec4f_rescaled(self, *args)
    def rescale(self, *args): return _of.ofVec4f_rescale(self, *args)
    def normalized(self): return _of.ofVec4f_normalized(self)
    def limited(self, *args): return _of.ofVec4f_limited(self, *args)
    def distanceSquared(self, *args): return _of.ofVec4f_distanceSquared(self, *args)
    def interpolated(self, *args): return _of.ofVec4f_interpolated(self, *args)
    def middled(self, *args): return _of.ofVec4f_middled(self, *args)
    __swig_getmethods__["zero"] = lambda x: _of.ofVec4f_zero
    if _newclass:zero = staticmethod(_of.ofVec4f_zero)
    __swig_getmethods__["one"] = lambda x: _of.ofVec4f_one
    if _newclass:one = staticmethod(_of.ofVec4f_one)
    __swig_destroy__ = _of.delete_ofVec4f
    __del__ = lambda self : None;
ofVec4f_swigregister = _of.ofVec4f_swigregister
ofVec4f_swigregister(ofVec4f)

def ofVec4f_zero():
  return _of.ofVec4f_zero()
ofVec4f_zero = _of.ofVec4f_zero

def ofVec4f_one():
  return _of.ofVec4f_one()
ofVec4f_one = _of.ofVec4f_one


def ofSoundStopAll():
  return _of.ofSoundStopAll()
ofSoundStopAll = _of.ofSoundStopAll

def ofSoundSetVolume(*args):
  return _of.ofSoundSetVolume(*args)
ofSoundSetVolume = _of.ofSoundSetVolume

def ofSoundUpdate():
  return _of.ofSoundUpdate()
ofSoundUpdate = _of.ofSoundUpdate

def ofSoundGetSpectrum(*args):
  return _of.ofSoundGetSpectrum(*args)
ofSoundGetSpectrum = _of.ofSoundGetSpectrum

def ofSoundShutdown():
  return _of.ofSoundShutdown()
ofSoundShutdown = _of.ofSoundShutdown
class ofSoundPlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSoundPlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSoundPlayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofSoundPlayer()
        try: self.this.append(this)
        except: self.this = this
    def setPlayer(self, *args): return _of.ofSoundPlayer_setPlayer(self, *args)
    def getPlayer(self): return _of.ofSoundPlayer_getPlayer(self)
    def loadSound(self, *args): return _of.ofSoundPlayer_loadSound(self, *args)
    def unloadSound(self): return _of.ofSoundPlayer_unloadSound(self)
    def play(self): return _of.ofSoundPlayer_play(self)
    def stop(self): return _of.ofSoundPlayer_stop(self)
    def setVolume(self, *args): return _of.ofSoundPlayer_setVolume(self, *args)
    def setPan(self, *args): return _of.ofSoundPlayer_setPan(self, *args)
    def setSpeed(self, *args): return _of.ofSoundPlayer_setSpeed(self, *args)
    def setPaused(self, *args): return _of.ofSoundPlayer_setPaused(self, *args)
    def setLoop(self, *args): return _of.ofSoundPlayer_setLoop(self, *args)
    def setMultiPlay(self, *args): return _of.ofSoundPlayer_setMultiPlay(self, *args)
    def setPosition(self, *args): return _of.ofSoundPlayer_setPosition(self, *args)
    def setPositionMS(self, *args): return _of.ofSoundPlayer_setPositionMS(self, *args)
    def getPositionMS(self): return _of.ofSoundPlayer_getPositionMS(self)
    def getPosition(self): return _of.ofSoundPlayer_getPosition(self)
    def getIsPlaying(self): return _of.ofSoundPlayer_getIsPlaying(self)
    def getSpeed(self): return _of.ofSoundPlayer_getSpeed(self)
    def getPan(self): return _of.ofSoundPlayer_getPan(self)
    def getVolume(self): return _of.ofSoundPlayer_getVolume(self)
    def isLoaded(self): return _of.ofSoundPlayer_isLoaded(self)
    __swig_destroy__ = _of.delete_ofSoundPlayer
    __del__ = lambda self : None;
ofSoundPlayer_swigregister = _of.ofSoundPlayer_swigregister
ofSoundPlayer_swigregister(ofSoundPlayer)


def ofSoundStreamSetup(*args):
  return _of.ofSoundStreamSetup(*args)
ofSoundStreamSetup = _of.ofSoundStreamSetup

def ofSoundStreamStop():
  return _of.ofSoundStreamStop()
ofSoundStreamStop = _of.ofSoundStreamStop

def ofSoundStreamStart():
  return _of.ofSoundStreamStart()
ofSoundStreamStart = _of.ofSoundStreamStart

def ofSoundStreamClose():
  return _of.ofSoundStreamClose()
ofSoundStreamClose = _of.ofSoundStreamClose

def ofSoundStreamListDevices():
  return _of.ofSoundStreamListDevices()
ofSoundStreamListDevices = _of.ofSoundStreamListDevices
class ofSoundStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSoundStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSoundStream, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofSoundStream()
        try: self.this.append(this)
        except: self.this = this
    def setSoundStream(self, *args): return _of.ofSoundStream_setSoundStream(self, *args)
    def getSoundStream(self): return _of.ofSoundStream_getSoundStream(self)
    def listDevices(self): return _of.ofSoundStream_listDevices(self)
    def setDeviceID(self, *args): return _of.ofSoundStream_setDeviceID(self, *args)
    def setInput(self, *args): return _of.ofSoundStream_setInput(self, *args)
    def setOutput(self, *args): return _of.ofSoundStream_setOutput(self, *args)
    def setup(self, *args): return _of.ofSoundStream_setup(self, *args)
    def start(self): return _of.ofSoundStream_start(self)
    def stop(self): return _of.ofSoundStream_stop(self)
    def close(self): return _of.ofSoundStream_close(self)
    def getTickCount(self): return _of.ofSoundStream_getTickCount(self)
    __swig_destroy__ = _of.delete_ofSoundStream
    __del__ = lambda self : None;
ofSoundStream_swigregister = _of.ofSoundStream_swigregister
ofSoundStream_swigregister(ofSoundStream)

OF_VERSION_MAJOR = _of.OF_VERSION_MAJOR
OF_VERSION_MINOR = _of.OF_VERSION_MINOR
OF_VERSION_PATCH = _of.OF_VERSION_PATCH
OF_LOOP_NONE = _of.OF_LOOP_NONE
OF_LOOP_PALINDROME = _of.OF_LOOP_PALINDROME
OF_LOOP_NORMAL = _of.OF_LOOP_NORMAL
OF_TARGET_OSX = _of.OF_TARGET_OSX
OF_TARGET_WINGCC = _of.OF_TARGET_WINGCC
OF_TARGET_WINVS = _of.OF_TARGET_WINVS
OF_TARGET_IPHONE = _of.OF_TARGET_IPHONE
OF_TARGET_ANDROID = _of.OF_TARGET_ANDROID
OF_TARGET_LINUX = _of.OF_TARGET_LINUX
OF_TARGET_LINUX64 = _of.OF_TARGET_LINUX64
B14400 = _of.B14400
B28800 = _of.B28800
OF_SERIAL_NO_DATA = _of.OF_SERIAL_NO_DATA
OF_SERIAL_ERROR = _of.OF_SERIAL_ERROR
PI = _of.PI
TWO_PI = _of.TWO_PI
M_TWO_PI = _of.M_TWO_PI
FOUR_PI = _of.FOUR_PI
HALF_PI = _of.HALF_PI
DEG_TO_RAD = _of.DEG_TO_RAD
RAD_TO_DEG = _of.RAD_TO_DEG
OF_OUTLINE = _of.OF_OUTLINE
OF_FILLED = _of.OF_FILLED
OF_WINDOW = _of.OF_WINDOW
OF_FULLSCREEN = _of.OF_FULLSCREEN
OF_GAME_MODE = _of.OF_GAME_MODE
OF_ASPECT_RATIO_IGNORE = _of.OF_ASPECT_RATIO_IGNORE
OF_ASPECT_RATIO_KEEP = _of.OF_ASPECT_RATIO_KEEP
OF_ASPECT_RATIO_KEEP_BY_EXPANDING = _of.OF_ASPECT_RATIO_KEEP_BY_EXPANDING
OF_ALIGN_VERT_IGNORE = _of.OF_ALIGN_VERT_IGNORE
OF_ALIGN_VERT_TOP = _of.OF_ALIGN_VERT_TOP
OF_ALIGN_VERT_BOTTOM = _of.OF_ALIGN_VERT_BOTTOM
OF_ALIGN_VERT_CENTER = _of.OF_ALIGN_VERT_CENTER
OF_ALIGN_HORZ_IGNORE = _of.OF_ALIGN_HORZ_IGNORE
OF_ALIGN_HORZ_LEFT = _of.OF_ALIGN_HORZ_LEFT
OF_ALIGN_HORZ_RIGHT = _of.OF_ALIGN_HORZ_RIGHT
OF_ALIGN_HORZ_CENTER = _of.OF_ALIGN_HORZ_CENTER
OF_RECTMODE_CORNER = _of.OF_RECTMODE_CORNER
OF_RECTMODE_CENTER = _of.OF_RECTMODE_CENTER
OF_SCALEMODE_FIT = _of.OF_SCALEMODE_FIT
OF_SCALEMODE_FILL = _of.OF_SCALEMODE_FILL
OF_SCALEMODE_CENTER = _of.OF_SCALEMODE_CENTER
OF_SCALEMODE_STRETCH_TO_FILL = _of.OF_SCALEMODE_STRETCH_TO_FILL
OF_IMAGE_GRAYSCALE = _of.OF_IMAGE_GRAYSCALE
OF_IMAGE_COLOR = _of.OF_IMAGE_COLOR
OF_IMAGE_COLOR_ALPHA = _of.OF_IMAGE_COLOR_ALPHA
OF_IMAGE_UNDEFINED = _of.OF_IMAGE_UNDEFINED
OF_PIXELS_MONO = _of.OF_PIXELS_MONO
OF_PIXELS_RGB = _of.OF_PIXELS_RGB
OF_PIXELS_RGBA = _of.OF_PIXELS_RGBA
OF_PIXELS_BGRA = _of.OF_PIXELS_BGRA
OF_PIXELS_RGB565 = _of.OF_PIXELS_RGB565
OF_MAX_STYLE_HISTORY = _of.OF_MAX_STYLE_HISTORY
OF_MAX_VIEWPORT_HISTORY = _of.OF_MAX_VIEWPORT_HISTORY
OF_MAX_CIRCLE_PTS = _of.OF_MAX_CIRCLE_PTS
OF_BLENDMODE_DISABLED = _of.OF_BLENDMODE_DISABLED
OF_BLENDMODE_ALPHA = _of.OF_BLENDMODE_ALPHA
OF_BLENDMODE_ADD = _of.OF_BLENDMODE_ADD
OF_BLENDMODE_SUBTRACT = _of.OF_BLENDMODE_SUBTRACT
OF_BLENDMODE_MULTIPLY = _of.OF_BLENDMODE_MULTIPLY
OF_BLENDMODE_SCREEN = _of.OF_BLENDMODE_SCREEN
OF_ORIENTATION_DEFAULT = _of.OF_ORIENTATION_DEFAULT
OF_ORIENTATION_180 = _of.OF_ORIENTATION_180
OF_ORIENTATION_90_LEFT = _of.OF_ORIENTATION_90_LEFT
OF_ORIENTATION_90_RIGHT = _of.OF_ORIENTATION_90_RIGHT
OF_ORIENTATION_UNKNOWN = _of.OF_ORIENTATION_UNKNOWN
OF_GRADIENT_LINEAR = _of.OF_GRADIENT_LINEAR
OF_GRADIENT_CIRCULAR = _of.OF_GRADIENT_CIRCULAR
OF_GRADIENT_BAR = _of.OF_GRADIENT_BAR
OF_POLY_WINDING_ODD = _of.OF_POLY_WINDING_ODD
OF_POLY_WINDING_NONZERO = _of.OF_POLY_WINDING_NONZERO
OF_POLY_WINDING_POSITIVE = _of.OF_POLY_WINDING_POSITIVE
OF_POLY_WINDING_NEGATIVE = _of.OF_POLY_WINDING_NEGATIVE
OF_POLY_WINDING_ABS_GEQ_TWO = _of.OF_POLY_WINDING_ABS_GEQ_TWO
OF_CLOSE = _of.OF_CLOSE
OF_LEFT_HANDED = _of.OF_LEFT_HANDED
OF_RIGHT_HANDED = _of.OF_RIGHT_HANDED
OF_MATRIX_MODELVIEW = _of.OF_MATRIX_MODELVIEW
OF_MATRIX_PROJECTION = _of.OF_MATRIX_PROJECTION
OF_MATRIX_TEXTURE = _of.OF_MATRIX_TEXTURE
OF_KEY_MODIFIER = _of.OF_KEY_MODIFIER
OF_KEY_RETURN = _of.OF_KEY_RETURN
OF_KEY_ESC = _of.OF_KEY_ESC
OF_KEY_CTRL = _of.OF_KEY_CTRL
OF_KEY_ALT = _of.OF_KEY_ALT
OF_KEY_SHIFT = _of.OF_KEY_SHIFT
OF_KEY_BACKSPACE = _of.OF_KEY_BACKSPACE
OF_KEY_DEL = _of.OF_KEY_DEL
OF_KEY_F1 = _of.OF_KEY_F1
OF_KEY_F2 = _of.OF_KEY_F2
OF_KEY_F3 = _of.OF_KEY_F3
OF_KEY_F4 = _of.OF_KEY_F4
OF_KEY_F5 = _of.OF_KEY_F5
OF_KEY_F6 = _of.OF_KEY_F6
OF_KEY_F7 = _of.OF_KEY_F7
OF_KEY_F8 = _of.OF_KEY_F8
OF_KEY_F9 = _of.OF_KEY_F9
OF_KEY_F10 = _of.OF_KEY_F10
OF_KEY_F11 = _of.OF_KEY_F11
OF_KEY_F12 = _of.OF_KEY_F12
OF_KEY_LEFT = _of.OF_KEY_LEFT
OF_KEY_UP = _of.OF_KEY_UP
OF_KEY_RIGHT = _of.OF_KEY_RIGHT
OF_KEY_DOWN = _of.OF_KEY_DOWN
OF_KEY_PAGE_UP = _of.OF_KEY_PAGE_UP
OF_KEY_PAGE_DOWN = _of.OF_KEY_PAGE_DOWN
OF_KEY_HOME = _of.OF_KEY_HOME
OF_KEY_END = _of.OF_KEY_END
OF_KEY_INSERT = _of.OF_KEY_INSERT
OF_CONSOLE_COLOR_RESTORE = _of.OF_CONSOLE_COLOR_RESTORE
OF_CONSOLE_COLOR_BLACK = _of.OF_CONSOLE_COLOR_BLACK
OF_CONSOLE_COLOR_RED = _of.OF_CONSOLE_COLOR_RED
OF_CONSOLE_COLOR_GREEN = _of.OF_CONSOLE_COLOR_GREEN
OF_CONSOLE_COLOR_YELLOW = _of.OF_CONSOLE_COLOR_YELLOW
OF_CONSOLE_COLOR_BLUE = _of.OF_CONSOLE_COLOR_BLUE
OF_CONSOLE_COLOR_PURPLE = _of.OF_CONSOLE_COLOR_PURPLE
OF_CONSOLE_COLOR_CYAN = _of.OF_CONSOLE_COLOR_CYAN
OF_CONSOLE_COLOR_WHITE = _of.OF_CONSOLE_COLOR_WHITE
OF_BITMAPMODE_SIMPLE = _of.OF_BITMAPMODE_SIMPLE
OF_BITMAPMODE_SCREEN = _of.OF_BITMAPMODE_SCREEN
OF_BITMAPMODE_VIEWPORT = _of.OF_BITMAPMODE_VIEWPORT
OF_BITMAPMODE_MODEL = _of.OF_BITMAPMODE_MODEL
OF_BITMAPMODE_MODEL_BILLBOARD = _of.OF_BITMAPMODE_MODEL_BILLBOARD
OF_LOG_VERBOSE = _of.OF_LOG_VERBOSE
OF_LOG_NOTICE = _of.OF_LOG_NOTICE
OF_LOG_WARNING = _of.OF_LOG_WARNING
OF_LOG_ERROR = _of.OF_LOG_ERROR
OF_LOG_FATAL_ERROR = _of.OF_LOG_FATAL_ERROR
OF_LOG_SILENT = _of.OF_LOG_SILENT

def ofSetLogLevel(*args):
  return _of.ofSetLogLevel(*args)
ofSetLogLevel = _of.ofSetLogLevel

def ofGetLogLevel():
  return _of.ofGetLogLevel()
ofGetLogLevel = _of.ofGetLogLevel

def ofSetLoggerChannel(*args):
  return _of.ofSetLoggerChannel(*args)
ofSetLoggerChannel = _of.ofSetLoggerChannel

def ofGetLogLevelName(*args):
  return _of.ofGetLogLevelName(*args)
ofGetLogLevelName = _of.ofGetLogLevelName

def ofLogToFile(*args):
  return _of.ofLogToFile(*args)
ofLogToFile = _of.ofLogToFile

def ofLogToConsole():
  return _of.ofLogToConsole()
ofLogToConsole = _of.ofLogToConsole
class ofLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofLog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofLog
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _of.ofLog___lshift__(self, *args)
    __swig_getmethods__["setAutoSpace"] = lambda x: _of.ofLog_setAutoSpace
    if _newclass:setAutoSpace = staticmethod(_of.ofLog_setAutoSpace)
    __swig_getmethods__["setChannel"] = lambda x: _of.ofLog_setChannel
    if _newclass:setChannel = staticmethod(_of.ofLog_setChannel)
ofLog_swigregister = _of.ofLog_swigregister
ofLog_swigregister(ofLog)

def ofLog_setAutoSpace(*args):
  return _of.ofLog_setAutoSpace(*args)
ofLog_setAutoSpace = _of.ofLog_setAutoSpace

def ofLog_setChannel(*args):
  return _of.ofLog_setChannel(*args)
ofLog_setChannel = _of.ofLog_setChannel

class ofLogVerbose(ofLog):
    __swig_setmethods__ = {}
    for _s in [ofLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofLogVerbose, name, value)
    __swig_getmethods__ = {}
    for _s in [ofLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofLogVerbose, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofLogVerbose(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofLogVerbose
    __del__ = lambda self : None;
ofLogVerbose_swigregister = _of.ofLogVerbose_swigregister
ofLogVerbose_swigregister(ofLogVerbose)

class ofLogNotice(ofLog):
    __swig_setmethods__ = {}
    for _s in [ofLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofLogNotice, name, value)
    __swig_getmethods__ = {}
    for _s in [ofLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofLogNotice, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofLogNotice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofLogNotice
    __del__ = lambda self : None;
ofLogNotice_swigregister = _of.ofLogNotice_swigregister
ofLogNotice_swigregister(ofLogNotice)

class ofLogWarning(ofLog):
    __swig_setmethods__ = {}
    for _s in [ofLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofLogWarning, name, value)
    __swig_getmethods__ = {}
    for _s in [ofLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofLogWarning, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofLogWarning(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofLogWarning
    __del__ = lambda self : None;
ofLogWarning_swigregister = _of.ofLogWarning_swigregister
ofLogWarning_swigregister(ofLogWarning)

class ofLogError(ofLog):
    __swig_setmethods__ = {}
    for _s in [ofLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofLogError, name, value)
    __swig_getmethods__ = {}
    for _s in [ofLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofLogError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofLogError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofLogError
    __del__ = lambda self : None;
ofLogError_swigregister = _of.ofLogError_swigregister
ofLogError_swigregister(ofLogError)

class ofLogFatalError(ofLog):
    __swig_setmethods__ = {}
    for _s in [ofLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofLogFatalError, name, value)
    __swig_getmethods__ = {}
    for _s in [ofLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofLogFatalError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofLogFatalError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofLogFatalError
    __del__ = lambda self : None;
ofLogFatalError_swigregister = _of.ofLogFatalError_swigregister
ofLogFatalError_swigregister(ofLogFatalError)

class ofBaseLoggerChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseLoggerChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseLoggerChannel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofBaseLoggerChannel
    __del__ = lambda self : None;
    def log(self, *args): return _of.ofBaseLoggerChannel_log(self, *args)
ofBaseLoggerChannel_swigregister = _of.ofBaseLoggerChannel_swigregister
ofBaseLoggerChannel_swigregister(ofBaseLoggerChannel)

class ofConsoleLoggerChannel(ofBaseLoggerChannel):
    __swig_setmethods__ = {}
    for _s in [ofBaseLoggerChannel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofConsoleLoggerChannel, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseLoggerChannel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofConsoleLoggerChannel, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _of.delete_ofConsoleLoggerChannel
    __del__ = lambda self : None;
    def log(self, *args): return _of.ofConsoleLoggerChannel_log(self, *args)
    def __init__(self): 
        this = _of.new_ofConsoleLoggerChannel()
        try: self.this.append(this)
        except: self.this = this
ofConsoleLoggerChannel_swigregister = _of.ofConsoleLoggerChannel_swigregister
ofConsoleLoggerChannel_swigregister(ofConsoleLoggerChannel)

class ofFileLoggerChannel(ofBaseLoggerChannel):
    __swig_setmethods__ = {}
    for _s in [ofBaseLoggerChannel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFileLoggerChannel, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseLoggerChannel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofFileLoggerChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _of.new_ofFileLoggerChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofFileLoggerChannel
    __del__ = lambda self : None;
    def setFile(self, *args): return _of.ofFileLoggerChannel_setFile(self, *args)
    def log(self, *args): return _of.ofFileLoggerChannel_log(self, *args)
    def close(self): return _of.ofFileLoggerChannel_close(self)
ofFileLoggerChannel_swigregister = _of.ofFileLoggerChannel_swigregister
ofFileLoggerChannel_swigregister(ofFileLoggerChannel)

class ofFileDialogResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFileDialogResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFileDialogResult, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofFileDialogResult()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _of.ofFileDialogResult_getName(self)
    def getPath(self): return _of.ofFileDialogResult_getPath(self)
    __swig_setmethods__["filePath"] = _of.ofFileDialogResult_filePath_set
    __swig_getmethods__["filePath"] = _of.ofFileDialogResult_filePath_get
    if _newclass:filePath = _swig_property(_of.ofFileDialogResult_filePath_get, _of.ofFileDialogResult_filePath_set)
    __swig_setmethods__["fileName"] = _of.ofFileDialogResult_fileName_set
    __swig_getmethods__["fileName"] = _of.ofFileDialogResult_fileName_get
    if _newclass:fileName = _swig_property(_of.ofFileDialogResult_fileName_get, _of.ofFileDialogResult_fileName_set)
    __swig_setmethods__["bSuccess"] = _of.ofFileDialogResult_bSuccess_set
    __swig_getmethods__["bSuccess"] = _of.ofFileDialogResult_bSuccess_get
    if _newclass:bSuccess = _swig_property(_of.ofFileDialogResult_bSuccess_get, _of.ofFileDialogResult_bSuccess_set)
    __swig_destroy__ = _of.delete_ofFileDialogResult
    __del__ = lambda self : None;
ofFileDialogResult_swigregister = _of.ofFileDialogResult_swigregister
ofFileDialogResult_swigregister(ofFileDialogResult)


def ofSystemAlertDialog(*args):
  return _of.ofSystemAlertDialog(*args)
ofSystemAlertDialog = _of.ofSystemAlertDialog

def ofSystemLoadDialog(windowTitle="", bFolderSelection=False, defaultPath=""):
  return _of.ofSystemLoadDialog(windowTitle, bFolderSelection, defaultPath)
ofSystemLoadDialog = _of.ofSystemLoadDialog

def ofSystemSaveDialog(*args):
  return _of.ofSystemSaveDialog(*args)
ofSystemSaveDialog = _of.ofSystemSaveDialog

def ofSystemTextBoxDialog(*args):
  return _of.ofSystemTextBoxDialog(*args)
ofSystemTextBoxDialog = _of.ofSystemTextBoxDialog

def ofResetElapsedTimeCounter():
  return _of.ofResetElapsedTimeCounter()
ofResetElapsedTimeCounter = _of.ofResetElapsedTimeCounter

def ofGetElapsedTimef():
  return _of.ofGetElapsedTimef()
ofGetElapsedTimef = _of.ofGetElapsedTimef

def ofGetElapsedTimeMillis():
  return _of.ofGetElapsedTimeMillis()
ofGetElapsedTimeMillis = _of.ofGetElapsedTimeMillis

def ofGetElapsedTimeMicros():
  return _of.ofGetElapsedTimeMicros()
ofGetElapsedTimeMicros = _of.ofGetElapsedTimeMicros

def ofGetFrameNum():
  return _of.ofGetFrameNum()
ofGetFrameNum = _of.ofGetFrameNum

def ofGetSeconds():
  return _of.ofGetSeconds()
ofGetSeconds = _of.ofGetSeconds

def ofGetMinutes():
  return _of.ofGetMinutes()
ofGetMinutes = _of.ofGetMinutes

def ofGetHours():
  return _of.ofGetHours()
ofGetHours = _of.ofGetHours

def ofGetUnixTime():
  return _of.ofGetUnixTime()
ofGetUnixTime = _of.ofGetUnixTime

def ofGetSystemTime():
  return _of.ofGetSystemTime()
ofGetSystemTime = _of.ofGetSystemTime

def ofGetSystemTimeMicros():
  return _of.ofGetSystemTimeMicros()
ofGetSystemTimeMicros = _of.ofGetSystemTimeMicros

def ofGetTimestampString(*args):
  return _of.ofGetTimestampString(*args)
ofGetTimestampString = _of.ofGetTimestampString

def ofGetYear():
  return _of.ofGetYear()
ofGetYear = _of.ofGetYear

def ofGetMonth():
  return _of.ofGetMonth()
ofGetMonth = _of.ofGetMonth

def ofGetDay():
  return _of.ofGetDay()
ofGetDay = _of.ofGetDay

def ofGetWeekday():
  return _of.ofGetWeekday()
ofGetWeekday = _of.ofGetWeekday

def ofLaunchBrowser(*args):
  return _of.ofLaunchBrowser(*args)
ofLaunchBrowser = _of.ofLaunchBrowser

def ofEnableDataPath():
  return _of.ofEnableDataPath()
ofEnableDataPath = _of.ofEnableDataPath

def ofDisableDataPath():
  return _of.ofDisableDataPath()
ofDisableDataPath = _of.ofDisableDataPath

def ofToDataPath(*args):
  return _of.ofToDataPath(*args)
ofToDataPath = _of.ofToDataPath

def ofSetDataPathRoot(*args):
  return _of.ofSetDataPathRoot(*args)
ofSetDataPathRoot = _of.ofSetDataPathRoot

def ofToHex(*args):
  return _of.ofToHex(*args)
ofToHex = _of.ofToHex

def ofHexToInt(*args):
  return _of.ofHexToInt(*args)
ofHexToInt = _of.ofHexToInt

def ofHexToChar(*args):
  return _of.ofHexToChar(*args)
ofHexToChar = _of.ofHexToChar

def ofHexToFloat(*args):
  return _of.ofHexToFloat(*args)
ofHexToFloat = _of.ofHexToFloat

def ofHexToString(*args):
  return _of.ofHexToString(*args)
ofHexToString = _of.ofHexToString

def ofToInt(*args):
  return _of.ofToInt(*args)
ofToInt = _of.ofToInt

def ofToChar(*args):
  return _of.ofToChar(*args)
ofToChar = _of.ofToChar

def ofToFloat(*args):
  return _of.ofToFloat(*args)
ofToFloat = _of.ofToFloat

def ofToDouble(*args):
  return _of.ofToDouble(*args)
ofToDouble = _of.ofToDouble

def ofToBool(*args):
  return _of.ofToBool(*args)
ofToBool = _of.ofToBool

def ofToBinary(*args):
  return _of.ofToBinary(*args)
ofToBinary = _of.ofToBinary

def ofBinaryToInt(*args):
  return _of.ofBinaryToInt(*args)
ofBinaryToInt = _of.ofBinaryToInt

def ofBinaryToChar(*args):
  return _of.ofBinaryToChar(*args)
ofBinaryToChar = _of.ofBinaryToChar

def ofBinaryToFloat(*args):
  return _of.ofBinaryToFloat(*args)
ofBinaryToFloat = _of.ofBinaryToFloat

def ofBinaryToString(*args):
  return _of.ofBinaryToString(*args)
ofBinaryToString = _of.ofBinaryToString

def ofGetVersionInfo():
  return _of.ofGetVersionInfo()
ofGetVersionInfo = _of.ofGetVersionInfo

def ofSaveScreen(*args):
  return _of.ofSaveScreen(*args)
ofSaveScreen = _of.ofSaveScreen

def ofSaveFrame(bUseViewport=False):
  return _of.ofSaveFrame(bUseViewport)
ofSaveFrame = _of.ofSaveFrame

def ofSaveViewport(*args):
  return _of.ofSaveViewport(*args)
ofSaveViewport = _of.ofSaveViewport

def ofSplitString(*args):
  return _of.ofSplitString(*args)
ofSplitString = _of.ofSplitString

def ofJoinString(*args):
  return _of.ofJoinString(*args)
ofJoinString = _of.ofJoinString

def ofStringReplace(*args):
  return _of.ofStringReplace(*args)
ofStringReplace = _of.ofStringReplace

def ofIsStringInString(*args):
  return _of.ofIsStringInString(*args)
ofIsStringInString = _of.ofIsStringInString

def ofToLower(*args):
  return _of.ofToLower(*args)
ofToLower = _of.ofToLower

def ofToUpper(*args):
  return _of.ofToUpper(*args)
ofToUpper = _of.ofToUpper

def ofVAArgsToString(*args):
  return _of.ofVAArgsToString(*args)
ofVAArgsToString = _of.ofVAArgsToString

def ofSystem(*args):
  return _of.ofSystem(*args)
ofSystem = _of.ofSystem

def ofGetTargetPlatform():
  return _of.ofGetTargetPlatform()
ofGetTargetPlatform = _of.ofGetTargetPlatform
class ofVideoGrabber(ofBaseVideoGrabber,ofBaseVideoDraws):
    __swig_setmethods__ = {}
    for _s in [ofBaseVideoGrabber,ofBaseVideoDraws]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVideoGrabber, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseVideoGrabber,ofBaseVideoDraws]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofVideoGrabber, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofVideoGrabber()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _of.delete_ofVideoGrabber
    __del__ = lambda self : None;
    def setGrabber(self, *args): return _of.ofVideoGrabber_setGrabber(self, *args)
    def getGrabber(self): return _of.ofVideoGrabber_getGrabber(self)
    def listDevices(self): return _of.ofVideoGrabber_listDevices(self)
    def isFrameNew(self): return _of.ofVideoGrabber_isFrameNew(self)
    def update(self): return _of.ofVideoGrabber_update(self)
    def grabFrame(self): return _of.ofVideoGrabber_grabFrame(self)
    def close(self): return _of.ofVideoGrabber_close(self)
    def initGrabber(self, *args): return _of.ofVideoGrabber_initGrabber(self, *args)
    def setPixelFormat(self, *args): return _of.ofVideoGrabber_setPixelFormat(self, *args)
    def getPixelFormat(self): return _of.ofVideoGrabber_getPixelFormat(self)
    def videoSettings(self): return _of.ofVideoGrabber_videoSettings(self)
    def getPixels(self): return _of.ofVideoGrabber_getPixels(self)
    def getPixelsRef(self): return _of.ofVideoGrabber_getPixelsRef(self)
    def getTextureReference(self): return _of.ofVideoGrabber_getTextureReference(self)
    def setVerbose(self, *args): return _of.ofVideoGrabber_setVerbose(self, *args)
    def setDeviceID(self, *args): return _of.ofVideoGrabber_setDeviceID(self, *args)
    def setDesiredFrameRate(self, *args): return _of.ofVideoGrabber_setDesiredFrameRate(self, *args)
    def setUseTexture(self, *args): return _of.ofVideoGrabber_setUseTexture(self, *args)
    def draw(self, *args): return _of.ofVideoGrabber_draw(self, *args)
    def setAnchorPercent(self, *args): return _of.ofVideoGrabber_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _of.ofVideoGrabber_setAnchorPoint(self, *args)
    def resetAnchor(self): return _of.ofVideoGrabber_resetAnchor(self)
    def getHeight(self): return _of.ofVideoGrabber_getHeight(self)
    def getWidth(self): return _of.ofVideoGrabber_getWidth(self)
    def isInitialized(self): return _of.ofVideoGrabber_isInitialized(self)
    __swig_setmethods__["height"] = _of.ofVideoGrabber_height_set
    __swig_getmethods__["height"] = _of.ofVideoGrabber_height_get
    if _newclass:height = _swig_property(_of.ofVideoGrabber_height_get, _of.ofVideoGrabber_height_set)
    __swig_setmethods__["width"] = _of.ofVideoGrabber_width_set
    __swig_getmethods__["width"] = _of.ofVideoGrabber_width_get
    if _newclass:width = _swig_property(_of.ofVideoGrabber_width_get, _of.ofVideoGrabber_width_set)
ofVideoGrabber_swigregister = _of.ofVideoGrabber_swigregister
ofVideoGrabber_swigregister(ofVideoGrabber)

class ofVideoPlayer(ofBaseVideoPlayer,ofBaseVideoDraws):
    __swig_setmethods__ = {}
    for _s in [ofBaseVideoPlayer,ofBaseVideoDraws]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVideoPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseVideoPlayer,ofBaseVideoDraws]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofVideoPlayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _of.new_ofVideoPlayer()
        try: self.this.append(this)
        except: self.this = this
    def setPlayer(self, *args): return _of.ofVideoPlayer_setPlayer(self, *args)
    def getPlayer(self): return _of.ofVideoPlayer_getPlayer(self)
    def loadMovie(self, *args): return _of.ofVideoPlayer_loadMovie(self, *args)
    def getMoviePath(self): return _of.ofVideoPlayer_getMoviePath(self)
    def setPixelFormat(self, *args): return _of.ofVideoPlayer_setPixelFormat(self, *args)
    def getPixelFormat(self): return _of.ofVideoPlayer_getPixelFormat(self)
    def closeMovie(self): return _of.ofVideoPlayer_closeMovie(self)
    def close(self): return _of.ofVideoPlayer_close(self)
    def update(self): return _of.ofVideoPlayer_update(self)
    def idleMovie(self): return _of.ofVideoPlayer_idleMovie(self)
    def play(self): return _of.ofVideoPlayer_play(self)
    def stop(self): return _of.ofVideoPlayer_stop(self)
    def isFrameNew(self): return _of.ofVideoPlayer_isFrameNew(self)
    def getPixels(self): return _of.ofVideoPlayer_getPixels(self)
    def getPixelsRef(self): return _of.ofVideoPlayer_getPixelsRef(self)
    def getPosition(self): return _of.ofVideoPlayer_getPosition(self)
    def getSpeed(self): return _of.ofVideoPlayer_getSpeed(self)
    def getDuration(self): return _of.ofVideoPlayer_getDuration(self)
    def getIsMovieDone(self): return _of.ofVideoPlayer_getIsMovieDone(self)
    def setPosition(self, *args): return _of.ofVideoPlayer_setPosition(self, *args)
    def setVolume(self, *args): return _of.ofVideoPlayer_setVolume(self, *args)
    def setLoopState(self, *args): return _of.ofVideoPlayer_setLoopState(self, *args)
    def getLoopState(self): return _of.ofVideoPlayer_getLoopState(self)
    def setSpeed(self, *args): return _of.ofVideoPlayer_setSpeed(self, *args)
    def setFrame(self, *args): return _of.ofVideoPlayer_setFrame(self, *args)
    def setUseTexture(self, *args): return _of.ofVideoPlayer_setUseTexture(self, *args)
    def getTextureReference(self): return _of.ofVideoPlayer_getTextureReference(self)
    def draw(self, *args): return _of.ofVideoPlayer_draw(self, *args)
    def setAnchorPercent(self, *args): return _of.ofVideoPlayer_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _of.ofVideoPlayer_setAnchorPoint(self, *args)
    def resetAnchor(self): return _of.ofVideoPlayer_resetAnchor(self)
    def setPaused(self, *args): return _of.ofVideoPlayer_setPaused(self, *args)
    def getCurrentFrame(self): return _of.ofVideoPlayer_getCurrentFrame(self)
    def getTotalNumFrames(self): return _of.ofVideoPlayer_getTotalNumFrames(self)
    def firstFrame(self): return _of.ofVideoPlayer_firstFrame(self)
    def nextFrame(self): return _of.ofVideoPlayer_nextFrame(self)
    def previousFrame(self): return _of.ofVideoPlayer_previousFrame(self)
    def getHeight(self): return _of.ofVideoPlayer_getHeight(self)
    def getWidth(self): return _of.ofVideoPlayer_getWidth(self)
    def isPaused(self): return _of.ofVideoPlayer_isPaused(self)
    def isLoaded(self): return _of.ofVideoPlayer_isLoaded(self)
    def isPlaying(self): return _of.ofVideoPlayer_isPlaying(self)
    __swig_setmethods__["height"] = _of.ofVideoPlayer_height_set
    __swig_getmethods__["height"] = _of.ofVideoPlayer_height_get
    if _newclass:height = _swig_property(_of.ofVideoPlayer_height_get, _of.ofVideoPlayer_height_set)
    __swig_setmethods__["width"] = _of.ofVideoPlayer_width_set
    __swig_getmethods__["width"] = _of.ofVideoPlayer_width_get
    if _newclass:width = _swig_property(_of.ofVideoPlayer_width_get, _of.ofVideoPlayer_width_set)
    __swig_destroy__ = _of.delete_ofVideoPlayer
    __del__ = lambda self : None;
ofVideoPlayer_swigregister = _of.ofVideoPlayer_swigregister
ofVideoPlayer_swigregister(ofVideoPlayer)

# This file is compatible with both classic and new-style classes.


";